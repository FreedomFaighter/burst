/* Copyright Yahoo, Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms. */
package org.burstsys.brio.model.schema

import org.burstsys.brio.model.schema.tree.{BrioTree, BrioTreeContext}
import org.burstsys.brio.model.schema.types.{BrioSchemaTypeContext, BrioSchemaTypes}
import org.burstsys.brio.types.BrioPath.BrioPathName
import org.burstsys.brio.types.BrioTypes._

/**
 * A brio schema type generated by the schema parser at runtime based on a
 * particular language driven schema definition. All questions about a brio schema
 * can be answered by this type.
 */
trait BrioSchema extends Any with BrioSchemaTypes with BrioTree {

  /**
   * The name as used to create an externalized identity
   *
   * @return
   */
  def name: BrioSchemaName

  /**
   * ask if an alias is valid for this schema
   *
   * @return
   */
  def aliasedTo(alias: BrioSchemaName): Boolean

  /**
   * the number of schema '''versions''' in this schema
   *
   * @return
   */
  def versionCount: Int

}

/**
 * generalized constructor to access previously instantiated schema models.
 */
object BrioSchema {
  def apply(name: BrioSchemaName): BrioSchema = getSchema(name)
}

final case
class BrioSchemaContext(
                         name: BrioSchemaName,
                         versionCount: BrioTypeKey,
                         rootRelationName: BrioRelationName,
                         rootStructureType: BrioTypeName
                       ) extends BrioSchema with BrioTreeContext with BrioSchemaTypeContext {

  override def toString: BrioRelationName = s"Schema('$name')"

  override def aliasedTo(alias: BrioSchemaName): Boolean = testAlias(this, alias)

}

