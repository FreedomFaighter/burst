/* Copyright Yahoo, Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms. */
package org.burstsys.felt.model.collectors.shrub.decl

import org.burstsys.felt.model.collectors.decl.FeltCollectorDecl
import org.burstsys.felt.model.collectors.shrub.{FeltShrubBuilder, FeltShrubPlan}
import org.burstsys.felt.model.tree.FeltNode
import org.burstsys.felt.model.tree.source.S

import scala.reflect.ClassTag

/**
 *
 */
trait FeltShrubDecl extends FeltCollectorDecl[FeltShrubRef, FeltShrubBuilder] {

  final override val nodeName = "felt-shrub-decl"

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // API
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  /**
   * the shrubId is the frameId
   *
   * @return
   */
  def shrubId: Int = frame.frameId

  /**
   * the shrubName is the frameName
   *
   * @return
   */
  def shrubName: String = frame.frameName

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // PLANNING
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  final
  def createPlan: FeltShrubPlan =
    global.binding.collectors.shrubs.collectorPlan(this).initialize

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // TREE OPS
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  override def treeApply[R: ClassTag](rule: FeltNode => Array[R]): Array[R] = ???

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // TYPE INFERENCE
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  override def canInferTypes: Boolean = ???

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // NORMALIZED SOURCE GEN
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  final override
  def normalizedSource(implicit index: Int): String = {
    s"${S}shrub  { }"
  }

}
