/* Copyright Yahoo, Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms. */
package org.burstsys.gen.thrift.api.client.query;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Coordinates of the dataset used to fulfil the query
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2022-03-10")
public class BTViewGeneration implements org.apache.thrift.TBase<BTViewGeneration, BTViewGeneration._Fields>, java.io.Serializable, Cloneable, Comparable<BTViewGeneration> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BTViewGeneration");

  private static final org.apache.thrift.protocol.TField DOMAIN_UDK_FIELD_DESC = new org.apache.thrift.protocol.TField("domainUdk", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VIEW_UDK_FIELD_DESC = new org.apache.thrift.protocol.TField("viewUdk", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GENERATION_CLOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("generationClock", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BTViewGenerationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BTViewGenerationTupleSchemeFactory();

  /**
   * The UDK of the query domain
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String domainUdk; // required
  /**
   * The UDK of the queried view
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String viewUdk; // required
  /**
   * The epoch timestamp of when the view was loaded
   */
  public long generationClock; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The UDK of the query domain
     */
    DOMAIN_UDK((short)1, "domainUdk"),
    /**
     * The UDK of the queried view
     */
    VIEW_UDK((short)2, "viewUdk"),
    /**
     * The epoch timestamp of when the view was loaded
     */
    GENERATION_CLOCK((short)3, "generationClock");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DOMAIN_UDK
          return DOMAIN_UDK;
        case 2: // VIEW_UDK
          return VIEW_UDK;
        case 3: // GENERATION_CLOCK
          return GENERATION_CLOCK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GENERATIONCLOCK_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DOMAIN_UDK, new org.apache.thrift.meta_data.FieldMetaData("domainUdk", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIEW_UDK, new org.apache.thrift.meta_data.FieldMetaData("viewUdk", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENERATION_CLOCK, new org.apache.thrift.meta_data.FieldMetaData("generationClock", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BTViewGeneration.class, metaDataMap);
  }

  public BTViewGeneration() {
  }

  public BTViewGeneration(
    java.lang.String domainUdk,
    java.lang.String viewUdk,
    long generationClock)
  {
    this();
    this.domainUdk = domainUdk;
    this.viewUdk = viewUdk;
    this.generationClock = generationClock;
    setGenerationClockIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BTViewGeneration(BTViewGeneration other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDomainUdk()) {
      this.domainUdk = other.domainUdk;
    }
    if (other.isSetViewUdk()) {
      this.viewUdk = other.viewUdk;
    }
    this.generationClock = other.generationClock;
  }

  public BTViewGeneration deepCopy() {
    return new BTViewGeneration(this);
  }

  @Override
  public void clear() {
    this.domainUdk = null;
    this.viewUdk = null;
    setGenerationClockIsSet(false);
    this.generationClock = 0;
  }

  /**
   * The UDK of the query domain
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDomainUdk() {
    return this.domainUdk;
  }

  /**
   * The UDK of the query domain
   */
  public BTViewGeneration setDomainUdk(@org.apache.thrift.annotation.Nullable java.lang.String domainUdk) {
    this.domainUdk = domainUdk;
    return this;
  }

  public void unsetDomainUdk() {
    this.domainUdk = null;
  }

  /** Returns true if field domainUdk is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainUdk() {
    return this.domainUdk != null;
  }

  public void setDomainUdkIsSet(boolean value) {
    if (!value) {
      this.domainUdk = null;
    }
  }

  /**
   * The UDK of the queried view
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getViewUdk() {
    return this.viewUdk;
  }

  /**
   * The UDK of the queried view
   */
  public BTViewGeneration setViewUdk(@org.apache.thrift.annotation.Nullable java.lang.String viewUdk) {
    this.viewUdk = viewUdk;
    return this;
  }

  public void unsetViewUdk() {
    this.viewUdk = null;
  }

  /** Returns true if field viewUdk is set (has been assigned a value) and false otherwise */
  public boolean isSetViewUdk() {
    return this.viewUdk != null;
  }

  public void setViewUdkIsSet(boolean value) {
    if (!value) {
      this.viewUdk = null;
    }
  }

  /**
   * The epoch timestamp of when the view was loaded
   */
  public long getGenerationClock() {
    return this.generationClock;
  }

  /**
   * The epoch timestamp of when the view was loaded
   */
  public BTViewGeneration setGenerationClock(long generationClock) {
    this.generationClock = generationClock;
    setGenerationClockIsSet(true);
    return this;
  }

  public void unsetGenerationClock() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GENERATIONCLOCK_ISSET_ID);
  }

  /** Returns true if field generationClock is set (has been assigned a value) and false otherwise */
  public boolean isSetGenerationClock() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GENERATIONCLOCK_ISSET_ID);
  }

  public void setGenerationClockIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GENERATIONCLOCK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DOMAIN_UDK:
      if (value == null) {
        unsetDomainUdk();
      } else {
        setDomainUdk((java.lang.String)value);
      }
      break;

    case VIEW_UDK:
      if (value == null) {
        unsetViewUdk();
      } else {
        setViewUdk((java.lang.String)value);
      }
      break;

    case GENERATION_CLOCK:
      if (value == null) {
        unsetGenerationClock();
      } else {
        setGenerationClock((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DOMAIN_UDK:
      return getDomainUdk();

    case VIEW_UDK:
      return getViewUdk();

    case GENERATION_CLOCK:
      return getGenerationClock();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DOMAIN_UDK:
      return isSetDomainUdk();
    case VIEW_UDK:
      return isSetViewUdk();
    case GENERATION_CLOCK:
      return isSetGenerationClock();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BTViewGeneration)
      return this.equals((BTViewGeneration)that);
    return false;
  }

  public boolean equals(BTViewGeneration that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_domainUdk = true && this.isSetDomainUdk();
    boolean that_present_domainUdk = true && that.isSetDomainUdk();
    if (this_present_domainUdk || that_present_domainUdk) {
      if (!(this_present_domainUdk && that_present_domainUdk))
        return false;
      if (!this.domainUdk.equals(that.domainUdk))
        return false;
    }

    boolean this_present_viewUdk = true && this.isSetViewUdk();
    boolean that_present_viewUdk = true && that.isSetViewUdk();
    if (this_present_viewUdk || that_present_viewUdk) {
      if (!(this_present_viewUdk && that_present_viewUdk))
        return false;
      if (!this.viewUdk.equals(that.viewUdk))
        return false;
    }

    boolean this_present_generationClock = true;
    boolean that_present_generationClock = true;
    if (this_present_generationClock || that_present_generationClock) {
      if (!(this_present_generationClock && that_present_generationClock))
        return false;
      if (this.generationClock != that.generationClock)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDomainUdk()) ? 131071 : 524287);
    if (isSetDomainUdk())
      hashCode = hashCode * 8191 + domainUdk.hashCode();

    hashCode = hashCode * 8191 + ((isSetViewUdk()) ? 131071 : 524287);
    if (isSetViewUdk())
      hashCode = hashCode * 8191 + viewUdk.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(generationClock);

    return hashCode;
  }

  @Override
  public int compareTo(BTViewGeneration other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDomainUdk()).compareTo(other.isSetDomainUdk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainUdk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainUdk, other.domainUdk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetViewUdk()).compareTo(other.isSetViewUdk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewUdk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewUdk, other.viewUdk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGenerationClock()).compareTo(other.isSetGenerationClock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenerationClock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generationClock, other.generationClock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BTViewGeneration(");
    boolean first = true;

    sb.append("domainUdk:");
    if (this.domainUdk == null) {
      sb.append("null");
    } else {
      sb.append(this.domainUdk);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewUdk:");
    if (this.viewUdk == null) {
      sb.append("null");
    } else {
      sb.append(this.viewUdk);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("generationClock:");
    sb.append(this.generationClock);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (domainUdk == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'domainUdk' was not present! Struct: " + toString());
    }
    if (viewUdk == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'viewUdk' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'generationClock' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BTViewGenerationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTViewGenerationStandardScheme getScheme() {
      return new BTViewGenerationStandardScheme();
    }
  }

  private static class BTViewGenerationStandardScheme extends org.apache.thrift.scheme.StandardScheme<BTViewGeneration> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BTViewGeneration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DOMAIN_UDK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.domainUdk = iprot.readString();
              struct.setDomainUdkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VIEW_UDK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.viewUdk = iprot.readString();
              struct.setViewUdkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GENERATION_CLOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.generationClock = iprot.readI64();
              struct.setGenerationClockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetGenerationClock()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'generationClock' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BTViewGeneration struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.domainUdk != null) {
        oprot.writeFieldBegin(DOMAIN_UDK_FIELD_DESC);
        oprot.writeString(struct.domainUdk);
        oprot.writeFieldEnd();
      }
      if (struct.viewUdk != null) {
        oprot.writeFieldBegin(VIEW_UDK_FIELD_DESC);
        oprot.writeString(struct.viewUdk);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GENERATION_CLOCK_FIELD_DESC);
      oprot.writeI64(struct.generationClock);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BTViewGenerationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTViewGenerationTupleScheme getScheme() {
      return new BTViewGenerationTupleScheme();
    }
  }

  private static class BTViewGenerationTupleScheme extends org.apache.thrift.scheme.TupleScheme<BTViewGeneration> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BTViewGeneration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.domainUdk);
      oprot.writeString(struct.viewUdk);
      oprot.writeI64(struct.generationClock);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BTViewGeneration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.domainUdk = iprot.readString();
      struct.setDomainUdkIsSet(true);
      struct.viewUdk = iprot.readString();
      struct.setViewUdkIsSet(true);
      struct.generationClock = iprot.readI64();
      struct.setGenerationClockIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

