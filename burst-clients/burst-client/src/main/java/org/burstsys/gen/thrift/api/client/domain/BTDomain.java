/* Copyright Yahoo, Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms. */
package org.burstsys.gen.thrift.api.client.domain;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * A domain encapsulates a logical dataset on the store side.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2022-03-10")
public class BTDomain implements org.apache.thrift.TBase<BTDomain, BTDomain._Fields>, java.io.Serializable, Cloneable, Comparable<BTDomain> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BTDomain");

  private static final org.apache.thrift.protocol.TField PK_FIELD_DESC = new org.apache.thrift.protocol.TField("pk", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField UDK_FIELD_DESC = new org.apache.thrift.protocol.TField("udk", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MONIKER_FIELD_DESC = new org.apache.thrift.protocol.TField("moniker", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DOMAIN_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("domainProperties", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField LABELS_FIELD_DESC = new org.apache.thrift.protocol.TField("labels", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("modifyTimestamp", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField VIEWS_FIELD_DESC = new org.apache.thrift.protocol.TField("views", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BTDomainStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BTDomainTupleSchemeFactory();

  /**
   * The PK is used internally, but should not be relied upon by clients
   */
  public long pk; // optional
  /**
   * The user defined key (UDK) is a unique key that should be used to create/fetch domains
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String udk; // required
  /**
   * The moniker is a user-friendly display string for this domain
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String moniker; // required
  /**
   * Domain properties are used to store additional information about the domain
   */
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> domainProperties; // required
  /**
   * Labels allow users to classify domains, but aren't used internally by Burst
   */
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> labels; // required
  /**
   * The create timestamp is generated by Burst when the domain is created
   */
  public long createTimestamp; // optional
  /**
   * The modify timestamp is set by Burst when the domain is updated
   */
  public long modifyTimestamp; // optional
  /**
   * When a domain is fetched it will include the list of views that exist in the domain.
   * When creating a domain with `ensureDomain`, views included here will be treated
   * as if `ensureView` had been called with their contents.
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<org.burstsys.gen.thrift.api.client.view.BTView> views; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The PK is used internally, but should not be relied upon by clients
     */
    PK((short)1, "pk"),
    /**
     * The user defined key (UDK) is a unique key that should be used to create/fetch domains
     */
    UDK((short)2, "udk"),
    /**
     * The moniker is a user-friendly display string for this domain
     */
    MONIKER((short)3, "moniker"),
    /**
     * Domain properties are used to store additional information about the domain
     */
    DOMAIN_PROPERTIES((short)4, "domainProperties"),
    /**
     * Labels allow users to classify domains, but aren't used internally by Burst
     */
    LABELS((short)5, "labels"),
    /**
     * The create timestamp is generated by Burst when the domain is created
     */
    CREATE_TIMESTAMP((short)6, "createTimestamp"),
    /**
     * The modify timestamp is set by Burst when the domain is updated
     */
    MODIFY_TIMESTAMP((short)7, "modifyTimestamp"),
    /**
     * When a domain is fetched it will include the list of views that exist in the domain.
     * When creating a domain with `ensureDomain`, views included here will be treated
     * as if `ensureView` had been called with their contents.
     */
    VIEWS((short)8, "views");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PK
          return PK;
        case 2: // UDK
          return UDK;
        case 3: // MONIKER
          return MONIKER;
        case 4: // DOMAIN_PROPERTIES
          return DOMAIN_PROPERTIES;
        case 5: // LABELS
          return LABELS;
        case 6: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 7: // MODIFY_TIMESTAMP
          return MODIFY_TIMESTAMP;
        case 8: // VIEWS
          return VIEWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PK_ISSET_ID = 0;
  private static final int __CREATETIMESTAMP_ISSET_ID = 1;
  private static final int __MODIFYTIMESTAMP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PK,_Fields.CREATE_TIMESTAMP,_Fields.MODIFY_TIMESTAMP,_Fields.VIEWS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PK, new org.apache.thrift.meta_data.FieldMetaData("pk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UDK, new org.apache.thrift.meta_data.FieldMetaData("udk", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONIKER, new org.apache.thrift.meta_data.FieldMetaData("moniker", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOMAIN_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("domainProperties", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LABELS, new org.apache.thrift.meta_data.FieldMetaData("labels", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("modifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VIEWS, new org.apache.thrift.meta_data.FieldMetaData("views", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.burstsys.gen.thrift.api.client.view.BTView.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BTDomain.class, metaDataMap);
  }

  public BTDomain() {
  }

  public BTDomain(
    java.lang.String udk,
    java.lang.String moniker,
    java.util.Map<java.lang.String,java.lang.String> domainProperties,
    java.util.Map<java.lang.String,java.lang.String> labels)
  {
    this();
    this.udk = udk;
    this.moniker = moniker;
    this.domainProperties = domainProperties;
    this.labels = labels;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BTDomain(BTDomain other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pk = other.pk;
    if (other.isSetUdk()) {
      this.udk = other.udk;
    }
    if (other.isSetMoniker()) {
      this.moniker = other.moniker;
    }
    if (other.isSetDomainProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__domainProperties = new java.util.HashMap<java.lang.String,java.lang.String>(other.domainProperties);
      this.domainProperties = __this__domainProperties;
    }
    if (other.isSetLabels()) {
      java.util.Map<java.lang.String,java.lang.String> __this__labels = new java.util.HashMap<java.lang.String,java.lang.String>(other.labels);
      this.labels = __this__labels;
    }
    this.createTimestamp = other.createTimestamp;
    this.modifyTimestamp = other.modifyTimestamp;
    if (other.isSetViews()) {
      java.util.List<org.burstsys.gen.thrift.api.client.view.BTView> __this__views = new java.util.ArrayList<org.burstsys.gen.thrift.api.client.view.BTView>(other.views.size());
      for (org.burstsys.gen.thrift.api.client.view.BTView other_element : other.views) {
        __this__views.add(new org.burstsys.gen.thrift.api.client.view.BTView(other_element));
      }
      this.views = __this__views;
    }
  }

  public BTDomain deepCopy() {
    return new BTDomain(this);
  }

  @Override
  public void clear() {
    setPkIsSet(false);
    this.pk = 0;
    this.udk = null;
    this.moniker = null;
    this.domainProperties = null;
    this.labels = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setModifyTimestampIsSet(false);
    this.modifyTimestamp = 0;
    this.views = null;
  }

  /**
   * The PK is used internally, but should not be relied upon by clients
   */
  public long getPk() {
    return this.pk;
  }

  /**
   * The PK is used internally, but should not be relied upon by clients
   */
  public BTDomain setPk(long pk) {
    this.pk = pk;
    setPkIsSet(true);
    return this;
  }

  public void unsetPk() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PK_ISSET_ID);
  }

  /** Returns true if field pk is set (has been assigned a value) and false otherwise */
  public boolean isSetPk() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PK_ISSET_ID);
  }

  public void setPkIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PK_ISSET_ID, value);
  }

  /**
   * The user defined key (UDK) is a unique key that should be used to create/fetch domains
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUdk() {
    return this.udk;
  }

  /**
   * The user defined key (UDK) is a unique key that should be used to create/fetch domains
   */
  public BTDomain setUdk(@org.apache.thrift.annotation.Nullable java.lang.String udk) {
    this.udk = udk;
    return this;
  }

  public void unsetUdk() {
    this.udk = null;
  }

  /** Returns true if field udk is set (has been assigned a value) and false otherwise */
  public boolean isSetUdk() {
    return this.udk != null;
  }

  public void setUdkIsSet(boolean value) {
    if (!value) {
      this.udk = null;
    }
  }

  /**
   * The moniker is a user-friendly display string for this domain
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMoniker() {
    return this.moniker;
  }

  /**
   * The moniker is a user-friendly display string for this domain
   */
  public BTDomain setMoniker(@org.apache.thrift.annotation.Nullable java.lang.String moniker) {
    this.moniker = moniker;
    return this;
  }

  public void unsetMoniker() {
    this.moniker = null;
  }

  /** Returns true if field moniker is set (has been assigned a value) and false otherwise */
  public boolean isSetMoniker() {
    return this.moniker != null;
  }

  public void setMonikerIsSet(boolean value) {
    if (!value) {
      this.moniker = null;
    }
  }

  public int getDomainPropertiesSize() {
    return (this.domainProperties == null) ? 0 : this.domainProperties.size();
  }

  public void putToDomainProperties(java.lang.String key, java.lang.String val) {
    if (this.domainProperties == null) {
      this.domainProperties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.domainProperties.put(key, val);
  }

  /**
   * Domain properties are used to store additional information about the domain
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getDomainProperties() {
    return this.domainProperties;
  }

  /**
   * Domain properties are used to store additional information about the domain
   */
  public BTDomain setDomainProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> domainProperties) {
    this.domainProperties = domainProperties;
    return this;
  }

  public void unsetDomainProperties() {
    this.domainProperties = null;
  }

  /** Returns true if field domainProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainProperties() {
    return this.domainProperties != null;
  }

  public void setDomainPropertiesIsSet(boolean value) {
    if (!value) {
      this.domainProperties = null;
    }
  }

  public int getLabelsSize() {
    return (this.labels == null) ? 0 : this.labels.size();
  }

  public void putToLabels(java.lang.String key, java.lang.String val) {
    if (this.labels == null) {
      this.labels = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.labels.put(key, val);
  }

  /**
   * Labels allow users to classify domains, but aren't used internally by Burst
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getLabels() {
    return this.labels;
  }

  /**
   * Labels allow users to classify domains, but aren't used internally by Burst
   */
  public BTDomain setLabels(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  public void unsetLabels() {
    this.labels = null;
  }

  /** Returns true if field labels is set (has been assigned a value) and false otherwise */
  public boolean isSetLabels() {
    return this.labels != null;
  }

  public void setLabelsIsSet(boolean value) {
    if (!value) {
      this.labels = null;
    }
  }

  /**
   * The create timestamp is generated by Burst when the domain is created
   */
  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  /**
   * The create timestamp is generated by Burst when the domain is created
   */
  public BTDomain setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  /**
   * The modify timestamp is set by Burst when the domain is updated
   */
  public long getModifyTimestamp() {
    return this.modifyTimestamp;
  }

  /**
   * The modify timestamp is set by Burst when the domain is updated
   */
  public BTDomain setModifyTimestamp(long modifyTimestamp) {
    this.modifyTimestamp = modifyTimestamp;
    setModifyTimestampIsSet(true);
    return this;
  }

  public void unsetModifyTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field modifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetModifyTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODIFYTIMESTAMP_ISSET_ID);
  }

  public void setModifyTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODIFYTIMESTAMP_ISSET_ID, value);
  }

  public int getViewsSize() {
    return (this.views == null) ? 0 : this.views.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.burstsys.gen.thrift.api.client.view.BTView> getViewsIterator() {
    return (this.views == null) ? null : this.views.iterator();
  }

  public void addToViews(org.burstsys.gen.thrift.api.client.view.BTView elem) {
    if (this.views == null) {
      this.views = new java.util.ArrayList<org.burstsys.gen.thrift.api.client.view.BTView>();
    }
    this.views.add(elem);
  }

  /**
   * When a domain is fetched it will include the list of views that exist in the domain.
   * When creating a domain with `ensureDomain`, views included here will be treated
   * as if `ensureView` had been called with their contents.
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.burstsys.gen.thrift.api.client.view.BTView> getViews() {
    return this.views;
  }

  /**
   * When a domain is fetched it will include the list of views that exist in the domain.
   * When creating a domain with `ensureDomain`, views included here will be treated
   * as if `ensureView` had been called with their contents.
   */
  public BTDomain setViews(@org.apache.thrift.annotation.Nullable java.util.List<org.burstsys.gen.thrift.api.client.view.BTView> views) {
    this.views = views;
    return this;
  }

  public void unsetViews() {
    this.views = null;
  }

  /** Returns true if field views is set (has been assigned a value) and false otherwise */
  public boolean isSetViews() {
    return this.views != null;
  }

  public void setViewsIsSet(boolean value) {
    if (!value) {
      this.views = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PK:
      if (value == null) {
        unsetPk();
      } else {
        setPk((java.lang.Long)value);
      }
      break;

    case UDK:
      if (value == null) {
        unsetUdk();
      } else {
        setUdk((java.lang.String)value);
      }
      break;

    case MONIKER:
      if (value == null) {
        unsetMoniker();
      } else {
        setMoniker((java.lang.String)value);
      }
      break;

    case DOMAIN_PROPERTIES:
      if (value == null) {
        unsetDomainProperties();
      } else {
        setDomainProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case LABELS:
      if (value == null) {
        unsetLabels();
      } else {
        setLabels((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((java.lang.Long)value);
      }
      break;

    case MODIFY_TIMESTAMP:
      if (value == null) {
        unsetModifyTimestamp();
      } else {
        setModifyTimestamp((java.lang.Long)value);
      }
      break;

    case VIEWS:
      if (value == null) {
        unsetViews();
      } else {
        setViews((java.util.List<org.burstsys.gen.thrift.api.client.view.BTView>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PK:
      return getPk();

    case UDK:
      return getUdk();

    case MONIKER:
      return getMoniker();

    case DOMAIN_PROPERTIES:
      return getDomainProperties();

    case LABELS:
      return getLabels();

    case CREATE_TIMESTAMP:
      return getCreateTimestamp();

    case MODIFY_TIMESTAMP:
      return getModifyTimestamp();

    case VIEWS:
      return getViews();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PK:
      return isSetPk();
    case UDK:
      return isSetUdk();
    case MONIKER:
      return isSetMoniker();
    case DOMAIN_PROPERTIES:
      return isSetDomainProperties();
    case LABELS:
      return isSetLabels();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case MODIFY_TIMESTAMP:
      return isSetModifyTimestamp();
    case VIEWS:
      return isSetViews();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BTDomain)
      return this.equals((BTDomain)that);
    return false;
  }

  public boolean equals(BTDomain that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_pk = true && this.isSetPk();
    boolean that_present_pk = true && that.isSetPk();
    if (this_present_pk || that_present_pk) {
      if (!(this_present_pk && that_present_pk))
        return false;
      if (this.pk != that.pk)
        return false;
    }

    boolean this_present_udk = true && this.isSetUdk();
    boolean that_present_udk = true && that.isSetUdk();
    if (this_present_udk || that_present_udk) {
      if (!(this_present_udk && that_present_udk))
        return false;
      if (!this.udk.equals(that.udk))
        return false;
    }

    boolean this_present_moniker = true && this.isSetMoniker();
    boolean that_present_moniker = true && that.isSetMoniker();
    if (this_present_moniker || that_present_moniker) {
      if (!(this_present_moniker && that_present_moniker))
        return false;
      if (!this.moniker.equals(that.moniker))
        return false;
    }

    boolean this_present_domainProperties = true && this.isSetDomainProperties();
    boolean that_present_domainProperties = true && that.isSetDomainProperties();
    if (this_present_domainProperties || that_present_domainProperties) {
      if (!(this_present_domainProperties && that_present_domainProperties))
        return false;
      if (!this.domainProperties.equals(that.domainProperties))
        return false;
    }

    boolean this_present_labels = true && this.isSetLabels();
    boolean that_present_labels = true && that.isSetLabels();
    if (this_present_labels || that_present_labels) {
      if (!(this_present_labels && that_present_labels))
        return false;
      if (!this.labels.equals(that.labels))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_modifyTimestamp = true && this.isSetModifyTimestamp();
    boolean that_present_modifyTimestamp = true && that.isSetModifyTimestamp();
    if (this_present_modifyTimestamp || that_present_modifyTimestamp) {
      if (!(this_present_modifyTimestamp && that_present_modifyTimestamp))
        return false;
      if (this.modifyTimestamp != that.modifyTimestamp)
        return false;
    }

    boolean this_present_views = true && this.isSetViews();
    boolean that_present_views = true && that.isSetViews();
    if (this_present_views || that_present_views) {
      if (!(this_present_views && that_present_views))
        return false;
      if (!this.views.equals(that.views))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPk()) ? 131071 : 524287);
    if (isSetPk())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(pk);

    hashCode = hashCode * 8191 + ((isSetUdk()) ? 131071 : 524287);
    if (isSetUdk())
      hashCode = hashCode * 8191 + udk.hashCode();

    hashCode = hashCode * 8191 + ((isSetMoniker()) ? 131071 : 524287);
    if (isSetMoniker())
      hashCode = hashCode * 8191 + moniker.hashCode();

    hashCode = hashCode * 8191 + ((isSetDomainProperties()) ? 131071 : 524287);
    if (isSetDomainProperties())
      hashCode = hashCode * 8191 + domainProperties.hashCode();

    hashCode = hashCode * 8191 + ((isSetLabels()) ? 131071 : 524287);
    if (isSetLabels())
      hashCode = hashCode * 8191 + labels.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateTimestamp()) ? 131071 : 524287);
    if (isSetCreateTimestamp())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTimestamp);

    hashCode = hashCode * 8191 + ((isSetModifyTimestamp()) ? 131071 : 524287);
    if (isSetModifyTimestamp())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(modifyTimestamp);

    hashCode = hashCode * 8191 + ((isSetViews()) ? 131071 : 524287);
    if (isSetViews())
      hashCode = hashCode * 8191 + views.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BTDomain other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPk()).compareTo(other.isSetPk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pk, other.pk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUdk()).compareTo(other.isSetUdk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUdk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.udk, other.udk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMoniker()).compareTo(other.isSetMoniker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoniker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moniker, other.moniker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDomainProperties()).compareTo(other.isSetDomainProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainProperties, other.domainProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLabels()).compareTo(other.isSetLabels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.labels, other.labels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModifyTimestamp()).compareTo(other.isSetModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifyTimestamp, other.modifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetViews()).compareTo(other.isSetViews());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViews()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.views, other.views);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BTDomain(");
    boolean first = true;

    if (isSetPk()) {
      sb.append("pk:");
      sb.append(this.pk);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("udk:");
    if (this.udk == null) {
      sb.append("null");
    } else {
      sb.append(this.udk);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("moniker:");
    if (this.moniker == null) {
      sb.append("null");
    } else {
      sb.append(this.moniker);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("domainProperties:");
    if (this.domainProperties == null) {
      sb.append("null");
    } else {
      sb.append(this.domainProperties);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("labels:");
    if (this.labels == null) {
      sb.append("null");
    } else {
      sb.append(this.labels);
    }
    first = false;
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("modifyTimestamp:");
      sb.append(this.modifyTimestamp);
      first = false;
    }
    if (isSetViews()) {
      if (!first) sb.append(", ");
      sb.append("views:");
      if (this.views == null) {
        sb.append("null");
      } else {
        sb.append(this.views);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (udk == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'udk' was not present! Struct: " + toString());
    }
    if (moniker == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'moniker' was not present! Struct: " + toString());
    }
    if (domainProperties == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'domainProperties' was not present! Struct: " + toString());
    }
    if (labels == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'labels' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BTDomainStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTDomainStandardScheme getScheme() {
      return new BTDomainStandardScheme();
    }
  }

  private static class BTDomainStandardScheme extends org.apache.thrift.scheme.StandardScheme<BTDomain> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BTDomain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pk = iprot.readI64();
              struct.setPkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UDK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.udk = iprot.readString();
              struct.setUdkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MONIKER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moniker = iprot.readString();
              struct.setMonikerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOMAIN_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.domainProperties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                @org.apache.thrift.annotation.Nullable java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.domainProperties.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setDomainPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LABELS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.labels = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map4.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key5;
                @org.apache.thrift.annotation.Nullable java.lang.String _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readString();
                  _val6 = iprot.readString();
                  struct.labels.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setLabelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.modifyTimestamp = iprot.readI64();
              struct.setModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VIEWS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.views = new java.util.ArrayList<org.burstsys.gen.thrift.api.client.view.BTView>(_list8.size);
                @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.view.BTView _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new org.burstsys.gen.thrift.api.client.view.BTView();
                  _elem9.read(iprot);
                  struct.views.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setViewsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BTDomain struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPk()) {
        oprot.writeFieldBegin(PK_FIELD_DESC);
        oprot.writeI64(struct.pk);
        oprot.writeFieldEnd();
      }
      if (struct.udk != null) {
        oprot.writeFieldBegin(UDK_FIELD_DESC);
        oprot.writeString(struct.udk);
        oprot.writeFieldEnd();
      }
      if (struct.moniker != null) {
        oprot.writeFieldBegin(MONIKER_FIELD_DESC);
        oprot.writeString(struct.moniker);
        oprot.writeFieldEnd();
      }
      if (struct.domainProperties != null) {
        oprot.writeFieldBegin(DOMAIN_PROPERTIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.domainProperties.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter11 : struct.domainProperties.entrySet())
          {
            oprot.writeString(_iter11.getKey());
            oprot.writeString(_iter11.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.labels != null) {
        oprot.writeFieldBegin(LABELS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.labels.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter12 : struct.labels.entrySet())
          {
            oprot.writeString(_iter12.getKey());
            oprot.writeString(_iter12.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetModifyTimestamp()) {
        oprot.writeFieldBegin(MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.modifyTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.views != null) {
        if (struct.isSetViews()) {
          oprot.writeFieldBegin(VIEWS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.views.size()));
            for (org.burstsys.gen.thrift.api.client.view.BTView _iter13 : struct.views)
            {
              _iter13.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BTDomainTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTDomainTupleScheme getScheme() {
      return new BTDomainTupleScheme();
    }
  }

  private static class BTDomainTupleScheme extends org.apache.thrift.scheme.TupleScheme<BTDomain> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BTDomain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.udk);
      oprot.writeString(struct.moniker);
      {
        oprot.writeI32(struct.domainProperties.size());
        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter14 : struct.domainProperties.entrySet())
        {
          oprot.writeString(_iter14.getKey());
          oprot.writeString(_iter14.getValue());
        }
      }
      {
        oprot.writeI32(struct.labels.size());
        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter15 : struct.labels.entrySet())
        {
          oprot.writeString(_iter15.getKey());
          oprot.writeString(_iter15.getValue());
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPk()) {
        optionals.set(0);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(1);
      }
      if (struct.isSetModifyTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetViews()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPk()) {
        oprot.writeI64(struct.pk);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetModifyTimestamp()) {
        oprot.writeI64(struct.modifyTimestamp);
      }
      if (struct.isSetViews()) {
        {
          oprot.writeI32(struct.views.size());
          for (org.burstsys.gen.thrift.api.client.view.BTView _iter16 : struct.views)
          {
            _iter16.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BTDomain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.udk = iprot.readString();
      struct.setUdkIsSet(true);
      struct.moniker = iprot.readString();
      struct.setMonikerIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map17 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.domainProperties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map17.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _key18;
        @org.apache.thrift.annotation.Nullable java.lang.String _val19;
        for (int _i20 = 0; _i20 < _map17.size; ++_i20)
        {
          _key18 = iprot.readString();
          _val19 = iprot.readString();
          struct.domainProperties.put(_key18, _val19);
        }
      }
      struct.setDomainPropertiesIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map21 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.labels = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map21.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _key22;
        @org.apache.thrift.annotation.Nullable java.lang.String _val23;
        for (int _i24 = 0; _i24 < _map21.size; ++_i24)
        {
          _key22 = iprot.readString();
          _val23 = iprot.readString();
          struct.labels.put(_key22, _val23);
        }
      }
      struct.setLabelsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.pk = iprot.readI64();
        struct.setPkIsSet(true);
      }
      if (incoming.get(1)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.modifyTimestamp = iprot.readI64();
        struct.setModifyTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.views = new java.util.ArrayList<org.burstsys.gen.thrift.api.client.view.BTView>(_list25.size);
          @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.view.BTView _elem26;
          for (int _i27 = 0; _i27 < _list25.size; ++_i27)
          {
            _elem26 = new org.burstsys.gen.thrift.api.client.view.BTView();
            _elem26.read(iprot);
            struct.views.add(_elem26);
          }
        }
        struct.setViewsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

