/* Copyright Yahoo, Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms. */
package org.burstsys.gen.thrift.api.client.query;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2022-03-10")
public class BTParameter implements org.apache.thrift.TBase<BTParameter, BTParameter._Fields>, java.io.Serializable, Cloneable, Comparable<BTParameter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BTParameter");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("format", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PRIMARY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("primaryType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SECONDARY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("secondaryType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DATUM_FIELD_DESC = new org.apache.thrift.protocol.TField("datum", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField IS_NULL_FIELD_DESC = new org.apache.thrift.protocol.TField("isNull", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BTParameterStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BTParameterTupleSchemeFactory();

  /**
   * the name of this parameter
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  /**
   * if the parameter is a scalar, vector, or map
   * 
   * @see org.burstsys.gen.thrift.api.client.BTDataFormat
   */
  public @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.BTDataFormat format; // required
  /**
   * the type of the parameter, or if the parameter is a map the type of they map's keys
   * 
   * @see org.burstsys.gen.thrift.api.client.BTDataType
   */
  public @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.BTDataType primaryType; // required
  /**
   * unused, unless the parameter is a map, then the type of the map's values
   * 
   * @see org.burstsys.gen.thrift.api.client.BTDataType
   */
  public @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.BTDataType secondaryType; // optional
  /**
   * the acutal value of the parameter
   */
  public @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.BTDatum datum; // required
  /**
   * if data is a null value
   */
  public boolean isNull; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * the name of this parameter
     */
    NAME((short)1, "name"),
    /**
     * if the parameter is a scalar, vector, or map
     * 
     * @see org.burstsys.gen.thrift.api.client.BTDataFormat
     */
    FORMAT((short)2, "format"),
    /**
     * the type of the parameter, or if the parameter is a map the type of they map's keys
     * 
     * @see org.burstsys.gen.thrift.api.client.BTDataType
     */
    PRIMARY_TYPE((short)3, "primaryType"),
    /**
     * unused, unless the parameter is a map, then the type of the map's values
     * 
     * @see org.burstsys.gen.thrift.api.client.BTDataType
     */
    SECONDARY_TYPE((short)4, "secondaryType"),
    /**
     * the acutal value of the parameter
     */
    DATUM((short)5, "datum"),
    /**
     * if data is a null value
     */
    IS_NULL((short)6, "isNull");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // FORMAT
          return FORMAT;
        case 3: // PRIMARY_TYPE
          return PRIMARY_TYPE;
        case 4: // SECONDARY_TYPE
          return SECONDARY_TYPE;
        case 5: // DATUM
          return DATUM;
        case 6: // IS_NULL
          return IS_NULL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISNULL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SECONDARY_TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORMAT, new org.apache.thrift.meta_data.FieldMetaData("format", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.burstsys.gen.thrift.api.client.BTDataFormat.class)));
    tmpMap.put(_Fields.PRIMARY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("primaryType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.burstsys.gen.thrift.api.client.BTDataType.class)));
    tmpMap.put(_Fields.SECONDARY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("secondaryType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.burstsys.gen.thrift.api.client.BTDataType.class)));
    tmpMap.put(_Fields.DATUM, new org.apache.thrift.meta_data.FieldMetaData("datum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.burstsys.gen.thrift.api.client.BTDatum.class)));
    tmpMap.put(_Fields.IS_NULL, new org.apache.thrift.meta_data.FieldMetaData("isNull", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BTParameter.class, metaDataMap);
  }

  public BTParameter() {
  }

  public BTParameter(
    java.lang.String name,
    org.burstsys.gen.thrift.api.client.BTDataFormat format,
    org.burstsys.gen.thrift.api.client.BTDataType primaryType,
    org.burstsys.gen.thrift.api.client.BTDatum datum,
    boolean isNull)
  {
    this();
    this.name = name;
    this.format = format;
    this.primaryType = primaryType;
    this.datum = datum;
    this.isNull = isNull;
    setIsNullIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BTParameter(BTParameter other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetFormat()) {
      this.format = other.format;
    }
    if (other.isSetPrimaryType()) {
      this.primaryType = other.primaryType;
    }
    if (other.isSetSecondaryType()) {
      this.secondaryType = other.secondaryType;
    }
    if (other.isSetDatum()) {
      this.datum = new org.burstsys.gen.thrift.api.client.BTDatum(other.datum);
    }
    this.isNull = other.isNull;
  }

  public BTParameter deepCopy() {
    return new BTParameter(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.format = null;
    this.primaryType = null;
    this.secondaryType = null;
    this.datum = null;
    setIsNullIsSet(false);
    this.isNull = false;
  }

  /**
   * the name of this parameter
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  /**
   * the name of this parameter
   */
  public BTParameter setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * if the parameter is a scalar, vector, or map
   * 
   * @see org.burstsys.gen.thrift.api.client.BTDataFormat
   */
  @org.apache.thrift.annotation.Nullable
  public org.burstsys.gen.thrift.api.client.BTDataFormat getFormat() {
    return this.format;
  }

  /**
   * if the parameter is a scalar, vector, or map
   * 
   * @see org.burstsys.gen.thrift.api.client.BTDataFormat
   */
  public BTParameter setFormat(@org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.BTDataFormat format) {
    this.format = format;
    return this;
  }

  public void unsetFormat() {
    this.format = null;
  }

  /** Returns true if field format is set (has been assigned a value) and false otherwise */
  public boolean isSetFormat() {
    return this.format != null;
  }

  public void setFormatIsSet(boolean value) {
    if (!value) {
      this.format = null;
    }
  }

  /**
   * the type of the parameter, or if the parameter is a map the type of they map's keys
   * 
   * @see org.burstsys.gen.thrift.api.client.BTDataType
   */
  @org.apache.thrift.annotation.Nullable
  public org.burstsys.gen.thrift.api.client.BTDataType getPrimaryType() {
    return this.primaryType;
  }

  /**
   * the type of the parameter, or if the parameter is a map the type of they map's keys
   * 
   * @see org.burstsys.gen.thrift.api.client.BTDataType
   */
  public BTParameter setPrimaryType(@org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.BTDataType primaryType) {
    this.primaryType = primaryType;
    return this;
  }

  public void unsetPrimaryType() {
    this.primaryType = null;
  }

  /** Returns true if field primaryType is set (has been assigned a value) and false otherwise */
  public boolean isSetPrimaryType() {
    return this.primaryType != null;
  }

  public void setPrimaryTypeIsSet(boolean value) {
    if (!value) {
      this.primaryType = null;
    }
  }

  /**
   * unused, unless the parameter is a map, then the type of the map's values
   * 
   * @see org.burstsys.gen.thrift.api.client.BTDataType
   */
  @org.apache.thrift.annotation.Nullable
  public org.burstsys.gen.thrift.api.client.BTDataType getSecondaryType() {
    return this.secondaryType;
  }

  /**
   * unused, unless the parameter is a map, then the type of the map's values
   * 
   * @see org.burstsys.gen.thrift.api.client.BTDataType
   */
  public BTParameter setSecondaryType(@org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.BTDataType secondaryType) {
    this.secondaryType = secondaryType;
    return this;
  }

  public void unsetSecondaryType() {
    this.secondaryType = null;
  }

  /** Returns true if field secondaryType is set (has been assigned a value) and false otherwise */
  public boolean isSetSecondaryType() {
    return this.secondaryType != null;
  }

  public void setSecondaryTypeIsSet(boolean value) {
    if (!value) {
      this.secondaryType = null;
    }
  }

  /**
   * the acutal value of the parameter
   */
  @org.apache.thrift.annotation.Nullable
  public org.burstsys.gen.thrift.api.client.BTDatum getDatum() {
    return this.datum;
  }

  /**
   * the acutal value of the parameter
   */
  public BTParameter setDatum(@org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.BTDatum datum) {
    this.datum = datum;
    return this;
  }

  public void unsetDatum() {
    this.datum = null;
  }

  /** Returns true if field datum is set (has been assigned a value) and false otherwise */
  public boolean isSetDatum() {
    return this.datum != null;
  }

  public void setDatumIsSet(boolean value) {
    if (!value) {
      this.datum = null;
    }
  }

  /**
   * if data is a null value
   */
  public boolean isIsNull() {
    return this.isNull;
  }

  /**
   * if data is a null value
   */
  public BTParameter setIsNull(boolean isNull) {
    this.isNull = isNull;
    setIsNullIsSet(true);
    return this;
  }

  public void unsetIsNull() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISNULL_ISSET_ID);
  }

  /** Returns true if field isNull is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNull() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISNULL_ISSET_ID);
  }

  public void setIsNullIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISNULL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case FORMAT:
      if (value == null) {
        unsetFormat();
      } else {
        setFormat((org.burstsys.gen.thrift.api.client.BTDataFormat)value);
      }
      break;

    case PRIMARY_TYPE:
      if (value == null) {
        unsetPrimaryType();
      } else {
        setPrimaryType((org.burstsys.gen.thrift.api.client.BTDataType)value);
      }
      break;

    case SECONDARY_TYPE:
      if (value == null) {
        unsetSecondaryType();
      } else {
        setSecondaryType((org.burstsys.gen.thrift.api.client.BTDataType)value);
      }
      break;

    case DATUM:
      if (value == null) {
        unsetDatum();
      } else {
        setDatum((org.burstsys.gen.thrift.api.client.BTDatum)value);
      }
      break;

    case IS_NULL:
      if (value == null) {
        unsetIsNull();
      } else {
        setIsNull((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case FORMAT:
      return getFormat();

    case PRIMARY_TYPE:
      return getPrimaryType();

    case SECONDARY_TYPE:
      return getSecondaryType();

    case DATUM:
      return getDatum();

    case IS_NULL:
      return isIsNull();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case FORMAT:
      return isSetFormat();
    case PRIMARY_TYPE:
      return isSetPrimaryType();
    case SECONDARY_TYPE:
      return isSetSecondaryType();
    case DATUM:
      return isSetDatum();
    case IS_NULL:
      return isSetIsNull();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BTParameter)
      return this.equals((BTParameter)that);
    return false;
  }

  public boolean equals(BTParameter that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_format = true && this.isSetFormat();
    boolean that_present_format = true && that.isSetFormat();
    if (this_present_format || that_present_format) {
      if (!(this_present_format && that_present_format))
        return false;
      if (!this.format.equals(that.format))
        return false;
    }

    boolean this_present_primaryType = true && this.isSetPrimaryType();
    boolean that_present_primaryType = true && that.isSetPrimaryType();
    if (this_present_primaryType || that_present_primaryType) {
      if (!(this_present_primaryType && that_present_primaryType))
        return false;
      if (!this.primaryType.equals(that.primaryType))
        return false;
    }

    boolean this_present_secondaryType = true && this.isSetSecondaryType();
    boolean that_present_secondaryType = true && that.isSetSecondaryType();
    if (this_present_secondaryType || that_present_secondaryType) {
      if (!(this_present_secondaryType && that_present_secondaryType))
        return false;
      if (!this.secondaryType.equals(that.secondaryType))
        return false;
    }

    boolean this_present_datum = true && this.isSetDatum();
    boolean that_present_datum = true && that.isSetDatum();
    if (this_present_datum || that_present_datum) {
      if (!(this_present_datum && that_present_datum))
        return false;
      if (!this.datum.equals(that.datum))
        return false;
    }

    boolean this_present_isNull = true;
    boolean that_present_isNull = true;
    if (this_present_isNull || that_present_isNull) {
      if (!(this_present_isNull && that_present_isNull))
        return false;
      if (this.isNull != that.isNull)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetFormat()) ? 131071 : 524287);
    if (isSetFormat())
      hashCode = hashCode * 8191 + format.getValue();

    hashCode = hashCode * 8191 + ((isSetPrimaryType()) ? 131071 : 524287);
    if (isSetPrimaryType())
      hashCode = hashCode * 8191 + primaryType.getValue();

    hashCode = hashCode * 8191 + ((isSetSecondaryType()) ? 131071 : 524287);
    if (isSetSecondaryType())
      hashCode = hashCode * 8191 + secondaryType.getValue();

    hashCode = hashCode * 8191 + ((isSetDatum()) ? 131071 : 524287);
    if (isSetDatum())
      hashCode = hashCode * 8191 + datum.hashCode();

    hashCode = hashCode * 8191 + ((isNull) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(BTParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFormat()).compareTo(other.isSetFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format, other.format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrimaryType()).compareTo(other.isSetPrimaryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrimaryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primaryType, other.primaryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSecondaryType()).compareTo(other.isSetSecondaryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecondaryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondaryType, other.secondaryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDatum()).compareTo(other.isSetDatum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datum, other.datum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsNull()).compareTo(other.isSetIsNull());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNull()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNull, other.isNull);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BTParameter(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("format:");
    if (this.format == null) {
      sb.append("null");
    } else {
      sb.append(this.format);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("primaryType:");
    if (this.primaryType == null) {
      sb.append("null");
    } else {
      sb.append(this.primaryType);
    }
    first = false;
    if (isSetSecondaryType()) {
      if (!first) sb.append(", ");
      sb.append("secondaryType:");
      if (this.secondaryType == null) {
        sb.append("null");
      } else {
        sb.append(this.secondaryType);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("datum:");
    if (this.datum == null) {
      sb.append("null");
    } else {
      sb.append(this.datum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNull:");
    sb.append(this.isNull);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (format == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'format' was not present! Struct: " + toString());
    }
    if (primaryType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'primaryType' was not present! Struct: " + toString());
    }
    if (datum == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'datum' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'isNull' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BTParameterStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTParameterStandardScheme getScheme() {
      return new BTParameterStandardScheme();
    }
  }

  private static class BTParameterStandardScheme extends org.apache.thrift.scheme.StandardScheme<BTParameter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BTParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.format = org.burstsys.gen.thrift.api.client.BTDataFormat.findByValue(iprot.readI32());
              struct.setFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRIMARY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.primaryType = org.burstsys.gen.thrift.api.client.BTDataType.findByValue(iprot.readI32());
              struct.setPrimaryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SECONDARY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.secondaryType = org.burstsys.gen.thrift.api.client.BTDataType.findByValue(iprot.readI32());
              struct.setSecondaryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.datum = new org.burstsys.gen.thrift.api.client.BTDatum();
              struct.datum.read(iprot);
              struct.setDatumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_NULL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isNull = iprot.readBool();
              struct.setIsNullIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIsNull()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isNull' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BTParameter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.format != null) {
        oprot.writeFieldBegin(FORMAT_FIELD_DESC);
        oprot.writeI32(struct.format.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.primaryType != null) {
        oprot.writeFieldBegin(PRIMARY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.primaryType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.secondaryType != null) {
        if (struct.isSetSecondaryType()) {
          oprot.writeFieldBegin(SECONDARY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.secondaryType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.datum != null) {
        oprot.writeFieldBegin(DATUM_FIELD_DESC);
        struct.datum.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_NULL_FIELD_DESC);
      oprot.writeBool(struct.isNull);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BTParameterTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTParameterTupleScheme getScheme() {
      return new BTParameterTupleScheme();
    }
  }

  private static class BTParameterTupleScheme extends org.apache.thrift.scheme.TupleScheme<BTParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BTParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeI32(struct.format.getValue());
      oprot.writeI32(struct.primaryType.getValue());
      struct.datum.write(oprot);
      oprot.writeBool(struct.isNull);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSecondaryType()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetSecondaryType()) {
        oprot.writeI32(struct.secondaryType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BTParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.format = org.burstsys.gen.thrift.api.client.BTDataFormat.findByValue(iprot.readI32());
      struct.setFormatIsSet(true);
      struct.primaryType = org.burstsys.gen.thrift.api.client.BTDataType.findByValue(iprot.readI32());
      struct.setPrimaryTypeIsSet(true);
      struct.datum = new org.burstsys.gen.thrift.api.client.BTDatum();
      struct.datum.read(iprot);
      struct.setDatumIsSet(true);
      struct.isNull = iprot.readBool();
      struct.setIsNullIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.secondaryType = org.burstsys.gen.thrift.api.client.BTDataType.findByValue(iprot.readI32());
        struct.setSecondaryTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

