/* Copyright Yahoo, Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms. */
package org.burstsys.gen.thrift.api.client.view;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2022-03-10")
public class BTView implements org.apache.thrift.TBase<BTView, BTView._Fields>, java.io.Serializable, Cloneable, Comparable<BTView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BTView");

  private static final org.apache.thrift.protocol.TField PK_FIELD_DESC = new org.apache.thrift.protocol.TField("pk", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField UDK_FIELD_DESC = new org.apache.thrift.protocol.TField("udk", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MONIKER_FIELD_DESC = new org.apache.thrift.protocol.TField("moniker", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DOMAIN_UDK_FIELD_DESC = new org.apache.thrift.protocol.TField("domainUdk", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField GENERATION_CLOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("generationClock", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField STORE_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("storeProperties", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField VIEW_MOTIF_FIELD_DESC = new org.apache.thrift.protocol.TField("viewMotif", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField VIEW_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("viewProperties", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField LABELS_FIELD_DESC = new org.apache.thrift.protocol.TField("labels", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField SCHEMA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("schemaName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("modifyTimestamp", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField ACCESS_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("accessTimestamp", org.apache.thrift.protocol.TType.I64, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BTViewStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BTViewTupleSchemeFactory();

  /**
   * The PK is used internally, but should not be relied upon by clients
   */
  public long pk; // optional
  /**
   * The user defined key (UDK) is a unique key that should be used to create/fetch domains
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String udk; // required
  /**
   * The moniker is a user-friendly display string for this domain
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String moniker; // required
  /**
   * The UDK of the domain that this view belongs to
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String domainUdk; // required
  /**
   * The epoch timestamp when the view was last updated or loaded
   */
  public long generationClock; // optional
  /**
   * Store properties are used to pass additional information to the store during the ETL phase
   */
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> storeProperties; // required
  /**
   * The motif statement used to select data to load during ETL
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String viewMotif; // required
  /**
   * View properties are used to store additional information about the view
   */
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> viewProperties; // required
  /**
   * Labels allow users to classify domains, but aren't used internally by Burst
   */
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> labels; // required
  /**
   * The name of the schema used by the view
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String schemaName; // required
  /**
   * The epoch second when the view was created
   */
  public long createTimestamp; // optional
  /**
   * The epoch second when the view was updated
   */
  public long modifyTimestamp; // optional
  /**
   * The epoch second when the most recenty query was run against the view
   */
  public long accessTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The PK is used internally, but should not be relied upon by clients
     */
    PK((short)1, "pk"),
    /**
     * The user defined key (UDK) is a unique key that should be used to create/fetch domains
     */
    UDK((short)2, "udk"),
    /**
     * The moniker is a user-friendly display string for this domain
     */
    MONIKER((short)3, "moniker"),
    /**
     * The UDK of the domain that this view belongs to
     */
    DOMAIN_UDK((short)4, "domainUdk"),
    /**
     * The epoch timestamp when the view was last updated or loaded
     */
    GENERATION_CLOCK((short)5, "generationClock"),
    /**
     * Store properties are used to pass additional information to the store during the ETL phase
     */
    STORE_PROPERTIES((short)6, "storeProperties"),
    /**
     * The motif statement used to select data to load during ETL
     */
    VIEW_MOTIF((short)7, "viewMotif"),
    /**
     * View properties are used to store additional information about the view
     */
    VIEW_PROPERTIES((short)8, "viewProperties"),
    /**
     * Labels allow users to classify domains, but aren't used internally by Burst
     */
    LABELS((short)9, "labels"),
    /**
     * The name of the schema used by the view
     */
    SCHEMA_NAME((short)10, "schemaName"),
    /**
     * The epoch second when the view was created
     */
    CREATE_TIMESTAMP((short)11, "createTimestamp"),
    /**
     * The epoch second when the view was updated
     */
    MODIFY_TIMESTAMP((short)12, "modifyTimestamp"),
    /**
     * The epoch second when the most recenty query was run against the view
     */
    ACCESS_TIMESTAMP((short)13, "accessTimestamp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PK
          return PK;
        case 2: // UDK
          return UDK;
        case 3: // MONIKER
          return MONIKER;
        case 4: // DOMAIN_UDK
          return DOMAIN_UDK;
        case 5: // GENERATION_CLOCK
          return GENERATION_CLOCK;
        case 6: // STORE_PROPERTIES
          return STORE_PROPERTIES;
        case 7: // VIEW_MOTIF
          return VIEW_MOTIF;
        case 8: // VIEW_PROPERTIES
          return VIEW_PROPERTIES;
        case 9: // LABELS
          return LABELS;
        case 10: // SCHEMA_NAME
          return SCHEMA_NAME;
        case 11: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 12: // MODIFY_TIMESTAMP
          return MODIFY_TIMESTAMP;
        case 13: // ACCESS_TIMESTAMP
          return ACCESS_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PK_ISSET_ID = 0;
  private static final int __GENERATIONCLOCK_ISSET_ID = 1;
  private static final int __CREATETIMESTAMP_ISSET_ID = 2;
  private static final int __MODIFYTIMESTAMP_ISSET_ID = 3;
  private static final int __ACCESSTIMESTAMP_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PK,_Fields.GENERATION_CLOCK,_Fields.CREATE_TIMESTAMP,_Fields.MODIFY_TIMESTAMP,_Fields.ACCESS_TIMESTAMP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PK, new org.apache.thrift.meta_data.FieldMetaData("pk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UDK, new org.apache.thrift.meta_data.FieldMetaData("udk", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONIKER, new org.apache.thrift.meta_data.FieldMetaData("moniker", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOMAIN_UDK, new org.apache.thrift.meta_data.FieldMetaData("domainUdk", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENERATION_CLOCK, new org.apache.thrift.meta_data.FieldMetaData("generationClock", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STORE_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("storeProperties", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.VIEW_MOTIF, new org.apache.thrift.meta_data.FieldMetaData("viewMotif", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIEW_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("viewProperties", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LABELS, new org.apache.thrift.meta_data.FieldMetaData("labels", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SCHEMA_NAME, new org.apache.thrift.meta_data.FieldMetaData("schemaName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("modifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACCESS_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("accessTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BTView.class, metaDataMap);
  }

  public BTView() {
  }

  public BTView(
    java.lang.String udk,
    java.lang.String moniker,
    java.lang.String domainUdk,
    java.util.Map<java.lang.String,java.lang.String> storeProperties,
    java.lang.String viewMotif,
    java.util.Map<java.lang.String,java.lang.String> viewProperties,
    java.util.Map<java.lang.String,java.lang.String> labels,
    java.lang.String schemaName)
  {
    this();
    this.udk = udk;
    this.moniker = moniker;
    this.domainUdk = domainUdk;
    this.storeProperties = storeProperties;
    this.viewMotif = viewMotif;
    this.viewProperties = viewProperties;
    this.labels = labels;
    this.schemaName = schemaName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BTView(BTView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pk = other.pk;
    if (other.isSetUdk()) {
      this.udk = other.udk;
    }
    if (other.isSetMoniker()) {
      this.moniker = other.moniker;
    }
    if (other.isSetDomainUdk()) {
      this.domainUdk = other.domainUdk;
    }
    this.generationClock = other.generationClock;
    if (other.isSetStoreProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__storeProperties = new java.util.HashMap<java.lang.String,java.lang.String>(other.storeProperties);
      this.storeProperties = __this__storeProperties;
    }
    if (other.isSetViewMotif()) {
      this.viewMotif = other.viewMotif;
    }
    if (other.isSetViewProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__viewProperties = new java.util.HashMap<java.lang.String,java.lang.String>(other.viewProperties);
      this.viewProperties = __this__viewProperties;
    }
    if (other.isSetLabels()) {
      java.util.Map<java.lang.String,java.lang.String> __this__labels = new java.util.HashMap<java.lang.String,java.lang.String>(other.labels);
      this.labels = __this__labels;
    }
    if (other.isSetSchemaName()) {
      this.schemaName = other.schemaName;
    }
    this.createTimestamp = other.createTimestamp;
    this.modifyTimestamp = other.modifyTimestamp;
    this.accessTimestamp = other.accessTimestamp;
  }

  public BTView deepCopy() {
    return new BTView(this);
  }

  @Override
  public void clear() {
    setPkIsSet(false);
    this.pk = 0;
    this.udk = null;
    this.moniker = null;
    this.domainUdk = null;
    setGenerationClockIsSet(false);
    this.generationClock = 0;
    this.storeProperties = null;
    this.viewMotif = null;
    this.viewProperties = null;
    this.labels = null;
    this.schemaName = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setModifyTimestampIsSet(false);
    this.modifyTimestamp = 0;
    setAccessTimestampIsSet(false);
    this.accessTimestamp = 0;
  }

  /**
   * The PK is used internally, but should not be relied upon by clients
   */
  public long getPk() {
    return this.pk;
  }

  /**
   * The PK is used internally, but should not be relied upon by clients
   */
  public BTView setPk(long pk) {
    this.pk = pk;
    setPkIsSet(true);
    return this;
  }

  public void unsetPk() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PK_ISSET_ID);
  }

  /** Returns true if field pk is set (has been assigned a value) and false otherwise */
  public boolean isSetPk() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PK_ISSET_ID);
  }

  public void setPkIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PK_ISSET_ID, value);
  }

  /**
   * The user defined key (UDK) is a unique key that should be used to create/fetch domains
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUdk() {
    return this.udk;
  }

  /**
   * The user defined key (UDK) is a unique key that should be used to create/fetch domains
   */
  public BTView setUdk(@org.apache.thrift.annotation.Nullable java.lang.String udk) {
    this.udk = udk;
    return this;
  }

  public void unsetUdk() {
    this.udk = null;
  }

  /** Returns true if field udk is set (has been assigned a value) and false otherwise */
  public boolean isSetUdk() {
    return this.udk != null;
  }

  public void setUdkIsSet(boolean value) {
    if (!value) {
      this.udk = null;
    }
  }

  /**
   * The moniker is a user-friendly display string for this domain
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMoniker() {
    return this.moniker;
  }

  /**
   * The moniker is a user-friendly display string for this domain
   */
  public BTView setMoniker(@org.apache.thrift.annotation.Nullable java.lang.String moniker) {
    this.moniker = moniker;
    return this;
  }

  public void unsetMoniker() {
    this.moniker = null;
  }

  /** Returns true if field moniker is set (has been assigned a value) and false otherwise */
  public boolean isSetMoniker() {
    return this.moniker != null;
  }

  public void setMonikerIsSet(boolean value) {
    if (!value) {
      this.moniker = null;
    }
  }

  /**
   * The UDK of the domain that this view belongs to
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDomainUdk() {
    return this.domainUdk;
  }

  /**
   * The UDK of the domain that this view belongs to
   */
  public BTView setDomainUdk(@org.apache.thrift.annotation.Nullable java.lang.String domainUdk) {
    this.domainUdk = domainUdk;
    return this;
  }

  public void unsetDomainUdk() {
    this.domainUdk = null;
  }

  /** Returns true if field domainUdk is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainUdk() {
    return this.domainUdk != null;
  }

  public void setDomainUdkIsSet(boolean value) {
    if (!value) {
      this.domainUdk = null;
    }
  }

  /**
   * The epoch timestamp when the view was last updated or loaded
   */
  public long getGenerationClock() {
    return this.generationClock;
  }

  /**
   * The epoch timestamp when the view was last updated or loaded
   */
  public BTView setGenerationClock(long generationClock) {
    this.generationClock = generationClock;
    setGenerationClockIsSet(true);
    return this;
  }

  public void unsetGenerationClock() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GENERATIONCLOCK_ISSET_ID);
  }

  /** Returns true if field generationClock is set (has been assigned a value) and false otherwise */
  public boolean isSetGenerationClock() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GENERATIONCLOCK_ISSET_ID);
  }

  public void setGenerationClockIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GENERATIONCLOCK_ISSET_ID, value);
  }

  public int getStorePropertiesSize() {
    return (this.storeProperties == null) ? 0 : this.storeProperties.size();
  }

  public void putToStoreProperties(java.lang.String key, java.lang.String val) {
    if (this.storeProperties == null) {
      this.storeProperties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.storeProperties.put(key, val);
  }

  /**
   * Store properties are used to pass additional information to the store during the ETL phase
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getStoreProperties() {
    return this.storeProperties;
  }

  /**
   * Store properties are used to pass additional information to the store during the ETL phase
   */
  public BTView setStoreProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> storeProperties) {
    this.storeProperties = storeProperties;
    return this;
  }

  public void unsetStoreProperties() {
    this.storeProperties = null;
  }

  /** Returns true if field storeProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreProperties() {
    return this.storeProperties != null;
  }

  public void setStorePropertiesIsSet(boolean value) {
    if (!value) {
      this.storeProperties = null;
    }
  }

  /**
   * The motif statement used to select data to load during ETL
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getViewMotif() {
    return this.viewMotif;
  }

  /**
   * The motif statement used to select data to load during ETL
   */
  public BTView setViewMotif(@org.apache.thrift.annotation.Nullable java.lang.String viewMotif) {
    this.viewMotif = viewMotif;
    return this;
  }

  public void unsetViewMotif() {
    this.viewMotif = null;
  }

  /** Returns true if field viewMotif is set (has been assigned a value) and false otherwise */
  public boolean isSetViewMotif() {
    return this.viewMotif != null;
  }

  public void setViewMotifIsSet(boolean value) {
    if (!value) {
      this.viewMotif = null;
    }
  }

  public int getViewPropertiesSize() {
    return (this.viewProperties == null) ? 0 : this.viewProperties.size();
  }

  public void putToViewProperties(java.lang.String key, java.lang.String val) {
    if (this.viewProperties == null) {
      this.viewProperties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.viewProperties.put(key, val);
  }

  /**
   * View properties are used to store additional information about the view
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getViewProperties() {
    return this.viewProperties;
  }

  /**
   * View properties are used to store additional information about the view
   */
  public BTView setViewProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> viewProperties) {
    this.viewProperties = viewProperties;
    return this;
  }

  public void unsetViewProperties() {
    this.viewProperties = null;
  }

  /** Returns true if field viewProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetViewProperties() {
    return this.viewProperties != null;
  }

  public void setViewPropertiesIsSet(boolean value) {
    if (!value) {
      this.viewProperties = null;
    }
  }

  public int getLabelsSize() {
    return (this.labels == null) ? 0 : this.labels.size();
  }

  public void putToLabels(java.lang.String key, java.lang.String val) {
    if (this.labels == null) {
      this.labels = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.labels.put(key, val);
  }

  /**
   * Labels allow users to classify domains, but aren't used internally by Burst
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getLabels() {
    return this.labels;
  }

  /**
   * Labels allow users to classify domains, but aren't used internally by Burst
   */
  public BTView setLabels(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  public void unsetLabels() {
    this.labels = null;
  }

  /** Returns true if field labels is set (has been assigned a value) and false otherwise */
  public boolean isSetLabels() {
    return this.labels != null;
  }

  public void setLabelsIsSet(boolean value) {
    if (!value) {
      this.labels = null;
    }
  }

  /**
   * The name of the schema used by the view
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSchemaName() {
    return this.schemaName;
  }

  /**
   * The name of the schema used by the view
   */
  public BTView setSchemaName(@org.apache.thrift.annotation.Nullable java.lang.String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

  public void unsetSchemaName() {
    this.schemaName = null;
  }

  /** Returns true if field schemaName is set (has been assigned a value) and false otherwise */
  public boolean isSetSchemaName() {
    return this.schemaName != null;
  }

  public void setSchemaNameIsSet(boolean value) {
    if (!value) {
      this.schemaName = null;
    }
  }

  /**
   * The epoch second when the view was created
   */
  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  /**
   * The epoch second when the view was created
   */
  public BTView setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  /**
   * The epoch second when the view was updated
   */
  public long getModifyTimestamp() {
    return this.modifyTimestamp;
  }

  /**
   * The epoch second when the view was updated
   */
  public BTView setModifyTimestamp(long modifyTimestamp) {
    this.modifyTimestamp = modifyTimestamp;
    setModifyTimestampIsSet(true);
    return this;
  }

  public void unsetModifyTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field modifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetModifyTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODIFYTIMESTAMP_ISSET_ID);
  }

  public void setModifyTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODIFYTIMESTAMP_ISSET_ID, value);
  }

  /**
   * The epoch second when the most recenty query was run against the view
   */
  public long getAccessTimestamp() {
    return this.accessTimestamp;
  }

  /**
   * The epoch second when the most recenty query was run against the view
   */
  public BTView setAccessTimestamp(long accessTimestamp) {
    this.accessTimestamp = accessTimestamp;
    setAccessTimestampIsSet(true);
    return this;
  }

  public void unsetAccessTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCESSTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field accessTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCESSTIMESTAMP_ISSET_ID);
  }

  public void setAccessTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCESSTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PK:
      if (value == null) {
        unsetPk();
      } else {
        setPk((java.lang.Long)value);
      }
      break;

    case UDK:
      if (value == null) {
        unsetUdk();
      } else {
        setUdk((java.lang.String)value);
      }
      break;

    case MONIKER:
      if (value == null) {
        unsetMoniker();
      } else {
        setMoniker((java.lang.String)value);
      }
      break;

    case DOMAIN_UDK:
      if (value == null) {
        unsetDomainUdk();
      } else {
        setDomainUdk((java.lang.String)value);
      }
      break;

    case GENERATION_CLOCK:
      if (value == null) {
        unsetGenerationClock();
      } else {
        setGenerationClock((java.lang.Long)value);
      }
      break;

    case STORE_PROPERTIES:
      if (value == null) {
        unsetStoreProperties();
      } else {
        setStoreProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case VIEW_MOTIF:
      if (value == null) {
        unsetViewMotif();
      } else {
        setViewMotif((java.lang.String)value);
      }
      break;

    case VIEW_PROPERTIES:
      if (value == null) {
        unsetViewProperties();
      } else {
        setViewProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case LABELS:
      if (value == null) {
        unsetLabels();
      } else {
        setLabels((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case SCHEMA_NAME:
      if (value == null) {
        unsetSchemaName();
      } else {
        setSchemaName((java.lang.String)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((java.lang.Long)value);
      }
      break;

    case MODIFY_TIMESTAMP:
      if (value == null) {
        unsetModifyTimestamp();
      } else {
        setModifyTimestamp((java.lang.Long)value);
      }
      break;

    case ACCESS_TIMESTAMP:
      if (value == null) {
        unsetAccessTimestamp();
      } else {
        setAccessTimestamp((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PK:
      return getPk();

    case UDK:
      return getUdk();

    case MONIKER:
      return getMoniker();

    case DOMAIN_UDK:
      return getDomainUdk();

    case GENERATION_CLOCK:
      return getGenerationClock();

    case STORE_PROPERTIES:
      return getStoreProperties();

    case VIEW_MOTIF:
      return getViewMotif();

    case VIEW_PROPERTIES:
      return getViewProperties();

    case LABELS:
      return getLabels();

    case SCHEMA_NAME:
      return getSchemaName();

    case CREATE_TIMESTAMP:
      return getCreateTimestamp();

    case MODIFY_TIMESTAMP:
      return getModifyTimestamp();

    case ACCESS_TIMESTAMP:
      return getAccessTimestamp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PK:
      return isSetPk();
    case UDK:
      return isSetUdk();
    case MONIKER:
      return isSetMoniker();
    case DOMAIN_UDK:
      return isSetDomainUdk();
    case GENERATION_CLOCK:
      return isSetGenerationClock();
    case STORE_PROPERTIES:
      return isSetStoreProperties();
    case VIEW_MOTIF:
      return isSetViewMotif();
    case VIEW_PROPERTIES:
      return isSetViewProperties();
    case LABELS:
      return isSetLabels();
    case SCHEMA_NAME:
      return isSetSchemaName();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case MODIFY_TIMESTAMP:
      return isSetModifyTimestamp();
    case ACCESS_TIMESTAMP:
      return isSetAccessTimestamp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BTView)
      return this.equals((BTView)that);
    return false;
  }

  public boolean equals(BTView that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_pk = true && this.isSetPk();
    boolean that_present_pk = true && that.isSetPk();
    if (this_present_pk || that_present_pk) {
      if (!(this_present_pk && that_present_pk))
        return false;
      if (this.pk != that.pk)
        return false;
    }

    boolean this_present_udk = true && this.isSetUdk();
    boolean that_present_udk = true && that.isSetUdk();
    if (this_present_udk || that_present_udk) {
      if (!(this_present_udk && that_present_udk))
        return false;
      if (!this.udk.equals(that.udk))
        return false;
    }

    boolean this_present_moniker = true && this.isSetMoniker();
    boolean that_present_moniker = true && that.isSetMoniker();
    if (this_present_moniker || that_present_moniker) {
      if (!(this_present_moniker && that_present_moniker))
        return false;
      if (!this.moniker.equals(that.moniker))
        return false;
    }

    boolean this_present_domainUdk = true && this.isSetDomainUdk();
    boolean that_present_domainUdk = true && that.isSetDomainUdk();
    if (this_present_domainUdk || that_present_domainUdk) {
      if (!(this_present_domainUdk && that_present_domainUdk))
        return false;
      if (!this.domainUdk.equals(that.domainUdk))
        return false;
    }

    boolean this_present_generationClock = true && this.isSetGenerationClock();
    boolean that_present_generationClock = true && that.isSetGenerationClock();
    if (this_present_generationClock || that_present_generationClock) {
      if (!(this_present_generationClock && that_present_generationClock))
        return false;
      if (this.generationClock != that.generationClock)
        return false;
    }

    boolean this_present_storeProperties = true && this.isSetStoreProperties();
    boolean that_present_storeProperties = true && that.isSetStoreProperties();
    if (this_present_storeProperties || that_present_storeProperties) {
      if (!(this_present_storeProperties && that_present_storeProperties))
        return false;
      if (!this.storeProperties.equals(that.storeProperties))
        return false;
    }

    boolean this_present_viewMotif = true && this.isSetViewMotif();
    boolean that_present_viewMotif = true && that.isSetViewMotif();
    if (this_present_viewMotif || that_present_viewMotif) {
      if (!(this_present_viewMotif && that_present_viewMotif))
        return false;
      if (!this.viewMotif.equals(that.viewMotif))
        return false;
    }

    boolean this_present_viewProperties = true && this.isSetViewProperties();
    boolean that_present_viewProperties = true && that.isSetViewProperties();
    if (this_present_viewProperties || that_present_viewProperties) {
      if (!(this_present_viewProperties && that_present_viewProperties))
        return false;
      if (!this.viewProperties.equals(that.viewProperties))
        return false;
    }

    boolean this_present_labels = true && this.isSetLabels();
    boolean that_present_labels = true && that.isSetLabels();
    if (this_present_labels || that_present_labels) {
      if (!(this_present_labels && that_present_labels))
        return false;
      if (!this.labels.equals(that.labels))
        return false;
    }

    boolean this_present_schemaName = true && this.isSetSchemaName();
    boolean that_present_schemaName = true && that.isSetSchemaName();
    if (this_present_schemaName || that_present_schemaName) {
      if (!(this_present_schemaName && that_present_schemaName))
        return false;
      if (!this.schemaName.equals(that.schemaName))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_modifyTimestamp = true && this.isSetModifyTimestamp();
    boolean that_present_modifyTimestamp = true && that.isSetModifyTimestamp();
    if (this_present_modifyTimestamp || that_present_modifyTimestamp) {
      if (!(this_present_modifyTimestamp && that_present_modifyTimestamp))
        return false;
      if (this.modifyTimestamp != that.modifyTimestamp)
        return false;
    }

    boolean this_present_accessTimestamp = true && this.isSetAccessTimestamp();
    boolean that_present_accessTimestamp = true && that.isSetAccessTimestamp();
    if (this_present_accessTimestamp || that_present_accessTimestamp) {
      if (!(this_present_accessTimestamp && that_present_accessTimestamp))
        return false;
      if (this.accessTimestamp != that.accessTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPk()) ? 131071 : 524287);
    if (isSetPk())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(pk);

    hashCode = hashCode * 8191 + ((isSetUdk()) ? 131071 : 524287);
    if (isSetUdk())
      hashCode = hashCode * 8191 + udk.hashCode();

    hashCode = hashCode * 8191 + ((isSetMoniker()) ? 131071 : 524287);
    if (isSetMoniker())
      hashCode = hashCode * 8191 + moniker.hashCode();

    hashCode = hashCode * 8191 + ((isSetDomainUdk()) ? 131071 : 524287);
    if (isSetDomainUdk())
      hashCode = hashCode * 8191 + domainUdk.hashCode();

    hashCode = hashCode * 8191 + ((isSetGenerationClock()) ? 131071 : 524287);
    if (isSetGenerationClock())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(generationClock);

    hashCode = hashCode * 8191 + ((isSetStoreProperties()) ? 131071 : 524287);
    if (isSetStoreProperties())
      hashCode = hashCode * 8191 + storeProperties.hashCode();

    hashCode = hashCode * 8191 + ((isSetViewMotif()) ? 131071 : 524287);
    if (isSetViewMotif())
      hashCode = hashCode * 8191 + viewMotif.hashCode();

    hashCode = hashCode * 8191 + ((isSetViewProperties()) ? 131071 : 524287);
    if (isSetViewProperties())
      hashCode = hashCode * 8191 + viewProperties.hashCode();

    hashCode = hashCode * 8191 + ((isSetLabels()) ? 131071 : 524287);
    if (isSetLabels())
      hashCode = hashCode * 8191 + labels.hashCode();

    hashCode = hashCode * 8191 + ((isSetSchemaName()) ? 131071 : 524287);
    if (isSetSchemaName())
      hashCode = hashCode * 8191 + schemaName.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreateTimestamp()) ? 131071 : 524287);
    if (isSetCreateTimestamp())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTimestamp);

    hashCode = hashCode * 8191 + ((isSetModifyTimestamp()) ? 131071 : 524287);
    if (isSetModifyTimestamp())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(modifyTimestamp);

    hashCode = hashCode * 8191 + ((isSetAccessTimestamp()) ? 131071 : 524287);
    if (isSetAccessTimestamp())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(accessTimestamp);

    return hashCode;
  }

  @Override
  public int compareTo(BTView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPk()).compareTo(other.isSetPk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pk, other.pk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUdk()).compareTo(other.isSetUdk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUdk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.udk, other.udk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMoniker()).compareTo(other.isSetMoniker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoniker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moniker, other.moniker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDomainUdk()).compareTo(other.isSetDomainUdk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainUdk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainUdk, other.domainUdk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGenerationClock()).compareTo(other.isSetGenerationClock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenerationClock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generationClock, other.generationClock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStoreProperties()).compareTo(other.isSetStoreProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeProperties, other.storeProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetViewMotif()).compareTo(other.isSetViewMotif());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewMotif()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewMotif, other.viewMotif);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetViewProperties()).compareTo(other.isSetViewProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewProperties, other.viewProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLabels()).compareTo(other.isSetLabels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.labels, other.labels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSchemaName()).compareTo(other.isSetSchemaName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchemaName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemaName, other.schemaName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModifyTimestamp()).compareTo(other.isSetModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifyTimestamp, other.modifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccessTimestamp()).compareTo(other.isSetAccessTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessTimestamp, other.accessTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BTView(");
    boolean first = true;

    if (isSetPk()) {
      sb.append("pk:");
      sb.append(this.pk);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("udk:");
    if (this.udk == null) {
      sb.append("null");
    } else {
      sb.append(this.udk);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("moniker:");
    if (this.moniker == null) {
      sb.append("null");
    } else {
      sb.append(this.moniker);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("domainUdk:");
    if (this.domainUdk == null) {
      sb.append("null");
    } else {
      sb.append(this.domainUdk);
    }
    first = false;
    if (isSetGenerationClock()) {
      if (!first) sb.append(", ");
      sb.append("generationClock:");
      sb.append(this.generationClock);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("storeProperties:");
    if (this.storeProperties == null) {
      sb.append("null");
    } else {
      sb.append(this.storeProperties);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewMotif:");
    if (this.viewMotif == null) {
      sb.append("null");
    } else {
      sb.append(this.viewMotif);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewProperties:");
    if (this.viewProperties == null) {
      sb.append("null");
    } else {
      sb.append(this.viewProperties);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("labels:");
    if (this.labels == null) {
      sb.append("null");
    } else {
      sb.append(this.labels);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("schemaName:");
    if (this.schemaName == null) {
      sb.append("null");
    } else {
      sb.append(this.schemaName);
    }
    first = false;
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("modifyTimestamp:");
      sb.append(this.modifyTimestamp);
      first = false;
    }
    if (isSetAccessTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("accessTimestamp:");
      sb.append(this.accessTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (udk == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'udk' was not present! Struct: " + toString());
    }
    if (moniker == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'moniker' was not present! Struct: " + toString());
    }
    if (domainUdk == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'domainUdk' was not present! Struct: " + toString());
    }
    if (storeProperties == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'storeProperties' was not present! Struct: " + toString());
    }
    if (viewMotif == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'viewMotif' was not present! Struct: " + toString());
    }
    if (viewProperties == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'viewProperties' was not present! Struct: " + toString());
    }
    if (labels == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'labels' was not present! Struct: " + toString());
    }
    if (schemaName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'schemaName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BTViewStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTViewStandardScheme getScheme() {
      return new BTViewStandardScheme();
    }
  }

  private static class BTViewStandardScheme extends org.apache.thrift.scheme.StandardScheme<BTView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BTView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pk = iprot.readI64();
              struct.setPkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UDK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.udk = iprot.readString();
              struct.setUdkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MONIKER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moniker = iprot.readString();
              struct.setMonikerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOMAIN_UDK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.domainUdk = iprot.readString();
              struct.setDomainUdkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GENERATION_CLOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.generationClock = iprot.readI64();
              struct.setGenerationClockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STORE_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.storeProperties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                @org.apache.thrift.annotation.Nullable java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.storeProperties.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setStorePropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VIEW_MOTIF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.viewMotif = iprot.readString();
              struct.setViewMotifIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VIEW_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.viewProperties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map4.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key5;
                @org.apache.thrift.annotation.Nullable java.lang.String _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readString();
                  _val6 = iprot.readString();
                  struct.viewProperties.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setViewPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LABELS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.labels = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map8.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key9;
                @org.apache.thrift.annotation.Nullable java.lang.String _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readString();
                  _val10 = iprot.readString();
                  struct.labels.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setLabelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SCHEMA_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.schemaName = iprot.readString();
              struct.setSchemaNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.modifyTimestamp = iprot.readI64();
              struct.setModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ACCESS_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.accessTimestamp = iprot.readI64();
              struct.setAccessTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BTView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPk()) {
        oprot.writeFieldBegin(PK_FIELD_DESC);
        oprot.writeI64(struct.pk);
        oprot.writeFieldEnd();
      }
      if (struct.udk != null) {
        oprot.writeFieldBegin(UDK_FIELD_DESC);
        oprot.writeString(struct.udk);
        oprot.writeFieldEnd();
      }
      if (struct.moniker != null) {
        oprot.writeFieldBegin(MONIKER_FIELD_DESC);
        oprot.writeString(struct.moniker);
        oprot.writeFieldEnd();
      }
      if (struct.domainUdk != null) {
        oprot.writeFieldBegin(DOMAIN_UDK_FIELD_DESC);
        oprot.writeString(struct.domainUdk);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGenerationClock()) {
        oprot.writeFieldBegin(GENERATION_CLOCK_FIELD_DESC);
        oprot.writeI64(struct.generationClock);
        oprot.writeFieldEnd();
      }
      if (struct.storeProperties != null) {
        oprot.writeFieldBegin(STORE_PROPERTIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.storeProperties.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter12 : struct.storeProperties.entrySet())
          {
            oprot.writeString(_iter12.getKey());
            oprot.writeString(_iter12.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.viewMotif != null) {
        oprot.writeFieldBegin(VIEW_MOTIF_FIELD_DESC);
        oprot.writeString(struct.viewMotif);
        oprot.writeFieldEnd();
      }
      if (struct.viewProperties != null) {
        oprot.writeFieldBegin(VIEW_PROPERTIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.viewProperties.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter13 : struct.viewProperties.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            oprot.writeString(_iter13.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.labels != null) {
        oprot.writeFieldBegin(LABELS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.labels.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter14 : struct.labels.entrySet())
          {
            oprot.writeString(_iter14.getKey());
            oprot.writeString(_iter14.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.schemaName != null) {
        oprot.writeFieldBegin(SCHEMA_NAME_FIELD_DESC);
        oprot.writeString(struct.schemaName);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetModifyTimestamp()) {
        oprot.writeFieldBegin(MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.modifyTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAccessTimestamp()) {
        oprot.writeFieldBegin(ACCESS_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.accessTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BTViewTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTViewTupleScheme getScheme() {
      return new BTViewTupleScheme();
    }
  }

  private static class BTViewTupleScheme extends org.apache.thrift.scheme.TupleScheme<BTView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BTView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.udk);
      oprot.writeString(struct.moniker);
      oprot.writeString(struct.domainUdk);
      {
        oprot.writeI32(struct.storeProperties.size());
        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter15 : struct.storeProperties.entrySet())
        {
          oprot.writeString(_iter15.getKey());
          oprot.writeString(_iter15.getValue());
        }
      }
      oprot.writeString(struct.viewMotif);
      {
        oprot.writeI32(struct.viewProperties.size());
        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter16 : struct.viewProperties.entrySet())
        {
          oprot.writeString(_iter16.getKey());
          oprot.writeString(_iter16.getValue());
        }
      }
      {
        oprot.writeI32(struct.labels.size());
        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter17 : struct.labels.entrySet())
        {
          oprot.writeString(_iter17.getKey());
          oprot.writeString(_iter17.getValue());
        }
      }
      oprot.writeString(struct.schemaName);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPk()) {
        optionals.set(0);
      }
      if (struct.isSetGenerationClock()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetModifyTimestamp()) {
        optionals.set(3);
      }
      if (struct.isSetAccessTimestamp()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPk()) {
        oprot.writeI64(struct.pk);
      }
      if (struct.isSetGenerationClock()) {
        oprot.writeI64(struct.generationClock);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetModifyTimestamp()) {
        oprot.writeI64(struct.modifyTimestamp);
      }
      if (struct.isSetAccessTimestamp()) {
        oprot.writeI64(struct.accessTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BTView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.udk = iprot.readString();
      struct.setUdkIsSet(true);
      struct.moniker = iprot.readString();
      struct.setMonikerIsSet(true);
      struct.domainUdk = iprot.readString();
      struct.setDomainUdkIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map18 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.storeProperties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map18.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _key19;
        @org.apache.thrift.annotation.Nullable java.lang.String _val20;
        for (int _i21 = 0; _i21 < _map18.size; ++_i21)
        {
          _key19 = iprot.readString();
          _val20 = iprot.readString();
          struct.storeProperties.put(_key19, _val20);
        }
      }
      struct.setStorePropertiesIsSet(true);
      struct.viewMotif = iprot.readString();
      struct.setViewMotifIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.viewProperties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map22.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _key23;
        @org.apache.thrift.annotation.Nullable java.lang.String _val24;
        for (int _i25 = 0; _i25 < _map22.size; ++_i25)
        {
          _key23 = iprot.readString();
          _val24 = iprot.readString();
          struct.viewProperties.put(_key23, _val24);
        }
      }
      struct.setViewPropertiesIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.labels = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map26.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _key27;
        @org.apache.thrift.annotation.Nullable java.lang.String _val28;
        for (int _i29 = 0; _i29 < _map26.size; ++_i29)
        {
          _key27 = iprot.readString();
          _val28 = iprot.readString();
          struct.labels.put(_key27, _val28);
        }
      }
      struct.setLabelsIsSet(true);
      struct.schemaName = iprot.readString();
      struct.setSchemaNameIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.pk = iprot.readI64();
        struct.setPkIsSet(true);
      }
      if (incoming.get(1)) {
        struct.generationClock = iprot.readI64();
        struct.setGenerationClockIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.modifyTimestamp = iprot.readI64();
        struct.setModifyTimestampIsSet(true);
      }
      if (incoming.get(4)) {
        struct.accessTimestamp = iprot.readI64();
        struct.setAccessTimestampIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

