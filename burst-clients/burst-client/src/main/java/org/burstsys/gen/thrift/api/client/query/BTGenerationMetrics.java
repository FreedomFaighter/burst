/* Copyright Yahoo, Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms. */
package org.burstsys.gen.thrift.api.client.query;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Statistics about the loaded dataset
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2022-03-10")
public class BTGenerationMetrics implements org.apache.thrift.TBase<BTGenerationMetrics, BTGenerationMetrics._Fields>, java.io.Serializable, Cloneable, Comparable<BTGenerationMetrics> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BTGenerationMetrics");

  private static final org.apache.thrift.protocol.TField BYTE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("byteCount", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("itemCount", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SLICE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("sliceCount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField REGION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCount", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField COLD_LOAD_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("coldLoadAt", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField COLD_LOAD_TOOK_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("coldLoadTookMs", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField WARM_LOAD_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("warmLoadAt", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField WARM_LOAD_TOOK_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("warmLoadTookMs", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField WARM_LOAD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("warmLoadCount", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField SIZE_SKEW_FIELD_DESC = new org.apache.thrift.protocol.TField("sizeSkew", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField TIME_SKEW_FIELD_DESC = new org.apache.thrift.protocol.TField("timeSkew", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField ITEM_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemSize", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField ITEM_VARIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("itemVariation", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField LOAD_INVALID_FIELD_DESC = new org.apache.thrift.protocol.TField("loadInvalid", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField EARLIEST_LOAD_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("earliestLoadAt", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField REJECTED_ITEM_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("rejectedItemCount", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField POTENTIAL_ITEM_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("potentialItemCount", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField SUGGESTED_SAMPLE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("suggestedSampleRate", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField SUGGESTED_SLICE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("suggestedSliceCount", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField EXPECTED_ITEM_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("expectedItemCount", org.apache.thrift.protocol.TType.I64, (short)20);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BTGenerationMetricsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BTGenerationMetricsTupleSchemeFactory();

  /**
   * The number of bytes scanned
   */
  public long byteCount; // required
  /**
   * The number of items scanned
   */
  public long itemCount; // required
  /**
   * The number of slices scanned
   */
  public long sliceCount; // required
  /**
   * The number of regions scanned
   */
  public long regionCount; // required
  /**
   * The epoch time of the cold load
   */
  public long coldLoadAt; // required
  /**
   * The elapsed duration of the cold load, in ms
   */
  public long coldLoadTookMs; // required
  /**
   * The epoch time of the last warm load
   */
  public long warmLoadAt; // required
  /**
   * The elapsed duration of the last warm load
   */
  public long warmLoadTookMs; // required
  /**
   * The count of warm loads (also number of evicts - 1)
   */
  public long warmLoadCount; // required
  /**
   * The skew in size between slices. (max-size - min-size) / min-size
   */
  public double sizeSkew; // required
  /**
   * The skew in execution time between slices. (max-time - min-time) / min-time
   */
  public double timeSkew; // required
  /**
   * The average bytes per item in the dataset
   */
  public double itemSize; // required
  /**
   * The variation factor for item sizes
   */
  public double itemVariation; // required
  /**
   * An indicator of whether the sample-rate needs to be adjusted. (the next-dataset-size and next-sample-rate were not achievable)
   */
  public boolean loadInvalid; // required
  /**
   * The epoch time in ms after which there would be a cold load
   */
  public long earliestLoadAt; // required
  /**
   * The number of items rejected cause they exceeded next-item-max
   */
  public long rejectedItemCount; // required
  /**
   * The potential number of items the generation would hold without sampling or size constraints
   */
  public long potentialItemCount; // required
  /**
   * The system calculated sample rate recommended for next load
   */
  public double suggestedSampleRate; // required
  /**
   * The system calculated slice count recommended for next load
   */
  public long suggestedSliceCount; // required
  /**
   * The number of items the store expected to load
   */
  public long expectedItemCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The number of bytes scanned
     */
    BYTE_COUNT((short)1, "byteCount"),
    /**
     * The number of items scanned
     */
    ITEM_COUNT((short)2, "itemCount"),
    /**
     * The number of slices scanned
     */
    SLICE_COUNT((short)3, "sliceCount"),
    /**
     * The number of regions scanned
     */
    REGION_COUNT((short)4, "regionCount"),
    /**
     * The epoch time of the cold load
     */
    COLD_LOAD_AT((short)5, "coldLoadAt"),
    /**
     * The elapsed duration of the cold load, in ms
     */
    COLD_LOAD_TOOK_MS((short)6, "coldLoadTookMs"),
    /**
     * The epoch time of the last warm load
     */
    WARM_LOAD_AT((short)7, "warmLoadAt"),
    /**
     * The elapsed duration of the last warm load
     */
    WARM_LOAD_TOOK_MS((short)8, "warmLoadTookMs"),
    /**
     * The count of warm loads (also number of evicts - 1)
     */
    WARM_LOAD_COUNT((short)9, "warmLoadCount"),
    /**
     * The skew in size between slices. (max-size - min-size) / min-size
     */
    SIZE_SKEW((short)10, "sizeSkew"),
    /**
     * The skew in execution time between slices. (max-time - min-time) / min-time
     */
    TIME_SKEW((short)11, "timeSkew"),
    /**
     * The average bytes per item in the dataset
     */
    ITEM_SIZE((short)12, "itemSize"),
    /**
     * The variation factor for item sizes
     */
    ITEM_VARIATION((short)13, "itemVariation"),
    /**
     * An indicator of whether the sample-rate needs to be adjusted. (the next-dataset-size and next-sample-rate were not achievable)
     */
    LOAD_INVALID((short)14, "loadInvalid"),
    /**
     * The epoch time in ms after which there would be a cold load
     */
    EARLIEST_LOAD_AT((short)15, "earliestLoadAt"),
    /**
     * The number of items rejected cause they exceeded next-item-max
     */
    REJECTED_ITEM_COUNT((short)16, "rejectedItemCount"),
    /**
     * The potential number of items the generation would hold without sampling or size constraints
     */
    POTENTIAL_ITEM_COUNT((short)17, "potentialItemCount"),
    /**
     * The system calculated sample rate recommended for next load
     */
    SUGGESTED_SAMPLE_RATE((short)18, "suggestedSampleRate"),
    /**
     * The system calculated slice count recommended for next load
     */
    SUGGESTED_SLICE_COUNT((short)19, "suggestedSliceCount"),
    /**
     * The number of items the store expected to load
     */
    EXPECTED_ITEM_COUNT((short)20, "expectedItemCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BYTE_COUNT
          return BYTE_COUNT;
        case 2: // ITEM_COUNT
          return ITEM_COUNT;
        case 3: // SLICE_COUNT
          return SLICE_COUNT;
        case 4: // REGION_COUNT
          return REGION_COUNT;
        case 5: // COLD_LOAD_AT
          return COLD_LOAD_AT;
        case 6: // COLD_LOAD_TOOK_MS
          return COLD_LOAD_TOOK_MS;
        case 7: // WARM_LOAD_AT
          return WARM_LOAD_AT;
        case 8: // WARM_LOAD_TOOK_MS
          return WARM_LOAD_TOOK_MS;
        case 9: // WARM_LOAD_COUNT
          return WARM_LOAD_COUNT;
        case 10: // SIZE_SKEW
          return SIZE_SKEW;
        case 11: // TIME_SKEW
          return TIME_SKEW;
        case 12: // ITEM_SIZE
          return ITEM_SIZE;
        case 13: // ITEM_VARIATION
          return ITEM_VARIATION;
        case 14: // LOAD_INVALID
          return LOAD_INVALID;
        case 15: // EARLIEST_LOAD_AT
          return EARLIEST_LOAD_AT;
        case 16: // REJECTED_ITEM_COUNT
          return REJECTED_ITEM_COUNT;
        case 17: // POTENTIAL_ITEM_COUNT
          return POTENTIAL_ITEM_COUNT;
        case 18: // SUGGESTED_SAMPLE_RATE
          return SUGGESTED_SAMPLE_RATE;
        case 19: // SUGGESTED_SLICE_COUNT
          return SUGGESTED_SLICE_COUNT;
        case 20: // EXPECTED_ITEM_COUNT
          return EXPECTED_ITEM_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BYTECOUNT_ISSET_ID = 0;
  private static final int __ITEMCOUNT_ISSET_ID = 1;
  private static final int __SLICECOUNT_ISSET_ID = 2;
  private static final int __REGIONCOUNT_ISSET_ID = 3;
  private static final int __COLDLOADAT_ISSET_ID = 4;
  private static final int __COLDLOADTOOKMS_ISSET_ID = 5;
  private static final int __WARMLOADAT_ISSET_ID = 6;
  private static final int __WARMLOADTOOKMS_ISSET_ID = 7;
  private static final int __WARMLOADCOUNT_ISSET_ID = 8;
  private static final int __SIZESKEW_ISSET_ID = 9;
  private static final int __TIMESKEW_ISSET_ID = 10;
  private static final int __ITEMSIZE_ISSET_ID = 11;
  private static final int __ITEMVARIATION_ISSET_ID = 12;
  private static final int __LOADINVALID_ISSET_ID = 13;
  private static final int __EARLIESTLOADAT_ISSET_ID = 14;
  private static final int __REJECTEDITEMCOUNT_ISSET_ID = 15;
  private static final int __POTENTIALITEMCOUNT_ISSET_ID = 16;
  private static final int __SUGGESTEDSAMPLERATE_ISSET_ID = 17;
  private static final int __SUGGESTEDSLICECOUNT_ISSET_ID = 18;
  private static final int __EXPECTEDITEMCOUNT_ISSET_ID = 19;
  private int __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BYTE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("byteCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ITEM_COUNT, new org.apache.thrift.meta_data.FieldMetaData("itemCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLICE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("sliceCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REGION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("regionCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COLD_LOAD_AT, new org.apache.thrift.meta_data.FieldMetaData("coldLoadAt", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COLD_LOAD_TOOK_MS, new org.apache.thrift.meta_data.FieldMetaData("coldLoadTookMs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WARM_LOAD_AT, new org.apache.thrift.meta_data.FieldMetaData("warmLoadAt", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WARM_LOAD_TOOK_MS, new org.apache.thrift.meta_data.FieldMetaData("warmLoadTookMs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WARM_LOAD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("warmLoadCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SIZE_SKEW, new org.apache.thrift.meta_data.FieldMetaData("sizeSkew", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TIME_SKEW, new org.apache.thrift.meta_data.FieldMetaData("timeSkew", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ITEM_SIZE, new org.apache.thrift.meta_data.FieldMetaData("itemSize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ITEM_VARIATION, new org.apache.thrift.meta_data.FieldMetaData("itemVariation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAD_INVALID, new org.apache.thrift.meta_data.FieldMetaData("loadInvalid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EARLIEST_LOAD_AT, new org.apache.thrift.meta_data.FieldMetaData("earliestLoadAt", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REJECTED_ITEM_COUNT, new org.apache.thrift.meta_data.FieldMetaData("rejectedItemCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POTENTIAL_ITEM_COUNT, new org.apache.thrift.meta_data.FieldMetaData("potentialItemCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUGGESTED_SAMPLE_RATE, new org.apache.thrift.meta_data.FieldMetaData("suggestedSampleRate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUGGESTED_SLICE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("suggestedSliceCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXPECTED_ITEM_COUNT, new org.apache.thrift.meta_data.FieldMetaData("expectedItemCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BTGenerationMetrics.class, metaDataMap);
  }

  public BTGenerationMetrics() {
  }

  public BTGenerationMetrics(
    long byteCount,
    long itemCount,
    long sliceCount,
    long regionCount,
    long coldLoadAt,
    long coldLoadTookMs,
    long warmLoadAt,
    long warmLoadTookMs,
    long warmLoadCount,
    double sizeSkew,
    double timeSkew,
    double itemSize,
    double itemVariation,
    boolean loadInvalid,
    long earliestLoadAt,
    long rejectedItemCount,
    long potentialItemCount,
    double suggestedSampleRate,
    long suggestedSliceCount,
    long expectedItemCount)
  {
    this();
    this.byteCount = byteCount;
    setByteCountIsSet(true);
    this.itemCount = itemCount;
    setItemCountIsSet(true);
    this.sliceCount = sliceCount;
    setSliceCountIsSet(true);
    this.regionCount = regionCount;
    setRegionCountIsSet(true);
    this.coldLoadAt = coldLoadAt;
    setColdLoadAtIsSet(true);
    this.coldLoadTookMs = coldLoadTookMs;
    setColdLoadTookMsIsSet(true);
    this.warmLoadAt = warmLoadAt;
    setWarmLoadAtIsSet(true);
    this.warmLoadTookMs = warmLoadTookMs;
    setWarmLoadTookMsIsSet(true);
    this.warmLoadCount = warmLoadCount;
    setWarmLoadCountIsSet(true);
    this.sizeSkew = sizeSkew;
    setSizeSkewIsSet(true);
    this.timeSkew = timeSkew;
    setTimeSkewIsSet(true);
    this.itemSize = itemSize;
    setItemSizeIsSet(true);
    this.itemVariation = itemVariation;
    setItemVariationIsSet(true);
    this.loadInvalid = loadInvalid;
    setLoadInvalidIsSet(true);
    this.earliestLoadAt = earliestLoadAt;
    setEarliestLoadAtIsSet(true);
    this.rejectedItemCount = rejectedItemCount;
    setRejectedItemCountIsSet(true);
    this.potentialItemCount = potentialItemCount;
    setPotentialItemCountIsSet(true);
    this.suggestedSampleRate = suggestedSampleRate;
    setSuggestedSampleRateIsSet(true);
    this.suggestedSliceCount = suggestedSliceCount;
    setSuggestedSliceCountIsSet(true);
    this.expectedItemCount = expectedItemCount;
    setExpectedItemCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BTGenerationMetrics(BTGenerationMetrics other) {
    __isset_bitfield = other.__isset_bitfield;
    this.byteCount = other.byteCount;
    this.itemCount = other.itemCount;
    this.sliceCount = other.sliceCount;
    this.regionCount = other.regionCount;
    this.coldLoadAt = other.coldLoadAt;
    this.coldLoadTookMs = other.coldLoadTookMs;
    this.warmLoadAt = other.warmLoadAt;
    this.warmLoadTookMs = other.warmLoadTookMs;
    this.warmLoadCount = other.warmLoadCount;
    this.sizeSkew = other.sizeSkew;
    this.timeSkew = other.timeSkew;
    this.itemSize = other.itemSize;
    this.itemVariation = other.itemVariation;
    this.loadInvalid = other.loadInvalid;
    this.earliestLoadAt = other.earliestLoadAt;
    this.rejectedItemCount = other.rejectedItemCount;
    this.potentialItemCount = other.potentialItemCount;
    this.suggestedSampleRate = other.suggestedSampleRate;
    this.suggestedSliceCount = other.suggestedSliceCount;
    this.expectedItemCount = other.expectedItemCount;
  }

  public BTGenerationMetrics deepCopy() {
    return new BTGenerationMetrics(this);
  }

  @Override
  public void clear() {
    setByteCountIsSet(false);
    this.byteCount = 0;
    setItemCountIsSet(false);
    this.itemCount = 0;
    setSliceCountIsSet(false);
    this.sliceCount = 0;
    setRegionCountIsSet(false);
    this.regionCount = 0;
    setColdLoadAtIsSet(false);
    this.coldLoadAt = 0;
    setColdLoadTookMsIsSet(false);
    this.coldLoadTookMs = 0;
    setWarmLoadAtIsSet(false);
    this.warmLoadAt = 0;
    setWarmLoadTookMsIsSet(false);
    this.warmLoadTookMs = 0;
    setWarmLoadCountIsSet(false);
    this.warmLoadCount = 0;
    setSizeSkewIsSet(false);
    this.sizeSkew = 0.0;
    setTimeSkewIsSet(false);
    this.timeSkew = 0.0;
    setItemSizeIsSet(false);
    this.itemSize = 0.0;
    setItemVariationIsSet(false);
    this.itemVariation = 0.0;
    setLoadInvalidIsSet(false);
    this.loadInvalid = false;
    setEarliestLoadAtIsSet(false);
    this.earliestLoadAt = 0;
    setRejectedItemCountIsSet(false);
    this.rejectedItemCount = 0;
    setPotentialItemCountIsSet(false);
    this.potentialItemCount = 0;
    setSuggestedSampleRateIsSet(false);
    this.suggestedSampleRate = 0.0;
    setSuggestedSliceCountIsSet(false);
    this.suggestedSliceCount = 0;
    setExpectedItemCountIsSet(false);
    this.expectedItemCount = 0;
  }

  /**
   * The number of bytes scanned
   */
  public long getByteCount() {
    return this.byteCount;
  }

  /**
   * The number of bytes scanned
   */
  public BTGenerationMetrics setByteCount(long byteCount) {
    this.byteCount = byteCount;
    setByteCountIsSet(true);
    return this;
  }

  public void unsetByteCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BYTECOUNT_ISSET_ID);
  }

  /** Returns true if field byteCount is set (has been assigned a value) and false otherwise */
  public boolean isSetByteCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BYTECOUNT_ISSET_ID);
  }

  public void setByteCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BYTECOUNT_ISSET_ID, value);
  }

  /**
   * The number of items scanned
   */
  public long getItemCount() {
    return this.itemCount;
  }

  /**
   * The number of items scanned
   */
  public BTGenerationMetrics setItemCount(long itemCount) {
    this.itemCount = itemCount;
    setItemCountIsSet(true);
    return this;
  }

  public void unsetItemCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ITEMCOUNT_ISSET_ID);
  }

  /** Returns true if field itemCount is set (has been assigned a value) and false otherwise */
  public boolean isSetItemCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ITEMCOUNT_ISSET_ID);
  }

  public void setItemCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ITEMCOUNT_ISSET_ID, value);
  }

  /**
   * The number of slices scanned
   */
  public long getSliceCount() {
    return this.sliceCount;
  }

  /**
   * The number of slices scanned
   */
  public BTGenerationMetrics setSliceCount(long sliceCount) {
    this.sliceCount = sliceCount;
    setSliceCountIsSet(true);
    return this;
  }

  public void unsetSliceCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SLICECOUNT_ISSET_ID);
  }

  /** Returns true if field sliceCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSliceCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SLICECOUNT_ISSET_ID);
  }

  public void setSliceCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SLICECOUNT_ISSET_ID, value);
  }

  /**
   * The number of regions scanned
   */
  public long getRegionCount() {
    return this.regionCount;
  }

  /**
   * The number of regions scanned
   */
  public BTGenerationMetrics setRegionCount(long regionCount) {
    this.regionCount = regionCount;
    setRegionCountIsSet(true);
    return this;
  }

  public void unsetRegionCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REGIONCOUNT_ISSET_ID);
  }

  /** Returns true if field regionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REGIONCOUNT_ISSET_ID);
  }

  public void setRegionCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REGIONCOUNT_ISSET_ID, value);
  }

  /**
   * The epoch time of the cold load
   */
  public long getColdLoadAt() {
    return this.coldLoadAt;
  }

  /**
   * The epoch time of the cold load
   */
  public BTGenerationMetrics setColdLoadAt(long coldLoadAt) {
    this.coldLoadAt = coldLoadAt;
    setColdLoadAtIsSet(true);
    return this;
  }

  public void unsetColdLoadAt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLDLOADAT_ISSET_ID);
  }

  /** Returns true if field coldLoadAt is set (has been assigned a value) and false otherwise */
  public boolean isSetColdLoadAt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLDLOADAT_ISSET_ID);
  }

  public void setColdLoadAtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLDLOADAT_ISSET_ID, value);
  }

  /**
   * The elapsed duration of the cold load, in ms
   */
  public long getColdLoadTookMs() {
    return this.coldLoadTookMs;
  }

  /**
   * The elapsed duration of the cold load, in ms
   */
  public BTGenerationMetrics setColdLoadTookMs(long coldLoadTookMs) {
    this.coldLoadTookMs = coldLoadTookMs;
    setColdLoadTookMsIsSet(true);
    return this;
  }

  public void unsetColdLoadTookMs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLDLOADTOOKMS_ISSET_ID);
  }

  /** Returns true if field coldLoadTookMs is set (has been assigned a value) and false otherwise */
  public boolean isSetColdLoadTookMs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLDLOADTOOKMS_ISSET_ID);
  }

  public void setColdLoadTookMsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLDLOADTOOKMS_ISSET_ID, value);
  }

  /**
   * The epoch time of the last warm load
   */
  public long getWarmLoadAt() {
    return this.warmLoadAt;
  }

  /**
   * The epoch time of the last warm load
   */
  public BTGenerationMetrics setWarmLoadAt(long warmLoadAt) {
    this.warmLoadAt = warmLoadAt;
    setWarmLoadAtIsSet(true);
    return this;
  }

  public void unsetWarmLoadAt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WARMLOADAT_ISSET_ID);
  }

  /** Returns true if field warmLoadAt is set (has been assigned a value) and false otherwise */
  public boolean isSetWarmLoadAt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WARMLOADAT_ISSET_ID);
  }

  public void setWarmLoadAtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WARMLOADAT_ISSET_ID, value);
  }

  /**
   * The elapsed duration of the last warm load
   */
  public long getWarmLoadTookMs() {
    return this.warmLoadTookMs;
  }

  /**
   * The elapsed duration of the last warm load
   */
  public BTGenerationMetrics setWarmLoadTookMs(long warmLoadTookMs) {
    this.warmLoadTookMs = warmLoadTookMs;
    setWarmLoadTookMsIsSet(true);
    return this;
  }

  public void unsetWarmLoadTookMs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WARMLOADTOOKMS_ISSET_ID);
  }

  /** Returns true if field warmLoadTookMs is set (has been assigned a value) and false otherwise */
  public boolean isSetWarmLoadTookMs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WARMLOADTOOKMS_ISSET_ID);
  }

  public void setWarmLoadTookMsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WARMLOADTOOKMS_ISSET_ID, value);
  }

  /**
   * The count of warm loads (also number of evicts - 1)
   */
  public long getWarmLoadCount() {
    return this.warmLoadCount;
  }

  /**
   * The count of warm loads (also number of evicts - 1)
   */
  public BTGenerationMetrics setWarmLoadCount(long warmLoadCount) {
    this.warmLoadCount = warmLoadCount;
    setWarmLoadCountIsSet(true);
    return this;
  }

  public void unsetWarmLoadCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WARMLOADCOUNT_ISSET_ID);
  }

  /** Returns true if field warmLoadCount is set (has been assigned a value) and false otherwise */
  public boolean isSetWarmLoadCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WARMLOADCOUNT_ISSET_ID);
  }

  public void setWarmLoadCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WARMLOADCOUNT_ISSET_ID, value);
  }

  /**
   * The skew in size between slices. (max-size - min-size) / min-size
   */
  public double getSizeSkew() {
    return this.sizeSkew;
  }

  /**
   * The skew in size between slices. (max-size - min-size) / min-size
   */
  public BTGenerationMetrics setSizeSkew(double sizeSkew) {
    this.sizeSkew = sizeSkew;
    setSizeSkewIsSet(true);
    return this;
  }

  public void unsetSizeSkew() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZESKEW_ISSET_ID);
  }

  /** Returns true if field sizeSkew is set (has been assigned a value) and false otherwise */
  public boolean isSetSizeSkew() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZESKEW_ISSET_ID);
  }

  public void setSizeSkewIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZESKEW_ISSET_ID, value);
  }

  /**
   * The skew in execution time between slices. (max-time - min-time) / min-time
   */
  public double getTimeSkew() {
    return this.timeSkew;
  }

  /**
   * The skew in execution time between slices. (max-time - min-time) / min-time
   */
  public BTGenerationMetrics setTimeSkew(double timeSkew) {
    this.timeSkew = timeSkew;
    setTimeSkewIsSet(true);
    return this;
  }

  public void unsetTimeSkew() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESKEW_ISSET_ID);
  }

  /** Returns true if field timeSkew is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeSkew() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESKEW_ISSET_ID);
  }

  public void setTimeSkewIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESKEW_ISSET_ID, value);
  }

  /**
   * The average bytes per item in the dataset
   */
  public double getItemSize() {
    return this.itemSize;
  }

  /**
   * The average bytes per item in the dataset
   */
  public BTGenerationMetrics setItemSize(double itemSize) {
    this.itemSize = itemSize;
    setItemSizeIsSet(true);
    return this;
  }

  public void unsetItemSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ITEMSIZE_ISSET_ID);
  }

  /** Returns true if field itemSize is set (has been assigned a value) and false otherwise */
  public boolean isSetItemSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ITEMSIZE_ISSET_ID);
  }

  public void setItemSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ITEMSIZE_ISSET_ID, value);
  }

  /**
   * The variation factor for item sizes
   */
  public double getItemVariation() {
    return this.itemVariation;
  }

  /**
   * The variation factor for item sizes
   */
  public BTGenerationMetrics setItemVariation(double itemVariation) {
    this.itemVariation = itemVariation;
    setItemVariationIsSet(true);
    return this;
  }

  public void unsetItemVariation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ITEMVARIATION_ISSET_ID);
  }

  /** Returns true if field itemVariation is set (has been assigned a value) and false otherwise */
  public boolean isSetItemVariation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ITEMVARIATION_ISSET_ID);
  }

  public void setItemVariationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ITEMVARIATION_ISSET_ID, value);
  }

  /**
   * An indicator of whether the sample-rate needs to be adjusted. (the next-dataset-size and next-sample-rate were not achievable)
   */
  public boolean isLoadInvalid() {
    return this.loadInvalid;
  }

  /**
   * An indicator of whether the sample-rate needs to be adjusted. (the next-dataset-size and next-sample-rate were not achievable)
   */
  public BTGenerationMetrics setLoadInvalid(boolean loadInvalid) {
    this.loadInvalid = loadInvalid;
    setLoadInvalidIsSet(true);
    return this;
  }

  public void unsetLoadInvalid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOADINVALID_ISSET_ID);
  }

  /** Returns true if field loadInvalid is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadInvalid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOADINVALID_ISSET_ID);
  }

  public void setLoadInvalidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOADINVALID_ISSET_ID, value);
  }

  /**
   * The epoch time in ms after which there would be a cold load
   */
  public long getEarliestLoadAt() {
    return this.earliestLoadAt;
  }

  /**
   * The epoch time in ms after which there would be a cold load
   */
  public BTGenerationMetrics setEarliestLoadAt(long earliestLoadAt) {
    this.earliestLoadAt = earliestLoadAt;
    setEarliestLoadAtIsSet(true);
    return this;
  }

  public void unsetEarliestLoadAt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EARLIESTLOADAT_ISSET_ID);
  }

  /** Returns true if field earliestLoadAt is set (has been assigned a value) and false otherwise */
  public boolean isSetEarliestLoadAt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EARLIESTLOADAT_ISSET_ID);
  }

  public void setEarliestLoadAtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EARLIESTLOADAT_ISSET_ID, value);
  }

  /**
   * The number of items rejected cause they exceeded next-item-max
   */
  public long getRejectedItemCount() {
    return this.rejectedItemCount;
  }

  /**
   * The number of items rejected cause they exceeded next-item-max
   */
  public BTGenerationMetrics setRejectedItemCount(long rejectedItemCount) {
    this.rejectedItemCount = rejectedItemCount;
    setRejectedItemCountIsSet(true);
    return this;
  }

  public void unsetRejectedItemCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REJECTEDITEMCOUNT_ISSET_ID);
  }

  /** Returns true if field rejectedItemCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRejectedItemCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REJECTEDITEMCOUNT_ISSET_ID);
  }

  public void setRejectedItemCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REJECTEDITEMCOUNT_ISSET_ID, value);
  }

  /**
   * The potential number of items the generation would hold without sampling or size constraints
   */
  public long getPotentialItemCount() {
    return this.potentialItemCount;
  }

  /**
   * The potential number of items the generation would hold without sampling or size constraints
   */
  public BTGenerationMetrics setPotentialItemCount(long potentialItemCount) {
    this.potentialItemCount = potentialItemCount;
    setPotentialItemCountIsSet(true);
    return this;
  }

  public void unsetPotentialItemCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POTENTIALITEMCOUNT_ISSET_ID);
  }

  /** Returns true if field potentialItemCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPotentialItemCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POTENTIALITEMCOUNT_ISSET_ID);
  }

  public void setPotentialItemCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POTENTIALITEMCOUNT_ISSET_ID, value);
  }

  /**
   * The system calculated sample rate recommended for next load
   */
  public double getSuggestedSampleRate() {
    return this.suggestedSampleRate;
  }

  /**
   * The system calculated sample rate recommended for next load
   */
  public BTGenerationMetrics setSuggestedSampleRate(double suggestedSampleRate) {
    this.suggestedSampleRate = suggestedSampleRate;
    setSuggestedSampleRateIsSet(true);
    return this;
  }

  public void unsetSuggestedSampleRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUGGESTEDSAMPLERATE_ISSET_ID);
  }

  /** Returns true if field suggestedSampleRate is set (has been assigned a value) and false otherwise */
  public boolean isSetSuggestedSampleRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUGGESTEDSAMPLERATE_ISSET_ID);
  }

  public void setSuggestedSampleRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUGGESTEDSAMPLERATE_ISSET_ID, value);
  }

  /**
   * The system calculated slice count recommended for next load
   */
  public long getSuggestedSliceCount() {
    return this.suggestedSliceCount;
  }

  /**
   * The system calculated slice count recommended for next load
   */
  public BTGenerationMetrics setSuggestedSliceCount(long suggestedSliceCount) {
    this.suggestedSliceCount = suggestedSliceCount;
    setSuggestedSliceCountIsSet(true);
    return this;
  }

  public void unsetSuggestedSliceCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUGGESTEDSLICECOUNT_ISSET_ID);
  }

  /** Returns true if field suggestedSliceCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSuggestedSliceCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUGGESTEDSLICECOUNT_ISSET_ID);
  }

  public void setSuggestedSliceCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUGGESTEDSLICECOUNT_ISSET_ID, value);
  }

  /**
   * The number of items the store expected to load
   */
  public long getExpectedItemCount() {
    return this.expectedItemCount;
  }

  /**
   * The number of items the store expected to load
   */
  public BTGenerationMetrics setExpectedItemCount(long expectedItemCount) {
    this.expectedItemCount = expectedItemCount;
    setExpectedItemCountIsSet(true);
    return this;
  }

  public void unsetExpectedItemCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPECTEDITEMCOUNT_ISSET_ID);
  }

  /** Returns true if field expectedItemCount is set (has been assigned a value) and false otherwise */
  public boolean isSetExpectedItemCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPECTEDITEMCOUNT_ISSET_ID);
  }

  public void setExpectedItemCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPECTEDITEMCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case BYTE_COUNT:
      if (value == null) {
        unsetByteCount();
      } else {
        setByteCount((java.lang.Long)value);
      }
      break;

    case ITEM_COUNT:
      if (value == null) {
        unsetItemCount();
      } else {
        setItemCount((java.lang.Long)value);
      }
      break;

    case SLICE_COUNT:
      if (value == null) {
        unsetSliceCount();
      } else {
        setSliceCount((java.lang.Long)value);
      }
      break;

    case REGION_COUNT:
      if (value == null) {
        unsetRegionCount();
      } else {
        setRegionCount((java.lang.Long)value);
      }
      break;

    case COLD_LOAD_AT:
      if (value == null) {
        unsetColdLoadAt();
      } else {
        setColdLoadAt((java.lang.Long)value);
      }
      break;

    case COLD_LOAD_TOOK_MS:
      if (value == null) {
        unsetColdLoadTookMs();
      } else {
        setColdLoadTookMs((java.lang.Long)value);
      }
      break;

    case WARM_LOAD_AT:
      if (value == null) {
        unsetWarmLoadAt();
      } else {
        setWarmLoadAt((java.lang.Long)value);
      }
      break;

    case WARM_LOAD_TOOK_MS:
      if (value == null) {
        unsetWarmLoadTookMs();
      } else {
        setWarmLoadTookMs((java.lang.Long)value);
      }
      break;

    case WARM_LOAD_COUNT:
      if (value == null) {
        unsetWarmLoadCount();
      } else {
        setWarmLoadCount((java.lang.Long)value);
      }
      break;

    case SIZE_SKEW:
      if (value == null) {
        unsetSizeSkew();
      } else {
        setSizeSkew((java.lang.Double)value);
      }
      break;

    case TIME_SKEW:
      if (value == null) {
        unsetTimeSkew();
      } else {
        setTimeSkew((java.lang.Double)value);
      }
      break;

    case ITEM_SIZE:
      if (value == null) {
        unsetItemSize();
      } else {
        setItemSize((java.lang.Double)value);
      }
      break;

    case ITEM_VARIATION:
      if (value == null) {
        unsetItemVariation();
      } else {
        setItemVariation((java.lang.Double)value);
      }
      break;

    case LOAD_INVALID:
      if (value == null) {
        unsetLoadInvalid();
      } else {
        setLoadInvalid((java.lang.Boolean)value);
      }
      break;

    case EARLIEST_LOAD_AT:
      if (value == null) {
        unsetEarliestLoadAt();
      } else {
        setEarliestLoadAt((java.lang.Long)value);
      }
      break;

    case REJECTED_ITEM_COUNT:
      if (value == null) {
        unsetRejectedItemCount();
      } else {
        setRejectedItemCount((java.lang.Long)value);
      }
      break;

    case POTENTIAL_ITEM_COUNT:
      if (value == null) {
        unsetPotentialItemCount();
      } else {
        setPotentialItemCount((java.lang.Long)value);
      }
      break;

    case SUGGESTED_SAMPLE_RATE:
      if (value == null) {
        unsetSuggestedSampleRate();
      } else {
        setSuggestedSampleRate((java.lang.Double)value);
      }
      break;

    case SUGGESTED_SLICE_COUNT:
      if (value == null) {
        unsetSuggestedSliceCount();
      } else {
        setSuggestedSliceCount((java.lang.Long)value);
      }
      break;

    case EXPECTED_ITEM_COUNT:
      if (value == null) {
        unsetExpectedItemCount();
      } else {
        setExpectedItemCount((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BYTE_COUNT:
      return getByteCount();

    case ITEM_COUNT:
      return getItemCount();

    case SLICE_COUNT:
      return getSliceCount();

    case REGION_COUNT:
      return getRegionCount();

    case COLD_LOAD_AT:
      return getColdLoadAt();

    case COLD_LOAD_TOOK_MS:
      return getColdLoadTookMs();

    case WARM_LOAD_AT:
      return getWarmLoadAt();

    case WARM_LOAD_TOOK_MS:
      return getWarmLoadTookMs();

    case WARM_LOAD_COUNT:
      return getWarmLoadCount();

    case SIZE_SKEW:
      return getSizeSkew();

    case TIME_SKEW:
      return getTimeSkew();

    case ITEM_SIZE:
      return getItemSize();

    case ITEM_VARIATION:
      return getItemVariation();

    case LOAD_INVALID:
      return isLoadInvalid();

    case EARLIEST_LOAD_AT:
      return getEarliestLoadAt();

    case REJECTED_ITEM_COUNT:
      return getRejectedItemCount();

    case POTENTIAL_ITEM_COUNT:
      return getPotentialItemCount();

    case SUGGESTED_SAMPLE_RATE:
      return getSuggestedSampleRate();

    case SUGGESTED_SLICE_COUNT:
      return getSuggestedSliceCount();

    case EXPECTED_ITEM_COUNT:
      return getExpectedItemCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BYTE_COUNT:
      return isSetByteCount();
    case ITEM_COUNT:
      return isSetItemCount();
    case SLICE_COUNT:
      return isSetSliceCount();
    case REGION_COUNT:
      return isSetRegionCount();
    case COLD_LOAD_AT:
      return isSetColdLoadAt();
    case COLD_LOAD_TOOK_MS:
      return isSetColdLoadTookMs();
    case WARM_LOAD_AT:
      return isSetWarmLoadAt();
    case WARM_LOAD_TOOK_MS:
      return isSetWarmLoadTookMs();
    case WARM_LOAD_COUNT:
      return isSetWarmLoadCount();
    case SIZE_SKEW:
      return isSetSizeSkew();
    case TIME_SKEW:
      return isSetTimeSkew();
    case ITEM_SIZE:
      return isSetItemSize();
    case ITEM_VARIATION:
      return isSetItemVariation();
    case LOAD_INVALID:
      return isSetLoadInvalid();
    case EARLIEST_LOAD_AT:
      return isSetEarliestLoadAt();
    case REJECTED_ITEM_COUNT:
      return isSetRejectedItemCount();
    case POTENTIAL_ITEM_COUNT:
      return isSetPotentialItemCount();
    case SUGGESTED_SAMPLE_RATE:
      return isSetSuggestedSampleRate();
    case SUGGESTED_SLICE_COUNT:
      return isSetSuggestedSliceCount();
    case EXPECTED_ITEM_COUNT:
      return isSetExpectedItemCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BTGenerationMetrics)
      return this.equals((BTGenerationMetrics)that);
    return false;
  }

  public boolean equals(BTGenerationMetrics that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_byteCount = true;
    boolean that_present_byteCount = true;
    if (this_present_byteCount || that_present_byteCount) {
      if (!(this_present_byteCount && that_present_byteCount))
        return false;
      if (this.byteCount != that.byteCount)
        return false;
    }

    boolean this_present_itemCount = true;
    boolean that_present_itemCount = true;
    if (this_present_itemCount || that_present_itemCount) {
      if (!(this_present_itemCount && that_present_itemCount))
        return false;
      if (this.itemCount != that.itemCount)
        return false;
    }

    boolean this_present_sliceCount = true;
    boolean that_present_sliceCount = true;
    if (this_present_sliceCount || that_present_sliceCount) {
      if (!(this_present_sliceCount && that_present_sliceCount))
        return false;
      if (this.sliceCount != that.sliceCount)
        return false;
    }

    boolean this_present_regionCount = true;
    boolean that_present_regionCount = true;
    if (this_present_regionCount || that_present_regionCount) {
      if (!(this_present_regionCount && that_present_regionCount))
        return false;
      if (this.regionCount != that.regionCount)
        return false;
    }

    boolean this_present_coldLoadAt = true;
    boolean that_present_coldLoadAt = true;
    if (this_present_coldLoadAt || that_present_coldLoadAt) {
      if (!(this_present_coldLoadAt && that_present_coldLoadAt))
        return false;
      if (this.coldLoadAt != that.coldLoadAt)
        return false;
    }

    boolean this_present_coldLoadTookMs = true;
    boolean that_present_coldLoadTookMs = true;
    if (this_present_coldLoadTookMs || that_present_coldLoadTookMs) {
      if (!(this_present_coldLoadTookMs && that_present_coldLoadTookMs))
        return false;
      if (this.coldLoadTookMs != that.coldLoadTookMs)
        return false;
    }

    boolean this_present_warmLoadAt = true;
    boolean that_present_warmLoadAt = true;
    if (this_present_warmLoadAt || that_present_warmLoadAt) {
      if (!(this_present_warmLoadAt && that_present_warmLoadAt))
        return false;
      if (this.warmLoadAt != that.warmLoadAt)
        return false;
    }

    boolean this_present_warmLoadTookMs = true;
    boolean that_present_warmLoadTookMs = true;
    if (this_present_warmLoadTookMs || that_present_warmLoadTookMs) {
      if (!(this_present_warmLoadTookMs && that_present_warmLoadTookMs))
        return false;
      if (this.warmLoadTookMs != that.warmLoadTookMs)
        return false;
    }

    boolean this_present_warmLoadCount = true;
    boolean that_present_warmLoadCount = true;
    if (this_present_warmLoadCount || that_present_warmLoadCount) {
      if (!(this_present_warmLoadCount && that_present_warmLoadCount))
        return false;
      if (this.warmLoadCount != that.warmLoadCount)
        return false;
    }

    boolean this_present_sizeSkew = true;
    boolean that_present_sizeSkew = true;
    if (this_present_sizeSkew || that_present_sizeSkew) {
      if (!(this_present_sizeSkew && that_present_sizeSkew))
        return false;
      if (this.sizeSkew != that.sizeSkew)
        return false;
    }

    boolean this_present_timeSkew = true;
    boolean that_present_timeSkew = true;
    if (this_present_timeSkew || that_present_timeSkew) {
      if (!(this_present_timeSkew && that_present_timeSkew))
        return false;
      if (this.timeSkew != that.timeSkew)
        return false;
    }

    boolean this_present_itemSize = true;
    boolean that_present_itemSize = true;
    if (this_present_itemSize || that_present_itemSize) {
      if (!(this_present_itemSize && that_present_itemSize))
        return false;
      if (this.itemSize != that.itemSize)
        return false;
    }

    boolean this_present_itemVariation = true;
    boolean that_present_itemVariation = true;
    if (this_present_itemVariation || that_present_itemVariation) {
      if (!(this_present_itemVariation && that_present_itemVariation))
        return false;
      if (this.itemVariation != that.itemVariation)
        return false;
    }

    boolean this_present_loadInvalid = true;
    boolean that_present_loadInvalid = true;
    if (this_present_loadInvalid || that_present_loadInvalid) {
      if (!(this_present_loadInvalid && that_present_loadInvalid))
        return false;
      if (this.loadInvalid != that.loadInvalid)
        return false;
    }

    boolean this_present_earliestLoadAt = true;
    boolean that_present_earliestLoadAt = true;
    if (this_present_earliestLoadAt || that_present_earliestLoadAt) {
      if (!(this_present_earliestLoadAt && that_present_earliestLoadAt))
        return false;
      if (this.earliestLoadAt != that.earliestLoadAt)
        return false;
    }

    boolean this_present_rejectedItemCount = true;
    boolean that_present_rejectedItemCount = true;
    if (this_present_rejectedItemCount || that_present_rejectedItemCount) {
      if (!(this_present_rejectedItemCount && that_present_rejectedItemCount))
        return false;
      if (this.rejectedItemCount != that.rejectedItemCount)
        return false;
    }

    boolean this_present_potentialItemCount = true;
    boolean that_present_potentialItemCount = true;
    if (this_present_potentialItemCount || that_present_potentialItemCount) {
      if (!(this_present_potentialItemCount && that_present_potentialItemCount))
        return false;
      if (this.potentialItemCount != that.potentialItemCount)
        return false;
    }

    boolean this_present_suggestedSampleRate = true;
    boolean that_present_suggestedSampleRate = true;
    if (this_present_suggestedSampleRate || that_present_suggestedSampleRate) {
      if (!(this_present_suggestedSampleRate && that_present_suggestedSampleRate))
        return false;
      if (this.suggestedSampleRate != that.suggestedSampleRate)
        return false;
    }

    boolean this_present_suggestedSliceCount = true;
    boolean that_present_suggestedSliceCount = true;
    if (this_present_suggestedSliceCount || that_present_suggestedSliceCount) {
      if (!(this_present_suggestedSliceCount && that_present_suggestedSliceCount))
        return false;
      if (this.suggestedSliceCount != that.suggestedSliceCount)
        return false;
    }

    boolean this_present_expectedItemCount = true;
    boolean that_present_expectedItemCount = true;
    if (this_present_expectedItemCount || that_present_expectedItemCount) {
      if (!(this_present_expectedItemCount && that_present_expectedItemCount))
        return false;
      if (this.expectedItemCount != that.expectedItemCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(byteCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(itemCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sliceCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(regionCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(coldLoadAt);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(coldLoadTookMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(warmLoadAt);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(warmLoadTookMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(warmLoadCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sizeSkew);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeSkew);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(itemSize);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(itemVariation);

    hashCode = hashCode * 8191 + ((loadInvalid) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(earliestLoadAt);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rejectedItemCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(potentialItemCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(suggestedSampleRate);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(suggestedSliceCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(expectedItemCount);

    return hashCode;
  }

  @Override
  public int compareTo(BTGenerationMetrics other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetByteCount()).compareTo(other.isSetByteCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteCount, other.byteCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetItemCount()).compareTo(other.isSetItemCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemCount, other.itemCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSliceCount()).compareTo(other.isSetSliceCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSliceCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sliceCount, other.sliceCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegionCount()).compareTo(other.isSetRegionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCount, other.regionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetColdLoadAt()).compareTo(other.isSetColdLoadAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColdLoadAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coldLoadAt, other.coldLoadAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetColdLoadTookMs()).compareTo(other.isSetColdLoadTookMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColdLoadTookMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coldLoadTookMs, other.coldLoadTookMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWarmLoadAt()).compareTo(other.isSetWarmLoadAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarmLoadAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.warmLoadAt, other.warmLoadAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWarmLoadTookMs()).compareTo(other.isSetWarmLoadTookMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarmLoadTookMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.warmLoadTookMs, other.warmLoadTookMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWarmLoadCount()).compareTo(other.isSetWarmLoadCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarmLoadCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.warmLoadCount, other.warmLoadCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSizeSkew()).compareTo(other.isSetSizeSkew());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSizeSkew()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeSkew, other.sizeSkew);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeSkew()).compareTo(other.isSetTimeSkew());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeSkew()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeSkew, other.timeSkew);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetItemSize()).compareTo(other.isSetItemSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemSize, other.itemSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetItemVariation()).compareTo(other.isSetItemVariation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemVariation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemVariation, other.itemVariation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLoadInvalid()).compareTo(other.isSetLoadInvalid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadInvalid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadInvalid, other.loadInvalid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEarliestLoadAt()).compareTo(other.isSetEarliestLoadAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEarliestLoadAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.earliestLoadAt, other.earliestLoadAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRejectedItemCount()).compareTo(other.isSetRejectedItemCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRejectedItemCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rejectedItemCount, other.rejectedItemCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPotentialItemCount()).compareTo(other.isSetPotentialItemCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPotentialItemCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.potentialItemCount, other.potentialItemCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSuggestedSampleRate()).compareTo(other.isSetSuggestedSampleRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuggestedSampleRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suggestedSampleRate, other.suggestedSampleRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSuggestedSliceCount()).compareTo(other.isSetSuggestedSliceCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuggestedSliceCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suggestedSliceCount, other.suggestedSliceCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExpectedItemCount()).compareTo(other.isSetExpectedItemCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpectedItemCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectedItemCount, other.expectedItemCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BTGenerationMetrics(");
    boolean first = true;

    sb.append("byteCount:");
    sb.append(this.byteCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemCount:");
    sb.append(this.itemCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sliceCount:");
    sb.append(this.sliceCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regionCount:");
    sb.append(this.regionCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("coldLoadAt:");
    sb.append(this.coldLoadAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("coldLoadTookMs:");
    sb.append(this.coldLoadTookMs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("warmLoadAt:");
    sb.append(this.warmLoadAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("warmLoadTookMs:");
    sb.append(this.warmLoadTookMs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("warmLoadCount:");
    sb.append(this.warmLoadCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sizeSkew:");
    sb.append(this.sizeSkew);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeSkew:");
    sb.append(this.timeSkew);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemSize:");
    sb.append(this.itemSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemVariation:");
    sb.append(this.itemVariation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loadInvalid:");
    sb.append(this.loadInvalid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("earliestLoadAt:");
    sb.append(this.earliestLoadAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rejectedItemCount:");
    sb.append(this.rejectedItemCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("potentialItemCount:");
    sb.append(this.potentialItemCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("suggestedSampleRate:");
    sb.append(this.suggestedSampleRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("suggestedSliceCount:");
    sb.append(this.suggestedSliceCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expectedItemCount:");
    sb.append(this.expectedItemCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'byteCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'itemCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'sliceCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'regionCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'coldLoadAt' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'coldLoadTookMs' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'warmLoadAt' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'warmLoadTookMs' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'warmLoadCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'sizeSkew' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'timeSkew' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'itemSize' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'itemVariation' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'loadInvalid' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'earliestLoadAt' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'rejectedItemCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'potentialItemCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'suggestedSampleRate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'suggestedSliceCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'expectedItemCount' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BTGenerationMetricsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTGenerationMetricsStandardScheme getScheme() {
      return new BTGenerationMetricsStandardScheme();
    }
  }

  private static class BTGenerationMetricsStandardScheme extends org.apache.thrift.scheme.StandardScheme<BTGenerationMetrics> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BTGenerationMetrics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BYTE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.byteCount = iprot.readI64();
              struct.setByteCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEM_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.itemCount = iprot.readI64();
              struct.setItemCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLICE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sliceCount = iprot.readI64();
              struct.setSliceCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REGION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.regionCount = iprot.readI64();
              struct.setRegionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLD_LOAD_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.coldLoadAt = iprot.readI64();
              struct.setColdLoadAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COLD_LOAD_TOOK_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.coldLoadTookMs = iprot.readI64();
              struct.setColdLoadTookMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WARM_LOAD_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.warmLoadAt = iprot.readI64();
              struct.setWarmLoadAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WARM_LOAD_TOOK_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.warmLoadTookMs = iprot.readI64();
              struct.setWarmLoadTookMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WARM_LOAD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.warmLoadCount = iprot.readI64();
              struct.setWarmLoadCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SIZE_SKEW
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sizeSkew = iprot.readDouble();
              struct.setSizeSkewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TIME_SKEW
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.timeSkew = iprot.readDouble();
              struct.setTimeSkewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ITEM_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.itemSize = iprot.readDouble();
              struct.setItemSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ITEM_VARIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.itemVariation = iprot.readDouble();
              struct.setItemVariationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LOAD_INVALID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.loadInvalid = iprot.readBool();
              struct.setLoadInvalidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // EARLIEST_LOAD_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.earliestLoadAt = iprot.readI64();
              struct.setEarliestLoadAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REJECTED_ITEM_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rejectedItemCount = iprot.readI64();
              struct.setRejectedItemCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // POTENTIAL_ITEM_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.potentialItemCount = iprot.readI64();
              struct.setPotentialItemCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SUGGESTED_SAMPLE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.suggestedSampleRate = iprot.readDouble();
              struct.setSuggestedSampleRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SUGGESTED_SLICE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.suggestedSliceCount = iprot.readI64();
              struct.setSuggestedSliceCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // EXPECTED_ITEM_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expectedItemCount = iprot.readI64();
              struct.setExpectedItemCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetByteCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'byteCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetItemCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'itemCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSliceCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sliceCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRegionCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'regionCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetColdLoadAt()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'coldLoadAt' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetColdLoadTookMs()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'coldLoadTookMs' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetWarmLoadAt()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'warmLoadAt' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetWarmLoadTookMs()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'warmLoadTookMs' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetWarmLoadCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'warmLoadCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSizeSkew()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sizeSkew' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTimeSkew()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeSkew' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetItemSize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'itemSize' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetItemVariation()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'itemVariation' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLoadInvalid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'loadInvalid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEarliestLoadAt()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'earliestLoadAt' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRejectedItemCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rejectedItemCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPotentialItemCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'potentialItemCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSuggestedSampleRate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'suggestedSampleRate' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSuggestedSliceCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'suggestedSliceCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetExpectedItemCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'expectedItemCount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BTGenerationMetrics struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BYTE_COUNT_FIELD_DESC);
      oprot.writeI64(struct.byteCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_COUNT_FIELD_DESC);
      oprot.writeI64(struct.itemCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SLICE_COUNT_FIELD_DESC);
      oprot.writeI64(struct.sliceCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REGION_COUNT_FIELD_DESC);
      oprot.writeI64(struct.regionCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLD_LOAD_AT_FIELD_DESC);
      oprot.writeI64(struct.coldLoadAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLD_LOAD_TOOK_MS_FIELD_DESC);
      oprot.writeI64(struct.coldLoadTookMs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WARM_LOAD_AT_FIELD_DESC);
      oprot.writeI64(struct.warmLoadAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WARM_LOAD_TOOK_MS_FIELD_DESC);
      oprot.writeI64(struct.warmLoadTookMs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WARM_LOAD_COUNT_FIELD_DESC);
      oprot.writeI64(struct.warmLoadCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_SKEW_FIELD_DESC);
      oprot.writeDouble(struct.sizeSkew);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIME_SKEW_FIELD_DESC);
      oprot.writeDouble(struct.timeSkew);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_SIZE_FIELD_DESC);
      oprot.writeDouble(struct.itemSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_VARIATION_FIELD_DESC);
      oprot.writeDouble(struct.itemVariation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAD_INVALID_FIELD_DESC);
      oprot.writeBool(struct.loadInvalid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EARLIEST_LOAD_AT_FIELD_DESC);
      oprot.writeI64(struct.earliestLoadAt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REJECTED_ITEM_COUNT_FIELD_DESC);
      oprot.writeI64(struct.rejectedItemCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POTENTIAL_ITEM_COUNT_FIELD_DESC);
      oprot.writeI64(struct.potentialItemCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUGGESTED_SAMPLE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.suggestedSampleRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUGGESTED_SLICE_COUNT_FIELD_DESC);
      oprot.writeI64(struct.suggestedSliceCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPECTED_ITEM_COUNT_FIELD_DESC);
      oprot.writeI64(struct.expectedItemCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BTGenerationMetricsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTGenerationMetricsTupleScheme getScheme() {
      return new BTGenerationMetricsTupleScheme();
    }
  }

  private static class BTGenerationMetricsTupleScheme extends org.apache.thrift.scheme.TupleScheme<BTGenerationMetrics> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BTGenerationMetrics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.byteCount);
      oprot.writeI64(struct.itemCount);
      oprot.writeI64(struct.sliceCount);
      oprot.writeI64(struct.regionCount);
      oprot.writeI64(struct.coldLoadAt);
      oprot.writeI64(struct.coldLoadTookMs);
      oprot.writeI64(struct.warmLoadAt);
      oprot.writeI64(struct.warmLoadTookMs);
      oprot.writeI64(struct.warmLoadCount);
      oprot.writeDouble(struct.sizeSkew);
      oprot.writeDouble(struct.timeSkew);
      oprot.writeDouble(struct.itemSize);
      oprot.writeDouble(struct.itemVariation);
      oprot.writeBool(struct.loadInvalid);
      oprot.writeI64(struct.earliestLoadAt);
      oprot.writeI64(struct.rejectedItemCount);
      oprot.writeI64(struct.potentialItemCount);
      oprot.writeDouble(struct.suggestedSampleRate);
      oprot.writeI64(struct.suggestedSliceCount);
      oprot.writeI64(struct.expectedItemCount);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BTGenerationMetrics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.byteCount = iprot.readI64();
      struct.setByteCountIsSet(true);
      struct.itemCount = iprot.readI64();
      struct.setItemCountIsSet(true);
      struct.sliceCount = iprot.readI64();
      struct.setSliceCountIsSet(true);
      struct.regionCount = iprot.readI64();
      struct.setRegionCountIsSet(true);
      struct.coldLoadAt = iprot.readI64();
      struct.setColdLoadAtIsSet(true);
      struct.coldLoadTookMs = iprot.readI64();
      struct.setColdLoadTookMsIsSet(true);
      struct.warmLoadAt = iprot.readI64();
      struct.setWarmLoadAtIsSet(true);
      struct.warmLoadTookMs = iprot.readI64();
      struct.setWarmLoadTookMsIsSet(true);
      struct.warmLoadCount = iprot.readI64();
      struct.setWarmLoadCountIsSet(true);
      struct.sizeSkew = iprot.readDouble();
      struct.setSizeSkewIsSet(true);
      struct.timeSkew = iprot.readDouble();
      struct.setTimeSkewIsSet(true);
      struct.itemSize = iprot.readDouble();
      struct.setItemSizeIsSet(true);
      struct.itemVariation = iprot.readDouble();
      struct.setItemVariationIsSet(true);
      struct.loadInvalid = iprot.readBool();
      struct.setLoadInvalidIsSet(true);
      struct.earliestLoadAt = iprot.readI64();
      struct.setEarliestLoadAtIsSet(true);
      struct.rejectedItemCount = iprot.readI64();
      struct.setRejectedItemCountIsSet(true);
      struct.potentialItemCount = iprot.readI64();
      struct.setPotentialItemCountIsSet(true);
      struct.suggestedSampleRate = iprot.readDouble();
      struct.setSuggestedSampleRateIsSet(true);
      struct.suggestedSliceCount = iprot.readI64();
      struct.setSuggestedSliceCountIsSet(true);
      struct.expectedItemCount = iprot.readI64();
      struct.setExpectedItemCountIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

