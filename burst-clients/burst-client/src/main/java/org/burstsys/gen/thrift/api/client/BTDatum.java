/* Copyright Yahoo, Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms. */
package org.burstsys.gen.thrift.api.client;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * a polymorphic container for a value
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2022-03-10")
public class BTDatum extends org.apache.thrift.TUnion<BTDatum, BTDatum._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BTDatum");
  private static final org.apache.thrift.protocol.TField BOOL_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("boolVal", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField BYTE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("byteVal", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField SHORT_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("shortVal", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField INT_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("intVal", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LONG_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("longVal", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DOUBLE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleVal", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField STRING_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("stringVal", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BOOL_VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("boolVector", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField BYTE_VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("byteVector", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField SHORT_VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("shortVector", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField INT_VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("intVector", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField LONG_VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("longVector", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField DOUBLE_VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleVector", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField STRING_VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("stringVector", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField STRING_BOOL_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("stringBoolMap", org.apache.thrift.protocol.TType.MAP, (short)15);
  private static final org.apache.thrift.protocol.TField STRING_INT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("stringIntMap", org.apache.thrift.protocol.TType.MAP, (short)16);
  private static final org.apache.thrift.protocol.TField STRING_LONG_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("stringLongMap", org.apache.thrift.protocol.TType.MAP, (short)17);
  private static final org.apache.thrift.protocol.TField STRING_STRING_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("stringStringMap", org.apache.thrift.protocol.TType.MAP, (short)18);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOL_VAL((short)1, "boolVal"),
    BYTE_VAL((short)2, "byteVal"),
    SHORT_VAL((short)3, "shortVal"),
    INT_VAL((short)4, "intVal"),
    LONG_VAL((short)5, "longVal"),
    DOUBLE_VAL((short)6, "doubleVal"),
    STRING_VAL((short)7, "stringVal"),
    BOOL_VECTOR((short)8, "boolVector"),
    BYTE_VECTOR((short)9, "byteVector"),
    SHORT_VECTOR((short)10, "shortVector"),
    INT_VECTOR((short)11, "intVector"),
    LONG_VECTOR((short)12, "longVector"),
    DOUBLE_VECTOR((short)13, "doubleVector"),
    STRING_VECTOR((short)14, "stringVector"),
    STRING_BOOL_MAP((short)15, "stringBoolMap"),
    STRING_INT_MAP((short)16, "stringIntMap"),
    STRING_LONG_MAP((short)17, "stringLongMap"),
    STRING_STRING_MAP((short)18, "stringStringMap");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOL_VAL
          return BOOL_VAL;
        case 2: // BYTE_VAL
          return BYTE_VAL;
        case 3: // SHORT_VAL
          return SHORT_VAL;
        case 4: // INT_VAL
          return INT_VAL;
        case 5: // LONG_VAL
          return LONG_VAL;
        case 6: // DOUBLE_VAL
          return DOUBLE_VAL;
        case 7: // STRING_VAL
          return STRING_VAL;
        case 8: // BOOL_VECTOR
          return BOOL_VECTOR;
        case 9: // BYTE_VECTOR
          return BYTE_VECTOR;
        case 10: // SHORT_VECTOR
          return SHORT_VECTOR;
        case 11: // INT_VECTOR
          return INT_VECTOR;
        case 12: // LONG_VECTOR
          return LONG_VECTOR;
        case 13: // DOUBLE_VECTOR
          return DOUBLE_VECTOR;
        case 14: // STRING_VECTOR
          return STRING_VECTOR;
        case 15: // STRING_BOOL_MAP
          return STRING_BOOL_MAP;
        case 16: // STRING_INT_MAP
          return STRING_INT_MAP;
        case 17: // STRING_LONG_MAP
          return STRING_LONG_MAP;
        case 18: // STRING_STRING_MAP
          return STRING_STRING_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOL_VAL, new org.apache.thrift.meta_data.FieldMetaData("boolVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BYTE_VAL, new org.apache.thrift.meta_data.FieldMetaData("byteVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SHORT_VAL, new org.apache.thrift.meta_data.FieldMetaData("shortVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.INT_VAL, new org.apache.thrift.meta_data.FieldMetaData("intVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LONG_VAL, new org.apache.thrift.meta_data.FieldMetaData("longVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_VAL, new org.apache.thrift.meta_data.FieldMetaData("doubleVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING_VAL, new org.apache.thrift.meta_data.FieldMetaData("stringVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOOL_VECTOR, new org.apache.thrift.meta_data.FieldMetaData("boolVector", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.BYTE_VECTOR, new org.apache.thrift.meta_data.FieldMetaData("byteVector", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.SHORT_VECTOR, new org.apache.thrift.meta_data.FieldMetaData("shortVector", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.INT_VECTOR, new org.apache.thrift.meta_data.FieldMetaData("intVector", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LONG_VECTOR, new org.apache.thrift.meta_data.FieldMetaData("longVector", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DOUBLE_VECTOR, new org.apache.thrift.meta_data.FieldMetaData("doubleVector", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.STRING_VECTOR, new org.apache.thrift.meta_data.FieldMetaData("stringVector", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STRING_BOOL_MAP, new org.apache.thrift.meta_data.FieldMetaData("stringBoolMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.STRING_INT_MAP, new org.apache.thrift.meta_data.FieldMetaData("stringIntMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STRING_LONG_MAP, new org.apache.thrift.meta_data.FieldMetaData("stringLongMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.STRING_STRING_MAP, new org.apache.thrift.meta_data.FieldMetaData("stringStringMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BTDatum.class, metaDataMap);
  }

  public BTDatum() {
    super();
  }

  public BTDatum(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public BTDatum(BTDatum other) {
    super(other);
  }
  public BTDatum deepCopy() {
    return new BTDatum(this);
  }

  public static BTDatum boolVal(boolean value) {
    BTDatum x = new BTDatum();
    x.setBoolVal(value);
    return x;
  }

  public static BTDatum byteVal(byte value) {
    BTDatum x = new BTDatum();
    x.setByteVal(value);
    return x;
  }

  public static BTDatum shortVal(short value) {
    BTDatum x = new BTDatum();
    x.setShortVal(value);
    return x;
  }

  public static BTDatum intVal(int value) {
    BTDatum x = new BTDatum();
    x.setIntVal(value);
    return x;
  }

  public static BTDatum longVal(long value) {
    BTDatum x = new BTDatum();
    x.setLongVal(value);
    return x;
  }

  public static BTDatum doubleVal(double value) {
    BTDatum x = new BTDatum();
    x.setDoubleVal(value);
    return x;
  }

  public static BTDatum stringVal(java.lang.String value) {
    BTDatum x = new BTDatum();
    x.setStringVal(value);
    return x;
  }

  public static BTDatum boolVector(java.util.List<java.lang.Boolean> value) {
    BTDatum x = new BTDatum();
    x.setBoolVector(value);
    return x;
  }

  public static BTDatum byteVector(java.util.List<java.lang.Byte> value) {
    BTDatum x = new BTDatum();
    x.setByteVector(value);
    return x;
  }

  public static BTDatum shortVector(java.util.List<java.lang.Short> value) {
    BTDatum x = new BTDatum();
    x.setShortVector(value);
    return x;
  }

  public static BTDatum intVector(java.util.List<java.lang.Integer> value) {
    BTDatum x = new BTDatum();
    x.setIntVector(value);
    return x;
  }

  public static BTDatum longVector(java.util.List<java.lang.Long> value) {
    BTDatum x = new BTDatum();
    x.setLongVector(value);
    return x;
  }

  public static BTDatum doubleVector(java.util.List<java.lang.Double> value) {
    BTDatum x = new BTDatum();
    x.setDoubleVector(value);
    return x;
  }

  public static BTDatum stringVector(java.util.List<java.lang.String> value) {
    BTDatum x = new BTDatum();
    x.setStringVector(value);
    return x;
  }

  public static BTDatum stringBoolMap(java.util.Map<java.lang.String,java.lang.Boolean> value) {
    BTDatum x = new BTDatum();
    x.setStringBoolMap(value);
    return x;
  }

  public static BTDatum stringIntMap(java.util.Map<java.lang.String,java.lang.Integer> value) {
    BTDatum x = new BTDatum();
    x.setStringIntMap(value);
    return x;
  }

  public static BTDatum stringLongMap(java.util.Map<java.lang.String,java.lang.Long> value) {
    BTDatum x = new BTDatum();
    x.setStringLongMap(value);
    return x;
  }

  public static BTDatum stringStringMap(java.util.Map<java.lang.String,java.lang.String> value) {
    BTDatum x = new BTDatum();
    x.setStringStringMap(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case BOOL_VAL:
        if (value instanceof java.lang.Boolean) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Boolean for field 'boolVal', but got " + value.getClass().getSimpleName());
      case BYTE_VAL:
        if (value instanceof java.lang.Byte) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Byte for field 'byteVal', but got " + value.getClass().getSimpleName());
      case SHORT_VAL:
        if (value instanceof java.lang.Short) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Short for field 'shortVal', but got " + value.getClass().getSimpleName());
      case INT_VAL:
        if (value instanceof java.lang.Integer) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Integer for field 'intVal', but got " + value.getClass().getSimpleName());
      case LONG_VAL:
        if (value instanceof java.lang.Long) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Long for field 'longVal', but got " + value.getClass().getSimpleName());
      case DOUBLE_VAL:
        if (value instanceof java.lang.Double) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Double for field 'doubleVal', but got " + value.getClass().getSimpleName());
      case STRING_VAL:
        if (value instanceof java.lang.String) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.String for field 'stringVal', but got " + value.getClass().getSimpleName());
      case BOOL_VECTOR:
        if (value instanceof java.util.List) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.List<java.lang.Boolean> for field 'boolVector', but got " + value.getClass().getSimpleName());
      case BYTE_VECTOR:
        if (value instanceof java.util.List) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.List<java.lang.Byte> for field 'byteVector', but got " + value.getClass().getSimpleName());
      case SHORT_VECTOR:
        if (value instanceof java.util.List) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.List<java.lang.Short> for field 'shortVector', but got " + value.getClass().getSimpleName());
      case INT_VECTOR:
        if (value instanceof java.util.List) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.List<java.lang.Integer> for field 'intVector', but got " + value.getClass().getSimpleName());
      case LONG_VECTOR:
        if (value instanceof java.util.List) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.List<java.lang.Long> for field 'longVector', but got " + value.getClass().getSimpleName());
      case DOUBLE_VECTOR:
        if (value instanceof java.util.List) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.List<java.lang.Double> for field 'doubleVector', but got " + value.getClass().getSimpleName());
      case STRING_VECTOR:
        if (value instanceof java.util.List) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.List<java.lang.String> for field 'stringVector', but got " + value.getClass().getSimpleName());
      case STRING_BOOL_MAP:
        if (value instanceof java.util.Map) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.Map<java.lang.String,java.lang.Boolean> for field 'stringBoolMap', but got " + value.getClass().getSimpleName());
      case STRING_INT_MAP:
        if (value instanceof java.util.Map) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.Map<java.lang.String,java.lang.Integer> for field 'stringIntMap', but got " + value.getClass().getSimpleName());
      case STRING_LONG_MAP:
        if (value instanceof java.util.Map) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.Map<java.lang.String,java.lang.Long> for field 'stringLongMap', but got " + value.getClass().getSimpleName());
      case STRING_STRING_MAP:
        if (value instanceof java.util.Map) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.Map<java.lang.String,java.lang.String> for field 'stringStringMap', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case BOOL_VAL:
          if (field.type == BOOL_VAL_FIELD_DESC.type) {
            java.lang.Boolean boolVal;
            boolVal = iprot.readBool();
            return boolVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BYTE_VAL:
          if (field.type == BYTE_VAL_FIELD_DESC.type) {
            java.lang.Byte byteVal;
            byteVal = iprot.readByte();
            return byteVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SHORT_VAL:
          if (field.type == SHORT_VAL_FIELD_DESC.type) {
            java.lang.Short shortVal;
            shortVal = iprot.readI16();
            return shortVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case INT_VAL:
          if (field.type == INT_VAL_FIELD_DESC.type) {
            java.lang.Integer intVal;
            intVal = iprot.readI32();
            return intVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LONG_VAL:
          if (field.type == LONG_VAL_FIELD_DESC.type) {
            java.lang.Long longVal;
            longVal = iprot.readI64();
            return longVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DOUBLE_VAL:
          if (field.type == DOUBLE_VAL_FIELD_DESC.type) {
            java.lang.Double doubleVal;
            doubleVal = iprot.readDouble();
            return doubleVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_VAL:
          if (field.type == STRING_VAL_FIELD_DESC.type) {
            java.lang.String stringVal;
            stringVal = iprot.readString();
            return stringVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BOOL_VECTOR:
          if (field.type == BOOL_VECTOR_FIELD_DESC.type) {
            java.util.List<java.lang.Boolean> boolVector;
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              boolVector = new java.util.ArrayList<java.lang.Boolean>(_list0.size);
              boolean _elem1;
              for (int _i2 = 0; _i2 < _list0.size; ++_i2)
              {
                _elem1 = iprot.readBool();
                boolVector.add(_elem1);
              }
              iprot.readListEnd();
            }
            return boolVector;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BYTE_VECTOR:
          if (field.type == BYTE_VECTOR_FIELD_DESC.type) {
            java.util.List<java.lang.Byte> byteVector;
            {
              org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
              byteVector = new java.util.ArrayList<java.lang.Byte>(_list3.size);
              byte _elem4;
              for (int _i5 = 0; _i5 < _list3.size; ++_i5)
              {
                _elem4 = iprot.readByte();
                byteVector.add(_elem4);
              }
              iprot.readListEnd();
            }
            return byteVector;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SHORT_VECTOR:
          if (field.type == SHORT_VECTOR_FIELD_DESC.type) {
            java.util.List<java.lang.Short> shortVector;
            {
              org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
              shortVector = new java.util.ArrayList<java.lang.Short>(_list6.size);
              short _elem7;
              for (int _i8 = 0; _i8 < _list6.size; ++_i8)
              {
                _elem7 = iprot.readI16();
                shortVector.add(_elem7);
              }
              iprot.readListEnd();
            }
            return shortVector;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case INT_VECTOR:
          if (field.type == INT_VECTOR_FIELD_DESC.type) {
            java.util.List<java.lang.Integer> intVector;
            {
              org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
              intVector = new java.util.ArrayList<java.lang.Integer>(_list9.size);
              int _elem10;
              for (int _i11 = 0; _i11 < _list9.size; ++_i11)
              {
                _elem10 = iprot.readI32();
                intVector.add(_elem10);
              }
              iprot.readListEnd();
            }
            return intVector;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LONG_VECTOR:
          if (field.type == LONG_VECTOR_FIELD_DESC.type) {
            java.util.List<java.lang.Long> longVector;
            {
              org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
              longVector = new java.util.ArrayList<java.lang.Long>(_list12.size);
              long _elem13;
              for (int _i14 = 0; _i14 < _list12.size; ++_i14)
              {
                _elem13 = iprot.readI64();
                longVector.add(_elem13);
              }
              iprot.readListEnd();
            }
            return longVector;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DOUBLE_VECTOR:
          if (field.type == DOUBLE_VECTOR_FIELD_DESC.type) {
            java.util.List<java.lang.Double> doubleVector;
            {
              org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
              doubleVector = new java.util.ArrayList<java.lang.Double>(_list15.size);
              double _elem16;
              for (int _i17 = 0; _i17 < _list15.size; ++_i17)
              {
                _elem16 = iprot.readDouble();
                doubleVector.add(_elem16);
              }
              iprot.readListEnd();
            }
            return doubleVector;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_VECTOR:
          if (field.type == STRING_VECTOR_FIELD_DESC.type) {
            java.util.List<java.lang.String> stringVector;
            {
              org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
              stringVector = new java.util.ArrayList<java.lang.String>(_list18.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _elem19;
              for (int _i20 = 0; _i20 < _list18.size; ++_i20)
              {
                _elem19 = iprot.readString();
                stringVector.add(_elem19);
              }
              iprot.readListEnd();
            }
            return stringVector;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_BOOL_MAP:
          if (field.type == STRING_BOOL_MAP_FIELD_DESC.type) {
            java.util.Map<java.lang.String,java.lang.Boolean> stringBoolMap;
            {
              org.apache.thrift.protocol.TMap _map21 = iprot.readMapBegin();
              stringBoolMap = new java.util.HashMap<java.lang.String,java.lang.Boolean>(2*_map21.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _key22;
              boolean _val23;
              for (int _i24 = 0; _i24 < _map21.size; ++_i24)
              {
                _key22 = iprot.readString();
                _val23 = iprot.readBool();
                stringBoolMap.put(_key22, _val23);
              }
              iprot.readMapEnd();
            }
            return stringBoolMap;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_INT_MAP:
          if (field.type == STRING_INT_MAP_FIELD_DESC.type) {
            java.util.Map<java.lang.String,java.lang.Integer> stringIntMap;
            {
              org.apache.thrift.protocol.TMap _map25 = iprot.readMapBegin();
              stringIntMap = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map25.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _key26;
              int _val27;
              for (int _i28 = 0; _i28 < _map25.size; ++_i28)
              {
                _key26 = iprot.readString();
                _val27 = iprot.readI32();
                stringIntMap.put(_key26, _val27);
              }
              iprot.readMapEnd();
            }
            return stringIntMap;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_LONG_MAP:
          if (field.type == STRING_LONG_MAP_FIELD_DESC.type) {
            java.util.Map<java.lang.String,java.lang.Long> stringLongMap;
            {
              org.apache.thrift.protocol.TMap _map29 = iprot.readMapBegin();
              stringLongMap = new java.util.HashMap<java.lang.String,java.lang.Long>(2*_map29.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _key30;
              long _val31;
              for (int _i32 = 0; _i32 < _map29.size; ++_i32)
              {
                _key30 = iprot.readString();
                _val31 = iprot.readI64();
                stringLongMap.put(_key30, _val31);
              }
              iprot.readMapEnd();
            }
            return stringLongMap;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_STRING_MAP:
          if (field.type == STRING_STRING_MAP_FIELD_DESC.type) {
            java.util.Map<java.lang.String,java.lang.String> stringStringMap;
            {
              org.apache.thrift.protocol.TMap _map33 = iprot.readMapBegin();
              stringStringMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map33.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _key34;
              @org.apache.thrift.annotation.Nullable java.lang.String _val35;
              for (int _i36 = 0; _i36 < _map33.size; ++_i36)
              {
                _key34 = iprot.readString();
                _val35 = iprot.readString();
                stringStringMap.put(_key34, _val35);
              }
              iprot.readMapEnd();
            }
            return stringStringMap;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case BOOL_VAL:
        java.lang.Boolean boolVal = (java.lang.Boolean)value_;
        oprot.writeBool(boolVal);
        return;
      case BYTE_VAL:
        java.lang.Byte byteVal = (java.lang.Byte)value_;
        oprot.writeByte(byteVal);
        return;
      case SHORT_VAL:
        java.lang.Short shortVal = (java.lang.Short)value_;
        oprot.writeI16(shortVal);
        return;
      case INT_VAL:
        java.lang.Integer intVal = (java.lang.Integer)value_;
        oprot.writeI32(intVal);
        return;
      case LONG_VAL:
        java.lang.Long longVal = (java.lang.Long)value_;
        oprot.writeI64(longVal);
        return;
      case DOUBLE_VAL:
        java.lang.Double doubleVal = (java.lang.Double)value_;
        oprot.writeDouble(doubleVal);
        return;
      case STRING_VAL:
        java.lang.String stringVal = (java.lang.String)value_;
        oprot.writeString(stringVal);
        return;
      case BOOL_VECTOR:
        java.util.List<java.lang.Boolean> boolVector = (java.util.List<java.lang.Boolean>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, boolVector.size()));
          for (boolean _iter37 : boolVector)
          {
            oprot.writeBool(_iter37);
          }
          oprot.writeListEnd();
        }
        return;
      case BYTE_VECTOR:
        java.util.List<java.lang.Byte> byteVector = (java.util.List<java.lang.Byte>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, byteVector.size()));
          for (byte _iter38 : byteVector)
          {
            oprot.writeByte(_iter38);
          }
          oprot.writeListEnd();
        }
        return;
      case SHORT_VECTOR:
        java.util.List<java.lang.Short> shortVector = (java.util.List<java.lang.Short>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, shortVector.size()));
          for (short _iter39 : shortVector)
          {
            oprot.writeI16(_iter39);
          }
          oprot.writeListEnd();
        }
        return;
      case INT_VECTOR:
        java.util.List<java.lang.Integer> intVector = (java.util.List<java.lang.Integer>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, intVector.size()));
          for (int _iter40 : intVector)
          {
            oprot.writeI32(_iter40);
          }
          oprot.writeListEnd();
        }
        return;
      case LONG_VECTOR:
        java.util.List<java.lang.Long> longVector = (java.util.List<java.lang.Long>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, longVector.size()));
          for (long _iter41 : longVector)
          {
            oprot.writeI64(_iter41);
          }
          oprot.writeListEnd();
        }
        return;
      case DOUBLE_VECTOR:
        java.util.List<java.lang.Double> doubleVector = (java.util.List<java.lang.Double>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, doubleVector.size()));
          for (double _iter42 : doubleVector)
          {
            oprot.writeDouble(_iter42);
          }
          oprot.writeListEnd();
        }
        return;
      case STRING_VECTOR:
        java.util.List<java.lang.String> stringVector = (java.util.List<java.lang.String>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, stringVector.size()));
          for (java.lang.String _iter43 : stringVector)
          {
            oprot.writeString(_iter43);
          }
          oprot.writeListEnd();
        }
        return;
      case STRING_BOOL_MAP:
        java.util.Map<java.lang.String,java.lang.Boolean> stringBoolMap = (java.util.Map<java.lang.String,java.lang.Boolean>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, stringBoolMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.Boolean> _iter44 : stringBoolMap.entrySet())
          {
            oprot.writeString(_iter44.getKey());
            oprot.writeBool(_iter44.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_INT_MAP:
        java.util.Map<java.lang.String,java.lang.Integer> stringIntMap = (java.util.Map<java.lang.String,java.lang.Integer>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, stringIntMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter45 : stringIntMap.entrySet())
          {
            oprot.writeString(_iter45.getKey());
            oprot.writeI32(_iter45.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_LONG_MAP:
        java.util.Map<java.lang.String,java.lang.Long> stringLongMap = (java.util.Map<java.lang.String,java.lang.Long>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, stringLongMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.Long> _iter46 : stringLongMap.entrySet())
          {
            oprot.writeString(_iter46.getKey());
            oprot.writeI64(_iter46.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_STRING_MAP:
        java.util.Map<java.lang.String,java.lang.String> stringStringMap = (java.util.Map<java.lang.String,java.lang.String>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, stringStringMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter47 : stringStringMap.entrySet())
          {
            oprot.writeString(_iter47.getKey());
            oprot.writeString(_iter47.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case BOOL_VAL:
          java.lang.Boolean boolVal;
          boolVal = iprot.readBool();
          return boolVal;
        case BYTE_VAL:
          java.lang.Byte byteVal;
          byteVal = iprot.readByte();
          return byteVal;
        case SHORT_VAL:
          java.lang.Short shortVal;
          shortVal = iprot.readI16();
          return shortVal;
        case INT_VAL:
          java.lang.Integer intVal;
          intVal = iprot.readI32();
          return intVal;
        case LONG_VAL:
          java.lang.Long longVal;
          longVal = iprot.readI64();
          return longVal;
        case DOUBLE_VAL:
          java.lang.Double doubleVal;
          doubleVal = iprot.readDouble();
          return doubleVal;
        case STRING_VAL:
          java.lang.String stringVal;
          stringVal = iprot.readString();
          return stringVal;
        case BOOL_VECTOR:
          java.util.List<java.lang.Boolean> boolVector;
          {
            org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
            boolVector = new java.util.ArrayList<java.lang.Boolean>(_list48.size);
            boolean _elem49;
            for (int _i50 = 0; _i50 < _list48.size; ++_i50)
            {
              _elem49 = iprot.readBool();
              boolVector.add(_elem49);
            }
            iprot.readListEnd();
          }
          return boolVector;
        case BYTE_VECTOR:
          java.util.List<java.lang.Byte> byteVector;
          {
            org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
            byteVector = new java.util.ArrayList<java.lang.Byte>(_list51.size);
            byte _elem52;
            for (int _i53 = 0; _i53 < _list51.size; ++_i53)
            {
              _elem52 = iprot.readByte();
              byteVector.add(_elem52);
            }
            iprot.readListEnd();
          }
          return byteVector;
        case SHORT_VECTOR:
          java.util.List<java.lang.Short> shortVector;
          {
            org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
            shortVector = new java.util.ArrayList<java.lang.Short>(_list54.size);
            short _elem55;
            for (int _i56 = 0; _i56 < _list54.size; ++_i56)
            {
              _elem55 = iprot.readI16();
              shortVector.add(_elem55);
            }
            iprot.readListEnd();
          }
          return shortVector;
        case INT_VECTOR:
          java.util.List<java.lang.Integer> intVector;
          {
            org.apache.thrift.protocol.TList _list57 = iprot.readListBegin();
            intVector = new java.util.ArrayList<java.lang.Integer>(_list57.size);
            int _elem58;
            for (int _i59 = 0; _i59 < _list57.size; ++_i59)
            {
              _elem58 = iprot.readI32();
              intVector.add(_elem58);
            }
            iprot.readListEnd();
          }
          return intVector;
        case LONG_VECTOR:
          java.util.List<java.lang.Long> longVector;
          {
            org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
            longVector = new java.util.ArrayList<java.lang.Long>(_list60.size);
            long _elem61;
            for (int _i62 = 0; _i62 < _list60.size; ++_i62)
            {
              _elem61 = iprot.readI64();
              longVector.add(_elem61);
            }
            iprot.readListEnd();
          }
          return longVector;
        case DOUBLE_VECTOR:
          java.util.List<java.lang.Double> doubleVector;
          {
            org.apache.thrift.protocol.TList _list63 = iprot.readListBegin();
            doubleVector = new java.util.ArrayList<java.lang.Double>(_list63.size);
            double _elem64;
            for (int _i65 = 0; _i65 < _list63.size; ++_i65)
            {
              _elem64 = iprot.readDouble();
              doubleVector.add(_elem64);
            }
            iprot.readListEnd();
          }
          return doubleVector;
        case STRING_VECTOR:
          java.util.List<java.lang.String> stringVector;
          {
            org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
            stringVector = new java.util.ArrayList<java.lang.String>(_list66.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem67;
            for (int _i68 = 0; _i68 < _list66.size; ++_i68)
            {
              _elem67 = iprot.readString();
              stringVector.add(_elem67);
            }
            iprot.readListEnd();
          }
          return stringVector;
        case STRING_BOOL_MAP:
          java.util.Map<java.lang.String,java.lang.Boolean> stringBoolMap;
          {
            org.apache.thrift.protocol.TMap _map69 = iprot.readMapBegin();
            stringBoolMap = new java.util.HashMap<java.lang.String,java.lang.Boolean>(2*_map69.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key70;
            boolean _val71;
            for (int _i72 = 0; _i72 < _map69.size; ++_i72)
            {
              _key70 = iprot.readString();
              _val71 = iprot.readBool();
              stringBoolMap.put(_key70, _val71);
            }
            iprot.readMapEnd();
          }
          return stringBoolMap;
        case STRING_INT_MAP:
          java.util.Map<java.lang.String,java.lang.Integer> stringIntMap;
          {
            org.apache.thrift.protocol.TMap _map73 = iprot.readMapBegin();
            stringIntMap = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map73.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key74;
            int _val75;
            for (int _i76 = 0; _i76 < _map73.size; ++_i76)
            {
              _key74 = iprot.readString();
              _val75 = iprot.readI32();
              stringIntMap.put(_key74, _val75);
            }
            iprot.readMapEnd();
          }
          return stringIntMap;
        case STRING_LONG_MAP:
          java.util.Map<java.lang.String,java.lang.Long> stringLongMap;
          {
            org.apache.thrift.protocol.TMap _map77 = iprot.readMapBegin();
            stringLongMap = new java.util.HashMap<java.lang.String,java.lang.Long>(2*_map77.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key78;
            long _val79;
            for (int _i80 = 0; _i80 < _map77.size; ++_i80)
            {
              _key78 = iprot.readString();
              _val79 = iprot.readI64();
              stringLongMap.put(_key78, _val79);
            }
            iprot.readMapEnd();
          }
          return stringLongMap;
        case STRING_STRING_MAP:
          java.util.Map<java.lang.String,java.lang.String> stringStringMap;
          {
            org.apache.thrift.protocol.TMap _map81 = iprot.readMapBegin();
            stringStringMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map81.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key82;
            @org.apache.thrift.annotation.Nullable java.lang.String _val83;
            for (int _i84 = 0; _i84 < _map81.size; ++_i84)
            {
              _key82 = iprot.readString();
              _val83 = iprot.readString();
              stringStringMap.put(_key82, _val83);
            }
            iprot.readMapEnd();
          }
          return stringStringMap;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case BOOL_VAL:
        java.lang.Boolean boolVal = (java.lang.Boolean)value_;
        oprot.writeBool(boolVal);
        return;
      case BYTE_VAL:
        java.lang.Byte byteVal = (java.lang.Byte)value_;
        oprot.writeByte(byteVal);
        return;
      case SHORT_VAL:
        java.lang.Short shortVal = (java.lang.Short)value_;
        oprot.writeI16(shortVal);
        return;
      case INT_VAL:
        java.lang.Integer intVal = (java.lang.Integer)value_;
        oprot.writeI32(intVal);
        return;
      case LONG_VAL:
        java.lang.Long longVal = (java.lang.Long)value_;
        oprot.writeI64(longVal);
        return;
      case DOUBLE_VAL:
        java.lang.Double doubleVal = (java.lang.Double)value_;
        oprot.writeDouble(doubleVal);
        return;
      case STRING_VAL:
        java.lang.String stringVal = (java.lang.String)value_;
        oprot.writeString(stringVal);
        return;
      case BOOL_VECTOR:
        java.util.List<java.lang.Boolean> boolVector = (java.util.List<java.lang.Boolean>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, boolVector.size()));
          for (boolean _iter85 : boolVector)
          {
            oprot.writeBool(_iter85);
          }
          oprot.writeListEnd();
        }
        return;
      case BYTE_VECTOR:
        java.util.List<java.lang.Byte> byteVector = (java.util.List<java.lang.Byte>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, byteVector.size()));
          for (byte _iter86 : byteVector)
          {
            oprot.writeByte(_iter86);
          }
          oprot.writeListEnd();
        }
        return;
      case SHORT_VECTOR:
        java.util.List<java.lang.Short> shortVector = (java.util.List<java.lang.Short>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, shortVector.size()));
          for (short _iter87 : shortVector)
          {
            oprot.writeI16(_iter87);
          }
          oprot.writeListEnd();
        }
        return;
      case INT_VECTOR:
        java.util.List<java.lang.Integer> intVector = (java.util.List<java.lang.Integer>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, intVector.size()));
          for (int _iter88 : intVector)
          {
            oprot.writeI32(_iter88);
          }
          oprot.writeListEnd();
        }
        return;
      case LONG_VECTOR:
        java.util.List<java.lang.Long> longVector = (java.util.List<java.lang.Long>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, longVector.size()));
          for (long _iter89 : longVector)
          {
            oprot.writeI64(_iter89);
          }
          oprot.writeListEnd();
        }
        return;
      case DOUBLE_VECTOR:
        java.util.List<java.lang.Double> doubleVector = (java.util.List<java.lang.Double>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, doubleVector.size()));
          for (double _iter90 : doubleVector)
          {
            oprot.writeDouble(_iter90);
          }
          oprot.writeListEnd();
        }
        return;
      case STRING_VECTOR:
        java.util.List<java.lang.String> stringVector = (java.util.List<java.lang.String>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, stringVector.size()));
          for (java.lang.String _iter91 : stringVector)
          {
            oprot.writeString(_iter91);
          }
          oprot.writeListEnd();
        }
        return;
      case STRING_BOOL_MAP:
        java.util.Map<java.lang.String,java.lang.Boolean> stringBoolMap = (java.util.Map<java.lang.String,java.lang.Boolean>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, stringBoolMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.Boolean> _iter92 : stringBoolMap.entrySet())
          {
            oprot.writeString(_iter92.getKey());
            oprot.writeBool(_iter92.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_INT_MAP:
        java.util.Map<java.lang.String,java.lang.Integer> stringIntMap = (java.util.Map<java.lang.String,java.lang.Integer>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, stringIntMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter93 : stringIntMap.entrySet())
          {
            oprot.writeString(_iter93.getKey());
            oprot.writeI32(_iter93.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_LONG_MAP:
        java.util.Map<java.lang.String,java.lang.Long> stringLongMap = (java.util.Map<java.lang.String,java.lang.Long>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, stringLongMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.Long> _iter94 : stringLongMap.entrySet())
          {
            oprot.writeString(_iter94.getKey());
            oprot.writeI64(_iter94.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_STRING_MAP:
        java.util.Map<java.lang.String,java.lang.String> stringStringMap = (java.util.Map<java.lang.String,java.lang.String>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, stringStringMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter95 : stringStringMap.entrySet())
          {
            oprot.writeString(_iter95.getKey());
            oprot.writeString(_iter95.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case BOOL_VAL:
        return BOOL_VAL_FIELD_DESC;
      case BYTE_VAL:
        return BYTE_VAL_FIELD_DESC;
      case SHORT_VAL:
        return SHORT_VAL_FIELD_DESC;
      case INT_VAL:
        return INT_VAL_FIELD_DESC;
      case LONG_VAL:
        return LONG_VAL_FIELD_DESC;
      case DOUBLE_VAL:
        return DOUBLE_VAL_FIELD_DESC;
      case STRING_VAL:
        return STRING_VAL_FIELD_DESC;
      case BOOL_VECTOR:
        return BOOL_VECTOR_FIELD_DESC;
      case BYTE_VECTOR:
        return BYTE_VECTOR_FIELD_DESC;
      case SHORT_VECTOR:
        return SHORT_VECTOR_FIELD_DESC;
      case INT_VECTOR:
        return INT_VECTOR_FIELD_DESC;
      case LONG_VECTOR:
        return LONG_VECTOR_FIELD_DESC;
      case DOUBLE_VECTOR:
        return DOUBLE_VECTOR_FIELD_DESC;
      case STRING_VECTOR:
        return STRING_VECTOR_FIELD_DESC;
      case STRING_BOOL_MAP:
        return STRING_BOOL_MAP_FIELD_DESC;
      case STRING_INT_MAP:
        return STRING_INT_MAP_FIELD_DESC;
      case STRING_LONG_MAP:
        return STRING_LONG_MAP_FIELD_DESC;
      case STRING_STRING_MAP:
        return STRING_STRING_MAP_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public boolean getBoolVal() {
    if (getSetField() == _Fields.BOOL_VAL) {
      return (java.lang.Boolean)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'boolVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBoolVal(boolean value) {
    setField_ = _Fields.BOOL_VAL;
    value_ = value;
  }

  public byte getByteVal() {
    if (getSetField() == _Fields.BYTE_VAL) {
      return (java.lang.Byte)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'byteVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setByteVal(byte value) {
    setField_ = _Fields.BYTE_VAL;
    value_ = value;
  }

  public short getShortVal() {
    if (getSetField() == _Fields.SHORT_VAL) {
      return (java.lang.Short)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'shortVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setShortVal(short value) {
    setField_ = _Fields.SHORT_VAL;
    value_ = value;
  }

  public int getIntVal() {
    if (getSetField() == _Fields.INT_VAL) {
      return (java.lang.Integer)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'intVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setIntVal(int value) {
    setField_ = _Fields.INT_VAL;
    value_ = value;
  }

  public long getLongVal() {
    if (getSetField() == _Fields.LONG_VAL) {
      return (java.lang.Long)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'longVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLongVal(long value) {
    setField_ = _Fields.LONG_VAL;
    value_ = value;
  }

  public double getDoubleVal() {
    if (getSetField() == _Fields.DOUBLE_VAL) {
      return (java.lang.Double)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'doubleVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDoubleVal(double value) {
    setField_ = _Fields.DOUBLE_VAL;
    value_ = value;
  }

  public java.lang.String getStringVal() {
    if (getSetField() == _Fields.STRING_VAL) {
      return (java.lang.String)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'stringVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringVal(java.lang.String value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.STRING_VAL;
    value_ = value;
  }

  public java.util.List<java.lang.Boolean> getBoolVector() {
    if (getSetField() == _Fields.BOOL_VECTOR) {
      return (java.util.List<java.lang.Boolean>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'boolVector' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBoolVector(java.util.List<java.lang.Boolean> value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.BOOL_VECTOR;
    value_ = value;
  }

  public java.util.List<java.lang.Byte> getByteVector() {
    if (getSetField() == _Fields.BYTE_VECTOR) {
      return (java.util.List<java.lang.Byte>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'byteVector' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setByteVector(java.util.List<java.lang.Byte> value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.BYTE_VECTOR;
    value_ = value;
  }

  public java.util.List<java.lang.Short> getShortVector() {
    if (getSetField() == _Fields.SHORT_VECTOR) {
      return (java.util.List<java.lang.Short>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'shortVector' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setShortVector(java.util.List<java.lang.Short> value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.SHORT_VECTOR;
    value_ = value;
  }

  public java.util.List<java.lang.Integer> getIntVector() {
    if (getSetField() == _Fields.INT_VECTOR) {
      return (java.util.List<java.lang.Integer>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'intVector' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setIntVector(java.util.List<java.lang.Integer> value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.INT_VECTOR;
    value_ = value;
  }

  public java.util.List<java.lang.Long> getLongVector() {
    if (getSetField() == _Fields.LONG_VECTOR) {
      return (java.util.List<java.lang.Long>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'longVector' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLongVector(java.util.List<java.lang.Long> value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.LONG_VECTOR;
    value_ = value;
  }

  public java.util.List<java.lang.Double> getDoubleVector() {
    if (getSetField() == _Fields.DOUBLE_VECTOR) {
      return (java.util.List<java.lang.Double>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'doubleVector' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDoubleVector(java.util.List<java.lang.Double> value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.DOUBLE_VECTOR;
    value_ = value;
  }

  public java.util.List<java.lang.String> getStringVector() {
    if (getSetField() == _Fields.STRING_VECTOR) {
      return (java.util.List<java.lang.String>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'stringVector' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringVector(java.util.List<java.lang.String> value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.STRING_VECTOR;
    value_ = value;
  }

  public java.util.Map<java.lang.String,java.lang.Boolean> getStringBoolMap() {
    if (getSetField() == _Fields.STRING_BOOL_MAP) {
      return (java.util.Map<java.lang.String,java.lang.Boolean>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'stringBoolMap' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringBoolMap(java.util.Map<java.lang.String,java.lang.Boolean> value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.STRING_BOOL_MAP;
    value_ = value;
  }

  public java.util.Map<java.lang.String,java.lang.Integer> getStringIntMap() {
    if (getSetField() == _Fields.STRING_INT_MAP) {
      return (java.util.Map<java.lang.String,java.lang.Integer>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'stringIntMap' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringIntMap(java.util.Map<java.lang.String,java.lang.Integer> value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.STRING_INT_MAP;
    value_ = value;
  }

  public java.util.Map<java.lang.String,java.lang.Long> getStringLongMap() {
    if (getSetField() == _Fields.STRING_LONG_MAP) {
      return (java.util.Map<java.lang.String,java.lang.Long>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'stringLongMap' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringLongMap(java.util.Map<java.lang.String,java.lang.Long> value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.STRING_LONG_MAP;
    value_ = value;
  }

  public java.util.Map<java.lang.String,java.lang.String> getStringStringMap() {
    if (getSetField() == _Fields.STRING_STRING_MAP) {
      return (java.util.Map<java.lang.String,java.lang.String>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'stringStringMap' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringStringMap(java.util.Map<java.lang.String,java.lang.String> value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.STRING_STRING_MAP;
    value_ = value;
  }

  public boolean isSetBoolVal() {
    return setField_ == _Fields.BOOL_VAL;
  }


  public boolean isSetByteVal() {
    return setField_ == _Fields.BYTE_VAL;
  }


  public boolean isSetShortVal() {
    return setField_ == _Fields.SHORT_VAL;
  }


  public boolean isSetIntVal() {
    return setField_ == _Fields.INT_VAL;
  }


  public boolean isSetLongVal() {
    return setField_ == _Fields.LONG_VAL;
  }


  public boolean isSetDoubleVal() {
    return setField_ == _Fields.DOUBLE_VAL;
  }


  public boolean isSetStringVal() {
    return setField_ == _Fields.STRING_VAL;
  }


  public boolean isSetBoolVector() {
    return setField_ == _Fields.BOOL_VECTOR;
  }


  public boolean isSetByteVector() {
    return setField_ == _Fields.BYTE_VECTOR;
  }


  public boolean isSetShortVector() {
    return setField_ == _Fields.SHORT_VECTOR;
  }


  public boolean isSetIntVector() {
    return setField_ == _Fields.INT_VECTOR;
  }


  public boolean isSetLongVector() {
    return setField_ == _Fields.LONG_VECTOR;
  }


  public boolean isSetDoubleVector() {
    return setField_ == _Fields.DOUBLE_VECTOR;
  }


  public boolean isSetStringVector() {
    return setField_ == _Fields.STRING_VECTOR;
  }


  public boolean isSetStringBoolMap() {
    return setField_ == _Fields.STRING_BOOL_MAP;
  }


  public boolean isSetStringIntMap() {
    return setField_ == _Fields.STRING_INT_MAP;
  }


  public boolean isSetStringLongMap() {
    return setField_ == _Fields.STRING_LONG_MAP;
  }


  public boolean isSetStringStringMap() {
    return setField_ == _Fields.STRING_STRING_MAP;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof BTDatum) {
      return equals((BTDatum)other);
    } else {
      return false;
    }
  }

  public boolean equals(BTDatum other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(BTDatum other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
