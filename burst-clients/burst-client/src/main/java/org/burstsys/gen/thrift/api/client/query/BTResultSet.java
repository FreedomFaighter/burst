/* Copyright Yahoo, Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms. */
package org.burstsys.gen.thrift.api.client.query;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2022-03-10")
public class BTResultSet implements org.apache.thrift.TBase<BTResultSet, BTResultSet._Fields>, java.io.Serializable, Cloneable, Comparable<BTResultSet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BTResultSet");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField META_FIELD_DESC = new org.apache.thrift.protocol.TField("meta", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("columnNames", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField COLUMN_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("columnTypes", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BTResultSetStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BTResultSetTupleSchemeFactory();

  /**
   * The name of the query that produced the result set (generated if not provided by the user)
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  /**
   * Metadata about the result set
   */
  public @org.apache.thrift.annotation.Nullable BTResultSetMeta meta; // required
  /**
   * The list of column names in the order they appear in each row
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> columnNames; // required
  /**
   * The list of datatypes for each cell in the row
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<org.burstsys.gen.thrift.api.client.BTDataType> columnTypes; // required
  /**
   * A list of rows, which is a list of cells
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<BTCell>> rows; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The name of the query that produced the result set (generated if not provided by the user)
     */
    NAME((short)1, "name"),
    /**
     * Metadata about the result set
     */
    META((short)2, "meta"),
    /**
     * The list of column names in the order they appear in each row
     */
    COLUMN_NAMES((short)3, "columnNames"),
    /**
     * The list of datatypes for each cell in the row
     */
    COLUMN_TYPES((short)4, "columnTypes"),
    /**
     * A list of rows, which is a list of cells
     */
    ROWS((short)5, "rows");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // META
          return META;
        case 3: // COLUMN_NAMES
          return COLUMN_NAMES;
        case 4: // COLUMN_TYPES
          return COLUMN_TYPES;
        case 5: // ROWS
          return ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.META, new org.apache.thrift.meta_data.FieldMetaData("meta", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BTResultSetMeta.class)));
    tmpMap.put(_Fields.COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("columnNames", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COLUMN_TYPES, new org.apache.thrift.meta_data.FieldMetaData("columnTypes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.burstsys.gen.thrift.api.client.BTDataType.class))));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BTCell.class)))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BTResultSet.class, metaDataMap);
  }

  public BTResultSet() {
  }

  public BTResultSet(
    java.lang.String name,
    BTResultSetMeta meta,
    java.util.List<java.lang.String> columnNames,
    java.util.List<org.burstsys.gen.thrift.api.client.BTDataType> columnTypes,
    java.util.List<java.util.List<BTCell>> rows)
  {
    this();
    this.name = name;
    this.meta = meta;
    this.columnNames = columnNames;
    this.columnTypes = columnTypes;
    this.rows = rows;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BTResultSet(BTResultSet other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMeta()) {
      this.meta = new BTResultSetMeta(other.meta);
    }
    if (other.isSetColumnNames()) {
      java.util.List<java.lang.String> __this__columnNames = new java.util.ArrayList<java.lang.String>(other.columnNames);
      this.columnNames = __this__columnNames;
    }
    if (other.isSetColumnTypes()) {
      java.util.List<org.burstsys.gen.thrift.api.client.BTDataType> __this__columnTypes = new java.util.ArrayList<org.burstsys.gen.thrift.api.client.BTDataType>(other.columnTypes.size());
      for (org.burstsys.gen.thrift.api.client.BTDataType other_element : other.columnTypes) {
        __this__columnTypes.add(other_element);
      }
      this.columnTypes = __this__columnTypes;
    }
    if (other.isSetRows()) {
      java.util.List<java.util.List<BTCell>> __this__rows = new java.util.ArrayList<java.util.List<BTCell>>(other.rows.size());
      for (java.util.List<BTCell> other_element : other.rows) {
        java.util.List<BTCell> __this__rows_copy = new java.util.ArrayList<BTCell>(other_element.size());
        for (BTCell other_element_element : other_element) {
          __this__rows_copy.add(new BTCell(other_element_element));
        }
        __this__rows.add(__this__rows_copy);
      }
      this.rows = __this__rows;
    }
  }

  public BTResultSet deepCopy() {
    return new BTResultSet(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.meta = null;
    this.columnNames = null;
    this.columnTypes = null;
    this.rows = null;
  }

  /**
   * The name of the query that produced the result set (generated if not provided by the user)
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  /**
   * The name of the query that produced the result set (generated if not provided by the user)
   */
  public BTResultSet setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * Metadata about the result set
   */
  @org.apache.thrift.annotation.Nullable
  public BTResultSetMeta getMeta() {
    return this.meta;
  }

  /**
   * Metadata about the result set
   */
  public BTResultSet setMeta(@org.apache.thrift.annotation.Nullable BTResultSetMeta meta) {
    this.meta = meta;
    return this;
  }

  public void unsetMeta() {
    this.meta = null;
  }

  /** Returns true if field meta is set (has been assigned a value) and false otherwise */
  public boolean isSetMeta() {
    return this.meta != null;
  }

  public void setMetaIsSet(boolean value) {
    if (!value) {
      this.meta = null;
    }
  }

  public int getColumnNamesSize() {
    return (this.columnNames == null) ? 0 : this.columnNames.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getColumnNamesIterator() {
    return (this.columnNames == null) ? null : this.columnNames.iterator();
  }

  public void addToColumnNames(java.lang.String elem) {
    if (this.columnNames == null) {
      this.columnNames = new java.util.ArrayList<java.lang.String>();
    }
    this.columnNames.add(elem);
  }

  /**
   * The list of column names in the order they appear in each row
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getColumnNames() {
    return this.columnNames;
  }

  /**
   * The list of column names in the order they appear in each row
   */
  public BTResultSet setColumnNames(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> columnNames) {
    this.columnNames = columnNames;
    return this;
  }

  public void unsetColumnNames() {
    this.columnNames = null;
  }

  /** Returns true if field columnNames is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnNames() {
    return this.columnNames != null;
  }

  public void setColumnNamesIsSet(boolean value) {
    if (!value) {
      this.columnNames = null;
    }
  }

  public int getColumnTypesSize() {
    return (this.columnTypes == null) ? 0 : this.columnTypes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.burstsys.gen.thrift.api.client.BTDataType> getColumnTypesIterator() {
    return (this.columnTypes == null) ? null : this.columnTypes.iterator();
  }

  public void addToColumnTypes(org.burstsys.gen.thrift.api.client.BTDataType elem) {
    if (this.columnTypes == null) {
      this.columnTypes = new java.util.ArrayList<org.burstsys.gen.thrift.api.client.BTDataType>();
    }
    this.columnTypes.add(elem);
  }

  /**
   * The list of datatypes for each cell in the row
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.burstsys.gen.thrift.api.client.BTDataType> getColumnTypes() {
    return this.columnTypes;
  }

  /**
   * The list of datatypes for each cell in the row
   */
  public BTResultSet setColumnTypes(@org.apache.thrift.annotation.Nullable java.util.List<org.burstsys.gen.thrift.api.client.BTDataType> columnTypes) {
    this.columnTypes = columnTypes;
    return this;
  }

  public void unsetColumnTypes() {
    this.columnTypes = null;
  }

  /** Returns true if field columnTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnTypes() {
    return this.columnTypes != null;
  }

  public void setColumnTypesIsSet(boolean value) {
    if (!value) {
      this.columnTypes = null;
    }
  }

  public int getRowsSize() {
    return (this.rows == null) ? 0 : this.rows.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<BTCell>> getRowsIterator() {
    return (this.rows == null) ? null : this.rows.iterator();
  }

  public void addToRows(java.util.List<BTCell> elem) {
    if (this.rows == null) {
      this.rows = new java.util.ArrayList<java.util.List<BTCell>>();
    }
    this.rows.add(elem);
  }

  /**
   * A list of rows, which is a list of cells
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<BTCell>> getRows() {
    return this.rows;
  }

  /**
   * A list of rows, which is a list of cells
   */
  public BTResultSet setRows(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<BTCell>> rows) {
    this.rows = rows;
    return this;
  }

  public void unsetRows() {
    this.rows = null;
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return this.rows != null;
  }

  public void setRowsIsSet(boolean value) {
    if (!value) {
      this.rows = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case META:
      if (value == null) {
        unsetMeta();
      } else {
        setMeta((BTResultSetMeta)value);
      }
      break;

    case COLUMN_NAMES:
      if (value == null) {
        unsetColumnNames();
      } else {
        setColumnNames((java.util.List<java.lang.String>)value);
      }
      break;

    case COLUMN_TYPES:
      if (value == null) {
        unsetColumnTypes();
      } else {
        setColumnTypes((java.util.List<org.burstsys.gen.thrift.api.client.BTDataType>)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((java.util.List<java.util.List<BTCell>>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case META:
      return getMeta();

    case COLUMN_NAMES:
      return getColumnNames();

    case COLUMN_TYPES:
      return getColumnTypes();

    case ROWS:
      return getRows();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case META:
      return isSetMeta();
    case COLUMN_NAMES:
      return isSetColumnNames();
    case COLUMN_TYPES:
      return isSetColumnTypes();
    case ROWS:
      return isSetRows();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BTResultSet)
      return this.equals((BTResultSet)that);
    return false;
  }

  public boolean equals(BTResultSet that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_meta = true && this.isSetMeta();
    boolean that_present_meta = true && that.isSetMeta();
    if (this_present_meta || that_present_meta) {
      if (!(this_present_meta && that_present_meta))
        return false;
      if (!this.meta.equals(that.meta))
        return false;
    }

    boolean this_present_columnNames = true && this.isSetColumnNames();
    boolean that_present_columnNames = true && that.isSetColumnNames();
    if (this_present_columnNames || that_present_columnNames) {
      if (!(this_present_columnNames && that_present_columnNames))
        return false;
      if (!this.columnNames.equals(that.columnNames))
        return false;
    }

    boolean this_present_columnTypes = true && this.isSetColumnTypes();
    boolean that_present_columnTypes = true && that.isSetColumnTypes();
    if (this_present_columnTypes || that_present_columnTypes) {
      if (!(this_present_columnTypes && that_present_columnTypes))
        return false;
      if (!this.columnTypes.equals(that.columnTypes))
        return false;
    }

    boolean this_present_rows = true && this.isSetRows();
    boolean that_present_rows = true && that.isSetRows();
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (!this.rows.equals(that.rows))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetMeta()) ? 131071 : 524287);
    if (isSetMeta())
      hashCode = hashCode * 8191 + meta.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnNames()) ? 131071 : 524287);
    if (isSetColumnNames())
      hashCode = hashCode * 8191 + columnNames.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnTypes()) ? 131071 : 524287);
    if (isSetColumnTypes())
      hashCode = hashCode * 8191 + columnTypes.hashCode();

    hashCode = hashCode * 8191 + ((isSetRows()) ? 131071 : 524287);
    if (isSetRows())
      hashCode = hashCode * 8191 + rows.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BTResultSet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMeta()).compareTo(other.isSetMeta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meta, other.meta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetColumnNames()).compareTo(other.isSetColumnNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnNames, other.columnNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetColumnTypes()).compareTo(other.isSetColumnTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnTypes, other.columnTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BTResultSet(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("meta:");
    if (this.meta == null) {
      sb.append("null");
    } else {
      sb.append(this.meta);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnNames:");
    if (this.columnNames == null) {
      sb.append("null");
    } else {
      sb.append(this.columnNames);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnTypes:");
    if (this.columnTypes == null) {
      sb.append("null");
    } else {
      sb.append(this.columnTypes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    if (this.rows == null) {
      sb.append("null");
    } else {
      sb.append(this.rows);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (meta == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'meta' was not present! Struct: " + toString());
    }
    if (columnNames == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnNames' was not present! Struct: " + toString());
    }
    if (columnTypes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnTypes' was not present! Struct: " + toString());
    }
    if (rows == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rows' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (meta != null) {
      meta.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BTResultSetStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTResultSetStandardScheme getScheme() {
      return new BTResultSetStandardScheme();
    }
  }

  private static class BTResultSetStandardScheme extends org.apache.thrift.scheme.StandardScheme<BTResultSet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BTResultSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // META
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.meta = new BTResultSetMeta();
              struct.meta.read(iprot);
              struct.setMetaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.columnNames = new java.util.ArrayList<java.lang.String>(_list10.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = iprot.readString();
                  struct.columnNames.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setColumnNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLUMN_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list13 = iprot.readListBegin();
                struct.columnTypes = new java.util.ArrayList<org.burstsys.gen.thrift.api.client.BTDataType>(_list13.size);
                @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.BTDataType _elem14;
                for (int _i15 = 0; _i15 < _list13.size; ++_i15)
                {
                  _elem14 = org.burstsys.gen.thrift.api.client.BTDataType.findByValue(iprot.readI32());
                  if (_elem14 != null)
                  {
                    struct.columnTypes.add(_elem14);
                  }
                }
                iprot.readListEnd();
              }
              struct.setColumnTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.rows = new java.util.ArrayList<java.util.List<BTCell>>(_list16.size);
                @org.apache.thrift.annotation.Nullable java.util.List<BTCell> _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  {
                    org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                    _elem17 = new java.util.ArrayList<BTCell>(_list19.size);
                    @org.apache.thrift.annotation.Nullable BTCell _elem20;
                    for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                    {
                      _elem20 = new BTCell();
                      _elem20.read(iprot);
                      _elem17.add(_elem20);
                    }
                    iprot.readListEnd();
                  }
                  struct.rows.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BTResultSet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.meta != null) {
        oprot.writeFieldBegin(META_FIELD_DESC);
        struct.meta.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.columnNames != null) {
        oprot.writeFieldBegin(COLUMN_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columnNames.size()));
          for (java.lang.String _iter22 : struct.columnNames)
          {
            oprot.writeString(_iter22);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.columnTypes != null) {
        oprot.writeFieldBegin(COLUMN_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.columnTypes.size()));
          for (org.burstsys.gen.thrift.api.client.BTDataType _iter23 : struct.columnTypes)
          {
            oprot.writeI32(_iter23.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.rows != null) {
        oprot.writeFieldBegin(ROWS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.rows.size()));
          for (java.util.List<BTCell> _iter24 : struct.rows)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter24.size()));
              for (BTCell _iter25 : _iter24)
              {
                _iter25.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BTResultSetTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTResultSetTupleScheme getScheme() {
      return new BTResultSetTupleScheme();
    }
  }

  private static class BTResultSetTupleScheme extends org.apache.thrift.scheme.TupleScheme<BTResultSet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BTResultSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.name);
      struct.meta.write(oprot);
      {
        oprot.writeI32(struct.columnNames.size());
        for (java.lang.String _iter26 : struct.columnNames)
        {
          oprot.writeString(_iter26);
        }
      }
      {
        oprot.writeI32(struct.columnTypes.size());
        for (org.burstsys.gen.thrift.api.client.BTDataType _iter27 : struct.columnTypes)
        {
          oprot.writeI32(_iter27.getValue());
        }
      }
      {
        oprot.writeI32(struct.rows.size());
        for (java.util.List<BTCell> _iter28 : struct.rows)
        {
          {
            oprot.writeI32(_iter28.size());
            for (BTCell _iter29 : _iter28)
            {
              _iter29.write(oprot);
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BTResultSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.meta = new BTResultSetMeta();
      struct.meta.read(iprot);
      struct.setMetaIsSet(true);
      {
        org.apache.thrift.protocol.TList _list30 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.columnNames = new java.util.ArrayList<java.lang.String>(_list30.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem31;
        for (int _i32 = 0; _i32 < _list30.size; ++_i32)
        {
          _elem31 = iprot.readString();
          struct.columnNames.add(_elem31);
        }
      }
      struct.setColumnNamesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.columnTypes = new java.util.ArrayList<org.burstsys.gen.thrift.api.client.BTDataType>(_list33.size);
        @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.BTDataType _elem34;
        for (int _i35 = 0; _i35 < _list33.size; ++_i35)
        {
          _elem34 = org.burstsys.gen.thrift.api.client.BTDataType.findByValue(iprot.readI32());
          if (_elem34 != null)
          {
            struct.columnTypes.add(_elem34);
          }
        }
      }
      struct.setColumnTypesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.rows = new java.util.ArrayList<java.util.List<BTCell>>(_list36.size);
        @org.apache.thrift.annotation.Nullable java.util.List<BTCell> _elem37;
        for (int _i38 = 0; _i38 < _list36.size; ++_i38)
        {
          {
            org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            _elem37 = new java.util.ArrayList<BTCell>(_list39.size);
            @org.apache.thrift.annotation.Nullable BTCell _elem40;
            for (int _i41 = 0; _i41 < _list39.size; ++_i41)
            {
              _elem40 = new BTCell();
              _elem40.read(iprot);
              _elem37.add(_elem40);
            }
          }
          struct.rows.add(_elem37);
        }
      }
      struct.setRowsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

