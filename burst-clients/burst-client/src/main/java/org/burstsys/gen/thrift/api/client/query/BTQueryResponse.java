/* Copyright Yahoo, Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms. */
package org.burstsys.gen.thrift.api.client.query;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2022-03-10")
public class BTQueryResponse implements org.apache.thrift.TBase<BTQueryResponse, BTQueryResponse._Fields>, java.io.Serializable, Cloneable, Comparable<BTQueryResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BTQueryResponse");

  private static final org.apache.thrift.protocol.TField OUTCOME_FIELD_DESC = new org.apache.thrift.protocol.TField("outcome", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField META_FIELD_DESC = new org.apache.thrift.protocol.TField("meta", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BTQueryResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BTQueryResponseTupleSchemeFactory();

  /**
   * The outcome of the request
   */
  public @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.BTRequestOutcome outcome; // required
  /**
   * Miscellaneous metadata about the request
   */
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> meta; // required
  /**
   * The query result, if the query succeeded
   */
  public @org.apache.thrift.annotation.Nullable BTResult result; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The outcome of the request
     */
    OUTCOME((short)1, "outcome"),
    /**
     * Miscellaneous metadata about the request
     */
    META((short)2, "meta"),
    /**
     * The query result, if the query succeeded
     */
    RESULT((short)3, "result");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OUTCOME
          return OUTCOME;
        case 2: // META
          return META;
        case 3: // RESULT
          return RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.RESULT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OUTCOME, new org.apache.thrift.meta_data.FieldMetaData("outcome", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.burstsys.gen.thrift.api.client.BTRequestOutcome.class)));
    tmpMap.put(_Fields.META, new org.apache.thrift.meta_data.FieldMetaData("meta", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BTResult.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BTQueryResponse.class, metaDataMap);
  }

  public BTQueryResponse() {
  }

  public BTQueryResponse(
    org.burstsys.gen.thrift.api.client.BTRequestOutcome outcome,
    java.util.Map<java.lang.String,java.lang.String> meta)
  {
    this();
    this.outcome = outcome;
    this.meta = meta;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BTQueryResponse(BTQueryResponse other) {
    if (other.isSetOutcome()) {
      this.outcome = new org.burstsys.gen.thrift.api.client.BTRequestOutcome(other.outcome);
    }
    if (other.isSetMeta()) {
      java.util.Map<java.lang.String,java.lang.String> __this__meta = new java.util.HashMap<java.lang.String,java.lang.String>(other.meta);
      this.meta = __this__meta;
    }
    if (other.isSetResult()) {
      this.result = new BTResult(other.result);
    }
  }

  public BTQueryResponse deepCopy() {
    return new BTQueryResponse(this);
  }

  @Override
  public void clear() {
    this.outcome = null;
    this.meta = null;
    this.result = null;
  }

  /**
   * The outcome of the request
   */
  @org.apache.thrift.annotation.Nullable
  public org.burstsys.gen.thrift.api.client.BTRequestOutcome getOutcome() {
    return this.outcome;
  }

  /**
   * The outcome of the request
   */
  public BTQueryResponse setOutcome(@org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.BTRequestOutcome outcome) {
    this.outcome = outcome;
    return this;
  }

  public void unsetOutcome() {
    this.outcome = null;
  }

  /** Returns true if field outcome is set (has been assigned a value) and false otherwise */
  public boolean isSetOutcome() {
    return this.outcome != null;
  }

  public void setOutcomeIsSet(boolean value) {
    if (!value) {
      this.outcome = null;
    }
  }

  public int getMetaSize() {
    return (this.meta == null) ? 0 : this.meta.size();
  }

  public void putToMeta(java.lang.String key, java.lang.String val) {
    if (this.meta == null) {
      this.meta = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.meta.put(key, val);
  }

  /**
   * Miscellaneous metadata about the request
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getMeta() {
    return this.meta;
  }

  /**
   * Miscellaneous metadata about the request
   */
  public BTQueryResponse setMeta(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> meta) {
    this.meta = meta;
    return this;
  }

  public void unsetMeta() {
    this.meta = null;
  }

  /** Returns true if field meta is set (has been assigned a value) and false otherwise */
  public boolean isSetMeta() {
    return this.meta != null;
  }

  public void setMetaIsSet(boolean value) {
    if (!value) {
      this.meta = null;
    }
  }

  /**
   * The query result, if the query succeeded
   */
  @org.apache.thrift.annotation.Nullable
  public BTResult getResult() {
    return this.result;
  }

  /**
   * The query result, if the query succeeded
   */
  public BTQueryResponse setResult(@org.apache.thrift.annotation.Nullable BTResult result) {
    this.result = result;
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case OUTCOME:
      if (value == null) {
        unsetOutcome();
      } else {
        setOutcome((org.burstsys.gen.thrift.api.client.BTRequestOutcome)value);
      }
      break;

    case META:
      if (value == null) {
        unsetMeta();
      } else {
        setMeta((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((BTResult)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OUTCOME:
      return getOutcome();

    case META:
      return getMeta();

    case RESULT:
      return getResult();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OUTCOME:
      return isSetOutcome();
    case META:
      return isSetMeta();
    case RESULT:
      return isSetResult();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BTQueryResponse)
      return this.equals((BTQueryResponse)that);
    return false;
  }

  public boolean equals(BTQueryResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_outcome = true && this.isSetOutcome();
    boolean that_present_outcome = true && that.isSetOutcome();
    if (this_present_outcome || that_present_outcome) {
      if (!(this_present_outcome && that_present_outcome))
        return false;
      if (!this.outcome.equals(that.outcome))
        return false;
    }

    boolean this_present_meta = true && this.isSetMeta();
    boolean that_present_meta = true && that.isSetMeta();
    if (this_present_meta || that_present_meta) {
      if (!(this_present_meta && that_present_meta))
        return false;
      if (!this.meta.equals(that.meta))
        return false;
    }

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOutcome()) ? 131071 : 524287);
    if (isSetOutcome())
      hashCode = hashCode * 8191 + outcome.hashCode();

    hashCode = hashCode * 8191 + ((isSetMeta()) ? 131071 : 524287);
    if (isSetMeta())
      hashCode = hashCode * 8191 + meta.hashCode();

    hashCode = hashCode * 8191 + ((isSetResult()) ? 131071 : 524287);
    if (isSetResult())
      hashCode = hashCode * 8191 + result.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BTQueryResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOutcome()).compareTo(other.isSetOutcome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutcome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outcome, other.outcome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMeta()).compareTo(other.isSetMeta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meta, other.meta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BTQueryResponse(");
    boolean first = true;

    sb.append("outcome:");
    if (this.outcome == null) {
      sb.append("null");
    } else {
      sb.append(this.outcome);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("meta:");
    if (this.meta == null) {
      sb.append("null");
    } else {
      sb.append(this.meta);
    }
    first = false;
    if (isSetResult()) {
      if (!first) sb.append(", ");
      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        sb.append(this.result);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (outcome == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'outcome' was not present! Struct: " + toString());
    }
    if (meta == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'meta' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (outcome != null) {
      outcome.validate();
    }
    if (result != null) {
      result.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BTQueryResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTQueryResponseStandardScheme getScheme() {
      return new BTQueryResponseStandardScheme();
    }
  }

  private static class BTQueryResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<BTQueryResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BTQueryResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OUTCOME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.outcome = new org.burstsys.gen.thrift.api.client.BTRequestOutcome();
              struct.outcome.read(iprot);
              struct.setOutcomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // META
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map52 = iprot.readMapBegin();
                struct.meta = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map52.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key53;
                @org.apache.thrift.annotation.Nullable java.lang.String _val54;
                for (int _i55 = 0; _i55 < _map52.size; ++_i55)
                {
                  _key53 = iprot.readString();
                  _val54 = iprot.readString();
                  struct.meta.put(_key53, _val54);
                }
                iprot.readMapEnd();
              }
              struct.setMetaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.result = new BTResult();
              struct.result.read(iprot);
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BTQueryResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.outcome != null) {
        oprot.writeFieldBegin(OUTCOME_FIELD_DESC);
        struct.outcome.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.meta != null) {
        oprot.writeFieldBegin(META_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.meta.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter56 : struct.meta.entrySet())
          {
            oprot.writeString(_iter56.getKey());
            oprot.writeString(_iter56.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.result != null) {
        if (struct.isSetResult()) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          struct.result.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BTQueryResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTQueryResponseTupleScheme getScheme() {
      return new BTQueryResponseTupleScheme();
    }
  }

  private static class BTQueryResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<BTQueryResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BTQueryResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.outcome.write(oprot);
      {
        oprot.writeI32(struct.meta.size());
        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter57 : struct.meta.entrySet())
        {
          oprot.writeString(_iter57.getKey());
          oprot.writeString(_iter57.getValue());
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetResult()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetResult()) {
        struct.result.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BTQueryResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.outcome = new org.burstsys.gen.thrift.api.client.BTRequestOutcome();
      struct.outcome.read(iprot);
      struct.setOutcomeIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map58 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.meta = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map58.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _key59;
        @org.apache.thrift.annotation.Nullable java.lang.String _val60;
        for (int _i61 = 0; _i61 < _map58.size; ++_i61)
        {
          _key59 = iprot.readString();
          _val60 = iprot.readString();
          struct.meta.put(_key59, _val60);
        }
      }
      struct.setMetaIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.result = new BTResult();
        struct.result.read(iprot);
        struct.setResultIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

