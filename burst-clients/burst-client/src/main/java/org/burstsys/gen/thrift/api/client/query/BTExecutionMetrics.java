/* Copyright Yahoo, Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms. */
package org.burstsys.gen.thrift.api.client.query;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2022-03-10")
public class BTExecutionMetrics implements org.apache.thrift.TBase<BTExecutionMetrics, BTExecutionMetrics._Fields>, java.io.Serializable, Cloneable, Comparable<BTExecutionMetrics> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BTExecutionMetrics");

  private static final org.apache.thrift.protocol.TField SCAN_TIME_NS_FIELD_DESC = new org.apache.thrift.protocol.TField("scanTimeNs", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SCAN_WORK_NS_FIELD_DESC = new org.apache.thrift.protocol.TField("scanWorkNs", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField QUERY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryCount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("rowCount", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SUCCEEDED_FIELD_DESC = new org.apache.thrift.protocol.TField("succeeded", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField LIMITED_FIELD_DESC = new org.apache.thrift.protocol.TField("limited", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField OVERFLOWED_FIELD_DESC = new org.apache.thrift.protocol.TField("overflowed", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField COMPILE_TIME_NS_FIELD_DESC = new org.apache.thrift.protocol.TField("compileTimeNs", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField CACHE_HITS_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheHits", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BTExecutionMetricsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BTExecutionMetricsTupleSchemeFactory();

  /**
   * The elapsed scan time in ns
   */
  public long scanTimeNs; // required
  /**
   * The aggregate scan time across all items
   */
  public long scanWorkNs; // required
  /**
   * The number of queries submitted
   */
  public long queryCount; // required
  /**
   * The total number of rows across all queries in the group
   */
  public long rowCount; // required
  /**
   * The total number of sucessful queries
   */
  public long succeeded; // required
  /**
   * The total number of row-limited queries
   */
  public long limited; // required
  /**
   * The total number of queries with dictionary overflows
   */
  public long overflowed; // required
  /**
   * The amount of time taken to compile the queries
   */
  public long compileTimeNs; // required
  /**
   * The number of queries that were reused from cache
   */
  public long cacheHits; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The elapsed scan time in ns
     */
    SCAN_TIME_NS((short)1, "scanTimeNs"),
    /**
     * The aggregate scan time across all items
     */
    SCAN_WORK_NS((short)2, "scanWorkNs"),
    /**
     * The number of queries submitted
     */
    QUERY_COUNT((short)3, "queryCount"),
    /**
     * The total number of rows across all queries in the group
     */
    ROW_COUNT((short)4, "rowCount"),
    /**
     * The total number of sucessful queries
     */
    SUCCEEDED((short)5, "succeeded"),
    /**
     * The total number of row-limited queries
     */
    LIMITED((short)6, "limited"),
    /**
     * The total number of queries with dictionary overflows
     */
    OVERFLOWED((short)7, "overflowed"),
    /**
     * The amount of time taken to compile the queries
     */
    COMPILE_TIME_NS((short)8, "compileTimeNs"),
    /**
     * The number of queries that were reused from cache
     */
    CACHE_HITS((short)9, "cacheHits");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCAN_TIME_NS
          return SCAN_TIME_NS;
        case 2: // SCAN_WORK_NS
          return SCAN_WORK_NS;
        case 3: // QUERY_COUNT
          return QUERY_COUNT;
        case 4: // ROW_COUNT
          return ROW_COUNT;
        case 5: // SUCCEEDED
          return SUCCEEDED;
        case 6: // LIMITED
          return LIMITED;
        case 7: // OVERFLOWED
          return OVERFLOWED;
        case 8: // COMPILE_TIME_NS
          return COMPILE_TIME_NS;
        case 9: // CACHE_HITS
          return CACHE_HITS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCANTIMENS_ISSET_ID = 0;
  private static final int __SCANWORKNS_ISSET_ID = 1;
  private static final int __QUERYCOUNT_ISSET_ID = 2;
  private static final int __ROWCOUNT_ISSET_ID = 3;
  private static final int __SUCCEEDED_ISSET_ID = 4;
  private static final int __LIMITED_ISSET_ID = 5;
  private static final int __OVERFLOWED_ISSET_ID = 6;
  private static final int __COMPILETIMENS_ISSET_ID = 7;
  private static final int __CACHEHITS_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCAN_TIME_NS, new org.apache.thrift.meta_data.FieldMetaData("scanTimeNs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCAN_WORK_NS, new org.apache.thrift.meta_data.FieldMetaData("scanWorkNs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("queryCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("rowCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUCCEEDED, new org.apache.thrift.meta_data.FieldMetaData("succeeded", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LIMITED, new org.apache.thrift.meta_data.FieldMetaData("limited", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OVERFLOWED, new org.apache.thrift.meta_data.FieldMetaData("overflowed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPILE_TIME_NS, new org.apache.thrift.meta_data.FieldMetaData("compileTimeNs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CACHE_HITS, new org.apache.thrift.meta_data.FieldMetaData("cacheHits", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BTExecutionMetrics.class, metaDataMap);
  }

  public BTExecutionMetrics() {
  }

  public BTExecutionMetrics(
    long scanTimeNs,
    long scanWorkNs,
    long queryCount,
    long rowCount,
    long succeeded,
    long limited,
    long overflowed,
    long compileTimeNs,
    long cacheHits)
  {
    this();
    this.scanTimeNs = scanTimeNs;
    setScanTimeNsIsSet(true);
    this.scanWorkNs = scanWorkNs;
    setScanWorkNsIsSet(true);
    this.queryCount = queryCount;
    setQueryCountIsSet(true);
    this.rowCount = rowCount;
    setRowCountIsSet(true);
    this.succeeded = succeeded;
    setSucceededIsSet(true);
    this.limited = limited;
    setLimitedIsSet(true);
    this.overflowed = overflowed;
    setOverflowedIsSet(true);
    this.compileTimeNs = compileTimeNs;
    setCompileTimeNsIsSet(true);
    this.cacheHits = cacheHits;
    setCacheHitsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BTExecutionMetrics(BTExecutionMetrics other) {
    __isset_bitfield = other.__isset_bitfield;
    this.scanTimeNs = other.scanTimeNs;
    this.scanWorkNs = other.scanWorkNs;
    this.queryCount = other.queryCount;
    this.rowCount = other.rowCount;
    this.succeeded = other.succeeded;
    this.limited = other.limited;
    this.overflowed = other.overflowed;
    this.compileTimeNs = other.compileTimeNs;
    this.cacheHits = other.cacheHits;
  }

  public BTExecutionMetrics deepCopy() {
    return new BTExecutionMetrics(this);
  }

  @Override
  public void clear() {
    setScanTimeNsIsSet(false);
    this.scanTimeNs = 0;
    setScanWorkNsIsSet(false);
    this.scanWorkNs = 0;
    setQueryCountIsSet(false);
    this.queryCount = 0;
    setRowCountIsSet(false);
    this.rowCount = 0;
    setSucceededIsSet(false);
    this.succeeded = 0;
    setLimitedIsSet(false);
    this.limited = 0;
    setOverflowedIsSet(false);
    this.overflowed = 0;
    setCompileTimeNsIsSet(false);
    this.compileTimeNs = 0;
    setCacheHitsIsSet(false);
    this.cacheHits = 0;
  }

  /**
   * The elapsed scan time in ns
   */
  public long getScanTimeNs() {
    return this.scanTimeNs;
  }

  /**
   * The elapsed scan time in ns
   */
  public BTExecutionMetrics setScanTimeNs(long scanTimeNs) {
    this.scanTimeNs = scanTimeNs;
    setScanTimeNsIsSet(true);
    return this;
  }

  public void unsetScanTimeNs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCANTIMENS_ISSET_ID);
  }

  /** Returns true if field scanTimeNs is set (has been assigned a value) and false otherwise */
  public boolean isSetScanTimeNs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCANTIMENS_ISSET_ID);
  }

  public void setScanTimeNsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCANTIMENS_ISSET_ID, value);
  }

  /**
   * The aggregate scan time across all items
   */
  public long getScanWorkNs() {
    return this.scanWorkNs;
  }

  /**
   * The aggregate scan time across all items
   */
  public BTExecutionMetrics setScanWorkNs(long scanWorkNs) {
    this.scanWorkNs = scanWorkNs;
    setScanWorkNsIsSet(true);
    return this;
  }

  public void unsetScanWorkNs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCANWORKNS_ISSET_ID);
  }

  /** Returns true if field scanWorkNs is set (has been assigned a value) and false otherwise */
  public boolean isSetScanWorkNs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCANWORKNS_ISSET_ID);
  }

  public void setScanWorkNsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCANWORKNS_ISSET_ID, value);
  }

  /**
   * The number of queries submitted
   */
  public long getQueryCount() {
    return this.queryCount;
  }

  /**
   * The number of queries submitted
   */
  public BTExecutionMetrics setQueryCount(long queryCount) {
    this.queryCount = queryCount;
    setQueryCountIsSet(true);
    return this;
  }

  public void unsetQueryCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERYCOUNT_ISSET_ID);
  }

  /** Returns true if field queryCount is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERYCOUNT_ISSET_ID);
  }

  public void setQueryCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERYCOUNT_ISSET_ID, value);
  }

  /**
   * The total number of rows across all queries in the group
   */
  public long getRowCount() {
    return this.rowCount;
  }

  /**
   * The total number of rows across all queries in the group
   */
  public BTExecutionMetrics setRowCount(long rowCount) {
    this.rowCount = rowCount;
    setRowCountIsSet(true);
    return this;
  }

  public void unsetRowCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROWCOUNT_ISSET_ID);
  }

  /** Returns true if field rowCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRowCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROWCOUNT_ISSET_ID);
  }

  public void setRowCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROWCOUNT_ISSET_ID, value);
  }

  /**
   * The total number of sucessful queries
   */
  public long getSucceeded() {
    return this.succeeded;
  }

  /**
   * The total number of sucessful queries
   */
  public BTExecutionMetrics setSucceeded(long succeeded) {
    this.succeeded = succeeded;
    setSucceededIsSet(true);
    return this;
  }

  public void unsetSucceeded() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCEEDED_ISSET_ID);
  }

  /** Returns true if field succeeded is set (has been assigned a value) and false otherwise */
  public boolean isSetSucceeded() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCEEDED_ISSET_ID);
  }

  public void setSucceededIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCEEDED_ISSET_ID, value);
  }

  /**
   * The total number of row-limited queries
   */
  public long getLimited() {
    return this.limited;
  }

  /**
   * The total number of row-limited queries
   */
  public BTExecutionMetrics setLimited(long limited) {
    this.limited = limited;
    setLimitedIsSet(true);
    return this;
  }

  public void unsetLimited() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMITED_ISSET_ID);
  }

  /** Returns true if field limited is set (has been assigned a value) and false otherwise */
  public boolean isSetLimited() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMITED_ISSET_ID);
  }

  public void setLimitedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMITED_ISSET_ID, value);
  }

  /**
   * The total number of queries with dictionary overflows
   */
  public long getOverflowed() {
    return this.overflowed;
  }

  /**
   * The total number of queries with dictionary overflows
   */
  public BTExecutionMetrics setOverflowed(long overflowed) {
    this.overflowed = overflowed;
    setOverflowedIsSet(true);
    return this;
  }

  public void unsetOverflowed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OVERFLOWED_ISSET_ID);
  }

  /** Returns true if field overflowed is set (has been assigned a value) and false otherwise */
  public boolean isSetOverflowed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OVERFLOWED_ISSET_ID);
  }

  public void setOverflowedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OVERFLOWED_ISSET_ID, value);
  }

  /**
   * The amount of time taken to compile the queries
   */
  public long getCompileTimeNs() {
    return this.compileTimeNs;
  }

  /**
   * The amount of time taken to compile the queries
   */
  public BTExecutionMetrics setCompileTimeNs(long compileTimeNs) {
    this.compileTimeNs = compileTimeNs;
    setCompileTimeNsIsSet(true);
    return this;
  }

  public void unsetCompileTimeNs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPILETIMENS_ISSET_ID);
  }

  /** Returns true if field compileTimeNs is set (has been assigned a value) and false otherwise */
  public boolean isSetCompileTimeNs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPILETIMENS_ISSET_ID);
  }

  public void setCompileTimeNsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPILETIMENS_ISSET_ID, value);
  }

  /**
   * The number of queries that were reused from cache
   */
  public long getCacheHits() {
    return this.cacheHits;
  }

  /**
   * The number of queries that were reused from cache
   */
  public BTExecutionMetrics setCacheHits(long cacheHits) {
    this.cacheHits = cacheHits;
    setCacheHitsIsSet(true);
    return this;
  }

  public void unsetCacheHits() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CACHEHITS_ISSET_ID);
  }

  /** Returns true if field cacheHits is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheHits() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CACHEHITS_ISSET_ID);
  }

  public void setCacheHitsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CACHEHITS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SCAN_TIME_NS:
      if (value == null) {
        unsetScanTimeNs();
      } else {
        setScanTimeNs((java.lang.Long)value);
      }
      break;

    case SCAN_WORK_NS:
      if (value == null) {
        unsetScanWorkNs();
      } else {
        setScanWorkNs((java.lang.Long)value);
      }
      break;

    case QUERY_COUNT:
      if (value == null) {
        unsetQueryCount();
      } else {
        setQueryCount((java.lang.Long)value);
      }
      break;

    case ROW_COUNT:
      if (value == null) {
        unsetRowCount();
      } else {
        setRowCount((java.lang.Long)value);
      }
      break;

    case SUCCEEDED:
      if (value == null) {
        unsetSucceeded();
      } else {
        setSucceeded((java.lang.Long)value);
      }
      break;

    case LIMITED:
      if (value == null) {
        unsetLimited();
      } else {
        setLimited((java.lang.Long)value);
      }
      break;

    case OVERFLOWED:
      if (value == null) {
        unsetOverflowed();
      } else {
        setOverflowed((java.lang.Long)value);
      }
      break;

    case COMPILE_TIME_NS:
      if (value == null) {
        unsetCompileTimeNs();
      } else {
        setCompileTimeNs((java.lang.Long)value);
      }
      break;

    case CACHE_HITS:
      if (value == null) {
        unsetCacheHits();
      } else {
        setCacheHits((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SCAN_TIME_NS:
      return getScanTimeNs();

    case SCAN_WORK_NS:
      return getScanWorkNs();

    case QUERY_COUNT:
      return getQueryCount();

    case ROW_COUNT:
      return getRowCount();

    case SUCCEEDED:
      return getSucceeded();

    case LIMITED:
      return getLimited();

    case OVERFLOWED:
      return getOverflowed();

    case COMPILE_TIME_NS:
      return getCompileTimeNs();

    case CACHE_HITS:
      return getCacheHits();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SCAN_TIME_NS:
      return isSetScanTimeNs();
    case SCAN_WORK_NS:
      return isSetScanWorkNs();
    case QUERY_COUNT:
      return isSetQueryCount();
    case ROW_COUNT:
      return isSetRowCount();
    case SUCCEEDED:
      return isSetSucceeded();
    case LIMITED:
      return isSetLimited();
    case OVERFLOWED:
      return isSetOverflowed();
    case COMPILE_TIME_NS:
      return isSetCompileTimeNs();
    case CACHE_HITS:
      return isSetCacheHits();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BTExecutionMetrics)
      return this.equals((BTExecutionMetrics)that);
    return false;
  }

  public boolean equals(BTExecutionMetrics that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_scanTimeNs = true;
    boolean that_present_scanTimeNs = true;
    if (this_present_scanTimeNs || that_present_scanTimeNs) {
      if (!(this_present_scanTimeNs && that_present_scanTimeNs))
        return false;
      if (this.scanTimeNs != that.scanTimeNs)
        return false;
    }

    boolean this_present_scanWorkNs = true;
    boolean that_present_scanWorkNs = true;
    if (this_present_scanWorkNs || that_present_scanWorkNs) {
      if (!(this_present_scanWorkNs && that_present_scanWorkNs))
        return false;
      if (this.scanWorkNs != that.scanWorkNs)
        return false;
    }

    boolean this_present_queryCount = true;
    boolean that_present_queryCount = true;
    if (this_present_queryCount || that_present_queryCount) {
      if (!(this_present_queryCount && that_present_queryCount))
        return false;
      if (this.queryCount != that.queryCount)
        return false;
    }

    boolean this_present_rowCount = true;
    boolean that_present_rowCount = true;
    if (this_present_rowCount || that_present_rowCount) {
      if (!(this_present_rowCount && that_present_rowCount))
        return false;
      if (this.rowCount != that.rowCount)
        return false;
    }

    boolean this_present_succeeded = true;
    boolean that_present_succeeded = true;
    if (this_present_succeeded || that_present_succeeded) {
      if (!(this_present_succeeded && that_present_succeeded))
        return false;
      if (this.succeeded != that.succeeded)
        return false;
    }

    boolean this_present_limited = true;
    boolean that_present_limited = true;
    if (this_present_limited || that_present_limited) {
      if (!(this_present_limited && that_present_limited))
        return false;
      if (this.limited != that.limited)
        return false;
    }

    boolean this_present_overflowed = true;
    boolean that_present_overflowed = true;
    if (this_present_overflowed || that_present_overflowed) {
      if (!(this_present_overflowed && that_present_overflowed))
        return false;
      if (this.overflowed != that.overflowed)
        return false;
    }

    boolean this_present_compileTimeNs = true;
    boolean that_present_compileTimeNs = true;
    if (this_present_compileTimeNs || that_present_compileTimeNs) {
      if (!(this_present_compileTimeNs && that_present_compileTimeNs))
        return false;
      if (this.compileTimeNs != that.compileTimeNs)
        return false;
    }

    boolean this_present_cacheHits = true;
    boolean that_present_cacheHits = true;
    if (this_present_cacheHits || that_present_cacheHits) {
      if (!(this_present_cacheHits && that_present_cacheHits))
        return false;
      if (this.cacheHits != that.cacheHits)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(scanTimeNs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(scanWorkNs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(queryCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rowCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(succeeded);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(limited);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(overflowed);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(compileTimeNs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cacheHits);

    return hashCode;
  }

  @Override
  public int compareTo(BTExecutionMetrics other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetScanTimeNs()).compareTo(other.isSetScanTimeNs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScanTimeNs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanTimeNs, other.scanTimeNs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScanWorkNs()).compareTo(other.isSetScanWorkNs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScanWorkNs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanWorkNs, other.scanWorkNs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQueryCount()).compareTo(other.isSetQueryCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryCount, other.queryCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRowCount()).compareTo(other.isSetRowCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowCount, other.rowCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSucceeded()).compareTo(other.isSetSucceeded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSucceeded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.succeeded, other.succeeded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLimited()).compareTo(other.isSetLimited());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimited()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limited, other.limited);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOverflowed()).compareTo(other.isSetOverflowed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverflowed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overflowed, other.overflowed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompileTimeNs()).compareTo(other.isSetCompileTimeNs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompileTimeNs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compileTimeNs, other.compileTimeNs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCacheHits()).compareTo(other.isSetCacheHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheHits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheHits, other.cacheHits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BTExecutionMetrics(");
    boolean first = true;

    sb.append("scanTimeNs:");
    sb.append(this.scanTimeNs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("scanWorkNs:");
    sb.append(this.scanWorkNs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryCount:");
    sb.append(this.queryCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rowCount:");
    sb.append(this.rowCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("succeeded:");
    sb.append(this.succeeded);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limited:");
    sb.append(this.limited);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overflowed:");
    sb.append(this.overflowed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("compileTimeNs:");
    sb.append(this.compileTimeNs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cacheHits:");
    sb.append(this.cacheHits);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'scanTimeNs' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'scanWorkNs' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'queryCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'rowCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'succeeded' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'limited' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'overflowed' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'compileTimeNs' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'cacheHits' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BTExecutionMetricsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTExecutionMetricsStandardScheme getScheme() {
      return new BTExecutionMetricsStandardScheme();
    }
  }

  private static class BTExecutionMetricsStandardScheme extends org.apache.thrift.scheme.StandardScheme<BTExecutionMetrics> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BTExecutionMetrics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCAN_TIME_NS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scanTimeNs = iprot.readI64();
              struct.setScanTimeNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCAN_WORK_NS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scanWorkNs = iprot.readI64();
              struct.setScanWorkNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUERY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.queryCount = iprot.readI64();
              struct.setQueryCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rowCount = iprot.readI64();
              struct.setRowCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUCCEEDED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.succeeded = iprot.readI64();
              struct.setSucceededIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LIMITED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.limited = iprot.readI64();
              struct.setLimitedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OVERFLOWED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.overflowed = iprot.readI64();
              struct.setOverflowedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMPILE_TIME_NS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.compileTimeNs = iprot.readI64();
              struct.setCompileTimeNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CACHE_HITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cacheHits = iprot.readI64();
              struct.setCacheHitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetScanTimeNs()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'scanTimeNs' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetScanWorkNs()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'scanWorkNs' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetQueryCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'queryCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRowCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rowCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSucceeded()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'succeeded' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLimited()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'limited' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOverflowed()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'overflowed' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCompileTimeNs()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'compileTimeNs' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCacheHits()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'cacheHits' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BTExecutionMetrics struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCAN_TIME_NS_FIELD_DESC);
      oprot.writeI64(struct.scanTimeNs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCAN_WORK_NS_FIELD_DESC);
      oprot.writeI64(struct.scanWorkNs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUERY_COUNT_FIELD_DESC);
      oprot.writeI64(struct.queryCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
      oprot.writeI64(struct.rowCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUCCEEDED_FIELD_DESC);
      oprot.writeI64(struct.succeeded);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMITED_FIELD_DESC);
      oprot.writeI64(struct.limited);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERFLOWED_FIELD_DESC);
      oprot.writeI64(struct.overflowed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPILE_TIME_NS_FIELD_DESC);
      oprot.writeI64(struct.compileTimeNs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CACHE_HITS_FIELD_DESC);
      oprot.writeI64(struct.cacheHits);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BTExecutionMetricsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTExecutionMetricsTupleScheme getScheme() {
      return new BTExecutionMetricsTupleScheme();
    }
  }

  private static class BTExecutionMetricsTupleScheme extends org.apache.thrift.scheme.TupleScheme<BTExecutionMetrics> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BTExecutionMetrics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.scanTimeNs);
      oprot.writeI64(struct.scanWorkNs);
      oprot.writeI64(struct.queryCount);
      oprot.writeI64(struct.rowCount);
      oprot.writeI64(struct.succeeded);
      oprot.writeI64(struct.limited);
      oprot.writeI64(struct.overflowed);
      oprot.writeI64(struct.compileTimeNs);
      oprot.writeI64(struct.cacheHits);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BTExecutionMetrics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.scanTimeNs = iprot.readI64();
      struct.setScanTimeNsIsSet(true);
      struct.scanWorkNs = iprot.readI64();
      struct.setScanWorkNsIsSet(true);
      struct.queryCount = iprot.readI64();
      struct.setQueryCountIsSet(true);
      struct.rowCount = iprot.readI64();
      struct.setRowCountIsSet(true);
      struct.succeeded = iprot.readI64();
      struct.setSucceededIsSet(true);
      struct.limited = iprot.readI64();
      struct.setLimitedIsSet(true);
      struct.overflowed = iprot.readI64();
      struct.setOverflowedIsSet(true);
      struct.compileTimeNs = iprot.readI64();
      struct.setCompileTimeNsIsSet(true);
      struct.cacheHits = iprot.readI64();
      struct.setCacheHitsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

