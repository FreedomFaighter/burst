/* Copyright Yahoo, Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms. */
package org.burstsys.gen.thrift.api.client;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2022-03-10")
public class BTBurstService {

  public interface Iface {

    /**
     * ensureDomain performs an upsert to the domain as it may exist in the catalog.
     * Any field in the spec that has a value is assumed to be an update, and any field
     * sent with a `zero value` is merged with the existing catalog value.
     * 
     * @param domain the domain that should exist in the catalog. It must specify a udk
     */
    public org.burstsys.gen.thrift.api.client.domain.BTDomainResponse ensureDomain(org.burstsys.gen.thrift.api.client.domain.BTDomain domain) throws org.apache.thrift.TException;

    /**
     * findDomain returns the domain from the catalog, if it exists.
     * 
     * @param udk the udk of the domain to fetch from the catalog.
     */
    public org.burstsys.gen.thrift.api.client.domain.BTDomainResponse findDomain(java.lang.String udk) throws org.apache.thrift.TException;

    /**
     * ensureDomainContainsView performs an upsert to the view in the specified domain, as it may exist in the catalog.
     * ensureDomainContainsView follows the same rules as ensureDomain to determine which fields are updated and
     * which fields are merged.
     * 
     * @param domainUdk the udk specifying domain in which the view should exist.
     * 
     * @param spec the view that should exist.
     */
    public org.burstsys.gen.thrift.api.client.view.BTViewResponse ensureDomainContainsView(java.lang.String domainUdk, org.burstsys.gen.thrift.api.client.view.BTView spec) throws org.apache.thrift.TException;

    /**
     * listViewsInDomain returns any views defined in the specified domain.
     * 
     * @param domainUdk the udk of the domain containing the views to be returned.
     */
    public org.burstsys.gen.thrift.api.client.view.BTViewResponse listViewsInDomain(java.lang.String domainUdk) throws org.apache.thrift.TException;

    /**
     * executeQuery runs a query
     * 
     * @param guid a unique id for the query. If present it must be of the form [a-zA-Z][a-zA-Z0-9_]{31}
     * 
     * @param domainUdk the domain to run the query over
     * 
     * @param viewUdk the view to run the query over
     * 
     * @param source the query text
     * 
     * @param timezone the timezone to use to interpret date times
     * 
     * @param params any parameter values to pass to the query
     */
    public org.burstsys.gen.thrift.api.client.query.BTQueryResponse executeQuery(java.lang.String guid, java.lang.String domainUdk, java.lang.String viewUdk, java.lang.String source, java.lang.String timezone, java.util.List<org.burstsys.gen.thrift.api.client.query.BTParameter> params) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ensureDomain(org.burstsys.gen.thrift.api.client.domain.BTDomain domain, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.domain.BTDomainResponse> resultHandler) throws org.apache.thrift.TException;

    public void findDomain(java.lang.String udk, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.domain.BTDomainResponse> resultHandler) throws org.apache.thrift.TException;

    public void ensureDomainContainsView(java.lang.String domainUdk, org.burstsys.gen.thrift.api.client.view.BTView spec, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.view.BTViewResponse> resultHandler) throws org.apache.thrift.TException;

    public void listViewsInDomain(java.lang.String domainUdk, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.view.BTViewResponse> resultHandler) throws org.apache.thrift.TException;

    public void executeQuery(java.lang.String guid, java.lang.String domainUdk, java.lang.String viewUdk, java.lang.String source, java.lang.String timezone, java.util.List<org.burstsys.gen.thrift.api.client.query.BTParameter> params, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.query.BTQueryResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public org.burstsys.gen.thrift.api.client.domain.BTDomainResponse ensureDomain(org.burstsys.gen.thrift.api.client.domain.BTDomain domain) throws org.apache.thrift.TException
    {
      send_ensureDomain(domain);
      return recv_ensureDomain();
    }

    public void send_ensureDomain(org.burstsys.gen.thrift.api.client.domain.BTDomain domain) throws org.apache.thrift.TException
    {
      ensureDomain_args args = new ensureDomain_args();
      args.setDomain(domain);
      sendBase("ensureDomain", args);
    }

    public org.burstsys.gen.thrift.api.client.domain.BTDomainResponse recv_ensureDomain() throws org.apache.thrift.TException
    {
      ensureDomain_result result = new ensureDomain_result();
      receiveBase(result, "ensureDomain");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ensureDomain failed: unknown result");
    }

    public org.burstsys.gen.thrift.api.client.domain.BTDomainResponse findDomain(java.lang.String udk) throws org.apache.thrift.TException
    {
      send_findDomain(udk);
      return recv_findDomain();
    }

    public void send_findDomain(java.lang.String udk) throws org.apache.thrift.TException
    {
      findDomain_args args = new findDomain_args();
      args.setUdk(udk);
      sendBase("findDomain", args);
    }

    public org.burstsys.gen.thrift.api.client.domain.BTDomainResponse recv_findDomain() throws org.apache.thrift.TException
    {
      findDomain_result result = new findDomain_result();
      receiveBase(result, "findDomain");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findDomain failed: unknown result");
    }

    public org.burstsys.gen.thrift.api.client.view.BTViewResponse ensureDomainContainsView(java.lang.String domainUdk, org.burstsys.gen.thrift.api.client.view.BTView spec) throws org.apache.thrift.TException
    {
      send_ensureDomainContainsView(domainUdk, spec);
      return recv_ensureDomainContainsView();
    }

    public void send_ensureDomainContainsView(java.lang.String domainUdk, org.burstsys.gen.thrift.api.client.view.BTView spec) throws org.apache.thrift.TException
    {
      ensureDomainContainsView_args args = new ensureDomainContainsView_args();
      args.setDomainUdk(domainUdk);
      args.setSpec(spec);
      sendBase("ensureDomainContainsView", args);
    }

    public org.burstsys.gen.thrift.api.client.view.BTViewResponse recv_ensureDomainContainsView() throws org.apache.thrift.TException
    {
      ensureDomainContainsView_result result = new ensureDomainContainsView_result();
      receiveBase(result, "ensureDomainContainsView");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ensureDomainContainsView failed: unknown result");
    }

    public org.burstsys.gen.thrift.api.client.view.BTViewResponse listViewsInDomain(java.lang.String domainUdk) throws org.apache.thrift.TException
    {
      send_listViewsInDomain(domainUdk);
      return recv_listViewsInDomain();
    }

    public void send_listViewsInDomain(java.lang.String domainUdk) throws org.apache.thrift.TException
    {
      listViewsInDomain_args args = new listViewsInDomain_args();
      args.setDomainUdk(domainUdk);
      sendBase("listViewsInDomain", args);
    }

    public org.burstsys.gen.thrift.api.client.view.BTViewResponse recv_listViewsInDomain() throws org.apache.thrift.TException
    {
      listViewsInDomain_result result = new listViewsInDomain_result();
      receiveBase(result, "listViewsInDomain");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listViewsInDomain failed: unknown result");
    }

    public org.burstsys.gen.thrift.api.client.query.BTQueryResponse executeQuery(java.lang.String guid, java.lang.String domainUdk, java.lang.String viewUdk, java.lang.String source, java.lang.String timezone, java.util.List<org.burstsys.gen.thrift.api.client.query.BTParameter> params) throws org.apache.thrift.TException
    {
      send_executeQuery(guid, domainUdk, viewUdk, source, timezone, params);
      return recv_executeQuery();
    }

    public void send_executeQuery(java.lang.String guid, java.lang.String domainUdk, java.lang.String viewUdk, java.lang.String source, java.lang.String timezone, java.util.List<org.burstsys.gen.thrift.api.client.query.BTParameter> params) throws org.apache.thrift.TException
    {
      executeQuery_args args = new executeQuery_args();
      args.setGuid(guid);
      args.setDomainUdk(domainUdk);
      args.setViewUdk(viewUdk);
      args.setSource(source);
      args.setTimezone(timezone);
      args.setParams(params);
      sendBase("executeQuery", args);
    }

    public org.burstsys.gen.thrift.api.client.query.BTQueryResponse recv_executeQuery() throws org.apache.thrift.TException
    {
      executeQuery_result result = new executeQuery_result();
      receiveBase(result, "executeQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "executeQuery failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ensureDomain(org.burstsys.gen.thrift.api.client.domain.BTDomain domain, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.domain.BTDomainResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ensureDomain_call method_call = new ensureDomain_call(domain, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ensureDomain_call extends org.apache.thrift.async.TAsyncMethodCall<org.burstsys.gen.thrift.api.client.domain.BTDomainResponse> {
      private org.burstsys.gen.thrift.api.client.domain.BTDomain domain;
      public ensureDomain_call(org.burstsys.gen.thrift.api.client.domain.BTDomain domain, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.domain.BTDomainResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domain = domain;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ensureDomain", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ensureDomain_args args = new ensureDomain_args();
        args.setDomain(domain);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.burstsys.gen.thrift.api.client.domain.BTDomainResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ensureDomain();
      }
    }

    public void findDomain(java.lang.String udk, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.domain.BTDomainResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findDomain_call method_call = new findDomain_call(udk, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findDomain_call extends org.apache.thrift.async.TAsyncMethodCall<org.burstsys.gen.thrift.api.client.domain.BTDomainResponse> {
      private java.lang.String udk;
      public findDomain_call(java.lang.String udk, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.domain.BTDomainResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.udk = udk;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findDomain", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findDomain_args args = new findDomain_args();
        args.setUdk(udk);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.burstsys.gen.thrift.api.client.domain.BTDomainResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findDomain();
      }
    }

    public void ensureDomainContainsView(java.lang.String domainUdk, org.burstsys.gen.thrift.api.client.view.BTView spec, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.view.BTViewResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ensureDomainContainsView_call method_call = new ensureDomainContainsView_call(domainUdk, spec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ensureDomainContainsView_call extends org.apache.thrift.async.TAsyncMethodCall<org.burstsys.gen.thrift.api.client.view.BTViewResponse> {
      private java.lang.String domainUdk;
      private org.burstsys.gen.thrift.api.client.view.BTView spec;
      public ensureDomainContainsView_call(java.lang.String domainUdk, org.burstsys.gen.thrift.api.client.view.BTView spec, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.view.BTViewResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domainUdk = domainUdk;
        this.spec = spec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ensureDomainContainsView", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ensureDomainContainsView_args args = new ensureDomainContainsView_args();
        args.setDomainUdk(domainUdk);
        args.setSpec(spec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.burstsys.gen.thrift.api.client.view.BTViewResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ensureDomainContainsView();
      }
    }

    public void listViewsInDomain(java.lang.String domainUdk, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.view.BTViewResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listViewsInDomain_call method_call = new listViewsInDomain_call(domainUdk, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listViewsInDomain_call extends org.apache.thrift.async.TAsyncMethodCall<org.burstsys.gen.thrift.api.client.view.BTViewResponse> {
      private java.lang.String domainUdk;
      public listViewsInDomain_call(java.lang.String domainUdk, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.view.BTViewResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domainUdk = domainUdk;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listViewsInDomain", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listViewsInDomain_args args = new listViewsInDomain_args();
        args.setDomainUdk(domainUdk);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.burstsys.gen.thrift.api.client.view.BTViewResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listViewsInDomain();
      }
    }

    public void executeQuery(java.lang.String guid, java.lang.String domainUdk, java.lang.String viewUdk, java.lang.String source, java.lang.String timezone, java.util.List<org.burstsys.gen.thrift.api.client.query.BTParameter> params, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.query.BTQueryResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      executeQuery_call method_call = new executeQuery_call(guid, domainUdk, viewUdk, source, timezone, params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class executeQuery_call extends org.apache.thrift.async.TAsyncMethodCall<org.burstsys.gen.thrift.api.client.query.BTQueryResponse> {
      private java.lang.String guid;
      private java.lang.String domainUdk;
      private java.lang.String viewUdk;
      private java.lang.String source;
      private java.lang.String timezone;
      private java.util.List<org.burstsys.gen.thrift.api.client.query.BTParameter> params;
      public executeQuery_call(java.lang.String guid, java.lang.String domainUdk, java.lang.String viewUdk, java.lang.String source, java.lang.String timezone, java.util.List<org.burstsys.gen.thrift.api.client.query.BTParameter> params, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.query.BTQueryResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.guid = guid;
        this.domainUdk = domainUdk;
        this.viewUdk = viewUdk;
        this.source = source;
        this.timezone = timezone;
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("executeQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        executeQuery_args args = new executeQuery_args();
        args.setGuid(guid);
        args.setDomainUdk(domainUdk);
        args.setViewUdk(viewUdk);
        args.setSource(source);
        args.setTimezone(timezone);
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.burstsys.gen.thrift.api.client.query.BTQueryResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_executeQuery();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ensureDomain", new ensureDomain());
      processMap.put("findDomain", new findDomain());
      processMap.put("ensureDomainContainsView", new ensureDomainContainsView());
      processMap.put("listViewsInDomain", new listViewsInDomain());
      processMap.put("executeQuery", new executeQuery());
      return processMap;
    }

    public static class ensureDomain<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ensureDomain_args> {
      public ensureDomain() {
        super("ensureDomain");
      }

      public ensureDomain_args getEmptyArgsInstance() {
        return new ensureDomain_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ensureDomain_result getResult(I iface, ensureDomain_args args) throws org.apache.thrift.TException {
        ensureDomain_result result = new ensureDomain_result();
        result.success = iface.ensureDomain(args.domain);
        return result;
      }
    }

    public static class findDomain<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findDomain_args> {
      public findDomain() {
        super("findDomain");
      }

      public findDomain_args getEmptyArgsInstance() {
        return new findDomain_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public findDomain_result getResult(I iface, findDomain_args args) throws org.apache.thrift.TException {
        findDomain_result result = new findDomain_result();
        result.success = iface.findDomain(args.udk);
        return result;
      }
    }

    public static class ensureDomainContainsView<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ensureDomainContainsView_args> {
      public ensureDomainContainsView() {
        super("ensureDomainContainsView");
      }

      public ensureDomainContainsView_args getEmptyArgsInstance() {
        return new ensureDomainContainsView_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ensureDomainContainsView_result getResult(I iface, ensureDomainContainsView_args args) throws org.apache.thrift.TException {
        ensureDomainContainsView_result result = new ensureDomainContainsView_result();
        result.success = iface.ensureDomainContainsView(args.domainUdk, args.spec);
        return result;
      }
    }

    public static class listViewsInDomain<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listViewsInDomain_args> {
      public listViewsInDomain() {
        super("listViewsInDomain");
      }

      public listViewsInDomain_args getEmptyArgsInstance() {
        return new listViewsInDomain_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public listViewsInDomain_result getResult(I iface, listViewsInDomain_args args) throws org.apache.thrift.TException {
        listViewsInDomain_result result = new listViewsInDomain_result();
        result.success = iface.listViewsInDomain(args.domainUdk);
        return result;
      }
    }

    public static class executeQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, executeQuery_args> {
      public executeQuery() {
        super("executeQuery");
      }

      public executeQuery_args getEmptyArgsInstance() {
        return new executeQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public executeQuery_result getResult(I iface, executeQuery_args args) throws org.apache.thrift.TException {
        executeQuery_result result = new executeQuery_result();
        result.success = iface.executeQuery(args.guid, args.domainUdk, args.viewUdk, args.source, args.timezone, args.params);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ensureDomain", new ensureDomain());
      processMap.put("findDomain", new findDomain());
      processMap.put("ensureDomainContainsView", new ensureDomainContainsView());
      processMap.put("listViewsInDomain", new listViewsInDomain());
      processMap.put("executeQuery", new executeQuery());
      return processMap;
    }

    public static class ensureDomain<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ensureDomain_args, org.burstsys.gen.thrift.api.client.domain.BTDomainResponse> {
      public ensureDomain() {
        super("ensureDomain");
      }

      public ensureDomain_args getEmptyArgsInstance() {
        return new ensureDomain_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.domain.BTDomainResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.domain.BTDomainResponse>() { 
          public void onComplete(org.burstsys.gen.thrift.api.client.domain.BTDomainResponse o) {
            ensureDomain_result result = new ensureDomain_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ensureDomain_result result = new ensureDomain_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ensureDomain_args args, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.domain.BTDomainResponse> resultHandler) throws org.apache.thrift.TException {
        iface.ensureDomain(args.domain,resultHandler);
      }
    }

    public static class findDomain<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findDomain_args, org.burstsys.gen.thrift.api.client.domain.BTDomainResponse> {
      public findDomain() {
        super("findDomain");
      }

      public findDomain_args getEmptyArgsInstance() {
        return new findDomain_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.domain.BTDomainResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.domain.BTDomainResponse>() { 
          public void onComplete(org.burstsys.gen.thrift.api.client.domain.BTDomainResponse o) {
            findDomain_result result = new findDomain_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findDomain_result result = new findDomain_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findDomain_args args, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.domain.BTDomainResponse> resultHandler) throws org.apache.thrift.TException {
        iface.findDomain(args.udk,resultHandler);
      }
    }

    public static class ensureDomainContainsView<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ensureDomainContainsView_args, org.burstsys.gen.thrift.api.client.view.BTViewResponse> {
      public ensureDomainContainsView() {
        super("ensureDomainContainsView");
      }

      public ensureDomainContainsView_args getEmptyArgsInstance() {
        return new ensureDomainContainsView_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.view.BTViewResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.view.BTViewResponse>() { 
          public void onComplete(org.burstsys.gen.thrift.api.client.view.BTViewResponse o) {
            ensureDomainContainsView_result result = new ensureDomainContainsView_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ensureDomainContainsView_result result = new ensureDomainContainsView_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ensureDomainContainsView_args args, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.view.BTViewResponse> resultHandler) throws org.apache.thrift.TException {
        iface.ensureDomainContainsView(args.domainUdk, args.spec,resultHandler);
      }
    }

    public static class listViewsInDomain<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listViewsInDomain_args, org.burstsys.gen.thrift.api.client.view.BTViewResponse> {
      public listViewsInDomain() {
        super("listViewsInDomain");
      }

      public listViewsInDomain_args getEmptyArgsInstance() {
        return new listViewsInDomain_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.view.BTViewResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.view.BTViewResponse>() { 
          public void onComplete(org.burstsys.gen.thrift.api.client.view.BTViewResponse o) {
            listViewsInDomain_result result = new listViewsInDomain_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listViewsInDomain_result result = new listViewsInDomain_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listViewsInDomain_args args, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.view.BTViewResponse> resultHandler) throws org.apache.thrift.TException {
        iface.listViewsInDomain(args.domainUdk,resultHandler);
      }
    }

    public static class executeQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, executeQuery_args, org.burstsys.gen.thrift.api.client.query.BTQueryResponse> {
      public executeQuery() {
        super("executeQuery");
      }

      public executeQuery_args getEmptyArgsInstance() {
        return new executeQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.query.BTQueryResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.query.BTQueryResponse>() { 
          public void onComplete(org.burstsys.gen.thrift.api.client.query.BTQueryResponse o) {
            executeQuery_result result = new executeQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            executeQuery_result result = new executeQuery_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, executeQuery_args args, org.apache.thrift.async.AsyncMethodCallback<org.burstsys.gen.thrift.api.client.query.BTQueryResponse> resultHandler) throws org.apache.thrift.TException {
        iface.executeQuery(args.guid, args.domainUdk, args.viewUdk, args.source, args.timezone, args.params,resultHandler);
      }
    }

  }

  public static class ensureDomain_args implements org.apache.thrift.TBase<ensureDomain_args, ensureDomain_args._Fields>, java.io.Serializable, Cloneable, Comparable<ensureDomain_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ensureDomain_args");

    private static final org.apache.thrift.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("domain", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ensureDomain_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ensureDomain_argsTupleSchemeFactory();

    /**
     * the domain that should exist in the catalog. It must specify a udk
     */
    public @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.domain.BTDomain domain; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * the domain that should exist in the catalog. It must specify a udk
       */
      DOMAIN((short)1, "domain");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN
            return DOMAIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("domain", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.burstsys.gen.thrift.api.client.domain.BTDomain.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ensureDomain_args.class, metaDataMap);
    }

    public ensureDomain_args() {
    }

    public ensureDomain_args(
      org.burstsys.gen.thrift.api.client.domain.BTDomain domain)
    {
      this();
      this.domain = domain;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ensureDomain_args(ensureDomain_args other) {
      if (other.isSetDomain()) {
        this.domain = new org.burstsys.gen.thrift.api.client.domain.BTDomain(other.domain);
      }
    }

    public ensureDomain_args deepCopy() {
      return new ensureDomain_args(this);
    }

    @Override
    public void clear() {
      this.domain = null;
    }

    /**
     * the domain that should exist in the catalog. It must specify a udk
     */
    @org.apache.thrift.annotation.Nullable
    public org.burstsys.gen.thrift.api.client.domain.BTDomain getDomain() {
      return this.domain;
    }

    /**
     * the domain that should exist in the catalog. It must specify a udk
     */
    public ensureDomain_args setDomain(@org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.domain.BTDomain domain) {
      this.domain = domain;
      return this;
    }

    public void unsetDomain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been assigned a value) and false otherwise */
    public boolean isSetDomain() {
      return this.domain != null;
    }

    public void setDomainIsSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DOMAIN:
        if (value == null) {
          unsetDomain();
        } else {
          setDomain((org.burstsys.gen.thrift.api.client.domain.BTDomain)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN:
        return getDomain();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN:
        return isSetDomain();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ensureDomain_args)
        return this.equals((ensureDomain_args)that);
      return false;
    }

    public boolean equals(ensureDomain_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_domain = true && this.isSetDomain();
      boolean that_present_domain = true && that.isSetDomain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDomain()) ? 131071 : 524287);
      if (isSetDomain())
        hashCode = hashCode * 8191 + domain.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ensureDomain_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDomain()).compareTo(other.isSetDomain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomain()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domain, other.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ensureDomain_args(");
      boolean first = true;

      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (domain == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'domain' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (domain != null) {
        domain.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ensureDomain_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ensureDomain_argsStandardScheme getScheme() {
        return new ensureDomain_argsStandardScheme();
      }
    }

    private static class ensureDomain_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ensureDomain_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ensureDomain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOMAIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.domain = new org.burstsys.gen.thrift.api.client.domain.BTDomain();
                struct.domain.read(iprot);
                struct.setDomainIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ensureDomain_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.domain != null) {
          oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
          struct.domain.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ensureDomain_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ensureDomain_argsTupleScheme getScheme() {
        return new ensureDomain_argsTupleScheme();
      }
    }

    private static class ensureDomain_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ensureDomain_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ensureDomain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.domain.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ensureDomain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.domain = new org.burstsys.gen.thrift.api.client.domain.BTDomain();
        struct.domain.read(iprot);
        struct.setDomainIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ensureDomain_result implements org.apache.thrift.TBase<ensureDomain_result, ensureDomain_result._Fields>, java.io.Serializable, Cloneable, Comparable<ensureDomain_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ensureDomain_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ensureDomain_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ensureDomain_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.domain.BTDomainResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.burstsys.gen.thrift.api.client.domain.BTDomainResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ensureDomain_result.class, metaDataMap);
    }

    public ensureDomain_result() {
    }

    public ensureDomain_result(
      org.burstsys.gen.thrift.api.client.domain.BTDomainResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ensureDomain_result(ensureDomain_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.burstsys.gen.thrift.api.client.domain.BTDomainResponse(other.success);
      }
    }

    public ensureDomain_result deepCopy() {
      return new ensureDomain_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.burstsys.gen.thrift.api.client.domain.BTDomainResponse getSuccess() {
      return this.success;
    }

    public ensureDomain_result setSuccess(@org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.domain.BTDomainResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.burstsys.gen.thrift.api.client.domain.BTDomainResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ensureDomain_result)
        return this.equals((ensureDomain_result)that);
      return false;
    }

    public boolean equals(ensureDomain_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ensureDomain_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ensureDomain_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ensureDomain_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ensureDomain_resultStandardScheme getScheme() {
        return new ensureDomain_resultStandardScheme();
      }
    }

    private static class ensureDomain_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ensureDomain_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ensureDomain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.burstsys.gen.thrift.api.client.domain.BTDomainResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ensureDomain_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ensureDomain_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ensureDomain_resultTupleScheme getScheme() {
        return new ensureDomain_resultTupleScheme();
      }
    }

    private static class ensureDomain_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ensureDomain_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ensureDomain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ensureDomain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new org.burstsys.gen.thrift.api.client.domain.BTDomainResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findDomain_args implements org.apache.thrift.TBase<findDomain_args, findDomain_args._Fields>, java.io.Serializable, Cloneable, Comparable<findDomain_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findDomain_args");

    private static final org.apache.thrift.protocol.TField UDK_FIELD_DESC = new org.apache.thrift.protocol.TField("udk", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findDomain_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findDomain_argsTupleSchemeFactory();

    /**
     * the udk of the domain to fetch from the catalog.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String udk; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * the udk of the domain to fetch from the catalog.
       */
      UDK((short)1, "udk");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UDK
            return UDK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UDK, new org.apache.thrift.meta_data.FieldMetaData("udk", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findDomain_args.class, metaDataMap);
    }

    public findDomain_args() {
    }

    public findDomain_args(
      java.lang.String udk)
    {
      this();
      this.udk = udk;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findDomain_args(findDomain_args other) {
      if (other.isSetUdk()) {
        this.udk = other.udk;
      }
    }

    public findDomain_args deepCopy() {
      return new findDomain_args(this);
    }

    @Override
    public void clear() {
      this.udk = null;
    }

    /**
     * the udk of the domain to fetch from the catalog.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUdk() {
      return this.udk;
    }

    /**
     * the udk of the domain to fetch from the catalog.
     */
    public findDomain_args setUdk(@org.apache.thrift.annotation.Nullable java.lang.String udk) {
      this.udk = udk;
      return this;
    }

    public void unsetUdk() {
      this.udk = null;
    }

    /** Returns true if field udk is set (has been assigned a value) and false otherwise */
    public boolean isSetUdk() {
      return this.udk != null;
    }

    public void setUdkIsSet(boolean value) {
      if (!value) {
        this.udk = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case UDK:
        if (value == null) {
          unsetUdk();
        } else {
          setUdk((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UDK:
        return getUdk();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UDK:
        return isSetUdk();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findDomain_args)
        return this.equals((findDomain_args)that);
      return false;
    }

    public boolean equals(findDomain_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_udk = true && this.isSetUdk();
      boolean that_present_udk = true && that.isSetUdk();
      if (this_present_udk || that_present_udk) {
        if (!(this_present_udk && that_present_udk))
          return false;
        if (!this.udk.equals(that.udk))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUdk()) ? 131071 : 524287);
      if (isSetUdk())
        hashCode = hashCode * 8191 + udk.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findDomain_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUdk()).compareTo(other.isSetUdk());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdk()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.udk, other.udk);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findDomain_args(");
      boolean first = true;

      sb.append("udk:");
      if (this.udk == null) {
        sb.append("null");
      } else {
        sb.append(this.udk);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (udk == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'udk' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findDomain_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findDomain_argsStandardScheme getScheme() {
        return new findDomain_argsStandardScheme();
      }
    }

    private static class findDomain_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findDomain_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findDomain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UDK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.udk = iprot.readString();
                struct.setUdkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findDomain_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.udk != null) {
          oprot.writeFieldBegin(UDK_FIELD_DESC);
          oprot.writeString(struct.udk);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findDomain_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findDomain_argsTupleScheme getScheme() {
        return new findDomain_argsTupleScheme();
      }
    }

    private static class findDomain_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findDomain_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findDomain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.udk);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findDomain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.udk = iprot.readString();
        struct.setUdkIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findDomain_result implements org.apache.thrift.TBase<findDomain_result, findDomain_result._Fields>, java.io.Serializable, Cloneable, Comparable<findDomain_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findDomain_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findDomain_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findDomain_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.domain.BTDomainResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.burstsys.gen.thrift.api.client.domain.BTDomainResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findDomain_result.class, metaDataMap);
    }

    public findDomain_result() {
    }

    public findDomain_result(
      org.burstsys.gen.thrift.api.client.domain.BTDomainResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findDomain_result(findDomain_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.burstsys.gen.thrift.api.client.domain.BTDomainResponse(other.success);
      }
    }

    public findDomain_result deepCopy() {
      return new findDomain_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.burstsys.gen.thrift.api.client.domain.BTDomainResponse getSuccess() {
      return this.success;
    }

    public findDomain_result setSuccess(@org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.domain.BTDomainResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.burstsys.gen.thrift.api.client.domain.BTDomainResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findDomain_result)
        return this.equals((findDomain_result)that);
      return false;
    }

    public boolean equals(findDomain_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findDomain_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findDomain_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findDomain_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findDomain_resultStandardScheme getScheme() {
        return new findDomain_resultStandardScheme();
      }
    }

    private static class findDomain_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findDomain_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findDomain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.burstsys.gen.thrift.api.client.domain.BTDomainResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findDomain_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findDomain_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findDomain_resultTupleScheme getScheme() {
        return new findDomain_resultTupleScheme();
      }
    }

    private static class findDomain_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findDomain_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findDomain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findDomain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new org.burstsys.gen.thrift.api.client.domain.BTDomainResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ensureDomainContainsView_args implements org.apache.thrift.TBase<ensureDomainContainsView_args, ensureDomainContainsView_args._Fields>, java.io.Serializable, Cloneable, Comparable<ensureDomainContainsView_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ensureDomainContainsView_args");

    private static final org.apache.thrift.protocol.TField DOMAIN_UDK_FIELD_DESC = new org.apache.thrift.protocol.TField("domainUdk", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("spec", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ensureDomainContainsView_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ensureDomainContainsView_argsTupleSchemeFactory();

    /**
     * the udk specifying domain in which the view should exist.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String domainUdk; // required
    /**
     * the view that should exist.
     */
    public @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.view.BTView spec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * the udk specifying domain in which the view should exist.
       */
      DOMAIN_UDK((short)1, "domainUdk"),
      /**
       * the view that should exist.
       */
      SPEC((short)2, "spec");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN_UDK
            return DOMAIN_UDK;
          case 2: // SPEC
            return SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN_UDK, new org.apache.thrift.meta_data.FieldMetaData("domainUdk", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPEC, new org.apache.thrift.meta_data.FieldMetaData("spec", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.burstsys.gen.thrift.api.client.view.BTView.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ensureDomainContainsView_args.class, metaDataMap);
    }

    public ensureDomainContainsView_args() {
    }

    public ensureDomainContainsView_args(
      java.lang.String domainUdk,
      org.burstsys.gen.thrift.api.client.view.BTView spec)
    {
      this();
      this.domainUdk = domainUdk;
      this.spec = spec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ensureDomainContainsView_args(ensureDomainContainsView_args other) {
      if (other.isSetDomainUdk()) {
        this.domainUdk = other.domainUdk;
      }
      if (other.isSetSpec()) {
        this.spec = new org.burstsys.gen.thrift.api.client.view.BTView(other.spec);
      }
    }

    public ensureDomainContainsView_args deepCopy() {
      return new ensureDomainContainsView_args(this);
    }

    @Override
    public void clear() {
      this.domainUdk = null;
      this.spec = null;
    }

    /**
     * the udk specifying domain in which the view should exist.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDomainUdk() {
      return this.domainUdk;
    }

    /**
     * the udk specifying domain in which the view should exist.
     */
    public ensureDomainContainsView_args setDomainUdk(@org.apache.thrift.annotation.Nullable java.lang.String domainUdk) {
      this.domainUdk = domainUdk;
      return this;
    }

    public void unsetDomainUdk() {
      this.domainUdk = null;
    }

    /** Returns true if field domainUdk is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainUdk() {
      return this.domainUdk != null;
    }

    public void setDomainUdkIsSet(boolean value) {
      if (!value) {
        this.domainUdk = null;
      }
    }

    /**
     * the view that should exist.
     */
    @org.apache.thrift.annotation.Nullable
    public org.burstsys.gen.thrift.api.client.view.BTView getSpec() {
      return this.spec;
    }

    /**
     * the view that should exist.
     */
    public ensureDomainContainsView_args setSpec(@org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.view.BTView spec) {
      this.spec = spec;
      return this;
    }

    public void unsetSpec() {
      this.spec = null;
    }

    /** Returns true if field spec is set (has been assigned a value) and false otherwise */
    public boolean isSetSpec() {
      return this.spec != null;
    }

    public void setSpecIsSet(boolean value) {
      if (!value) {
        this.spec = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DOMAIN_UDK:
        if (value == null) {
          unsetDomainUdk();
        } else {
          setDomainUdk((java.lang.String)value);
        }
        break;

      case SPEC:
        if (value == null) {
          unsetSpec();
        } else {
          setSpec((org.burstsys.gen.thrift.api.client.view.BTView)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN_UDK:
        return getDomainUdk();

      case SPEC:
        return getSpec();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN_UDK:
        return isSetDomainUdk();
      case SPEC:
        return isSetSpec();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ensureDomainContainsView_args)
        return this.equals((ensureDomainContainsView_args)that);
      return false;
    }

    public boolean equals(ensureDomainContainsView_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_domainUdk = true && this.isSetDomainUdk();
      boolean that_present_domainUdk = true && that.isSetDomainUdk();
      if (this_present_domainUdk || that_present_domainUdk) {
        if (!(this_present_domainUdk && that_present_domainUdk))
          return false;
        if (!this.domainUdk.equals(that.domainUdk))
          return false;
      }

      boolean this_present_spec = true && this.isSetSpec();
      boolean that_present_spec = true && that.isSetSpec();
      if (this_present_spec || that_present_spec) {
        if (!(this_present_spec && that_present_spec))
          return false;
        if (!this.spec.equals(that.spec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDomainUdk()) ? 131071 : 524287);
      if (isSetDomainUdk())
        hashCode = hashCode * 8191 + domainUdk.hashCode();

      hashCode = hashCode * 8191 + ((isSetSpec()) ? 131071 : 524287);
      if (isSetSpec())
        hashCode = hashCode * 8191 + spec.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ensureDomainContainsView_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDomainUdk()).compareTo(other.isSetDomainUdk());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainUdk()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainUdk, other.domainUdk);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSpec()).compareTo(other.isSetSpec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec, other.spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ensureDomainContainsView_args(");
      boolean first = true;

      sb.append("domainUdk:");
      if (this.domainUdk == null) {
        sb.append("null");
      } else {
        sb.append(this.domainUdk);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("spec:");
      if (this.spec == null) {
        sb.append("null");
      } else {
        sb.append(this.spec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (domainUdk == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'domainUdk' was not present! Struct: " + toString());
      }
      if (spec == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'spec' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (spec != null) {
        spec.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ensureDomainContainsView_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ensureDomainContainsView_argsStandardScheme getScheme() {
        return new ensureDomainContainsView_argsStandardScheme();
      }
    }

    private static class ensureDomainContainsView_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ensureDomainContainsView_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ensureDomainContainsView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOMAIN_UDK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainUdk = iprot.readString();
                struct.setDomainUdkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPEC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.spec = new org.burstsys.gen.thrift.api.client.view.BTView();
                struct.spec.read(iprot);
                struct.setSpecIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ensureDomainContainsView_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.domainUdk != null) {
          oprot.writeFieldBegin(DOMAIN_UDK_FIELD_DESC);
          oprot.writeString(struct.domainUdk);
          oprot.writeFieldEnd();
        }
        if (struct.spec != null) {
          oprot.writeFieldBegin(SPEC_FIELD_DESC);
          struct.spec.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ensureDomainContainsView_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ensureDomainContainsView_argsTupleScheme getScheme() {
        return new ensureDomainContainsView_argsTupleScheme();
      }
    }

    private static class ensureDomainContainsView_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ensureDomainContainsView_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ensureDomainContainsView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.domainUdk);
        struct.spec.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ensureDomainContainsView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.domainUdk = iprot.readString();
        struct.setDomainUdkIsSet(true);
        struct.spec = new org.burstsys.gen.thrift.api.client.view.BTView();
        struct.spec.read(iprot);
        struct.setSpecIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ensureDomainContainsView_result implements org.apache.thrift.TBase<ensureDomainContainsView_result, ensureDomainContainsView_result._Fields>, java.io.Serializable, Cloneable, Comparable<ensureDomainContainsView_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ensureDomainContainsView_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ensureDomainContainsView_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ensureDomainContainsView_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.view.BTViewResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.burstsys.gen.thrift.api.client.view.BTViewResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ensureDomainContainsView_result.class, metaDataMap);
    }

    public ensureDomainContainsView_result() {
    }

    public ensureDomainContainsView_result(
      org.burstsys.gen.thrift.api.client.view.BTViewResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ensureDomainContainsView_result(ensureDomainContainsView_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.burstsys.gen.thrift.api.client.view.BTViewResponse(other.success);
      }
    }

    public ensureDomainContainsView_result deepCopy() {
      return new ensureDomainContainsView_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.burstsys.gen.thrift.api.client.view.BTViewResponse getSuccess() {
      return this.success;
    }

    public ensureDomainContainsView_result setSuccess(@org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.view.BTViewResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.burstsys.gen.thrift.api.client.view.BTViewResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ensureDomainContainsView_result)
        return this.equals((ensureDomainContainsView_result)that);
      return false;
    }

    public boolean equals(ensureDomainContainsView_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ensureDomainContainsView_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ensureDomainContainsView_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ensureDomainContainsView_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ensureDomainContainsView_resultStandardScheme getScheme() {
        return new ensureDomainContainsView_resultStandardScheme();
      }
    }

    private static class ensureDomainContainsView_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ensureDomainContainsView_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ensureDomainContainsView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.burstsys.gen.thrift.api.client.view.BTViewResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ensureDomainContainsView_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ensureDomainContainsView_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ensureDomainContainsView_resultTupleScheme getScheme() {
        return new ensureDomainContainsView_resultTupleScheme();
      }
    }

    private static class ensureDomainContainsView_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ensureDomainContainsView_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ensureDomainContainsView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ensureDomainContainsView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new org.burstsys.gen.thrift.api.client.view.BTViewResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listViewsInDomain_args implements org.apache.thrift.TBase<listViewsInDomain_args, listViewsInDomain_args._Fields>, java.io.Serializable, Cloneable, Comparable<listViewsInDomain_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listViewsInDomain_args");

    private static final org.apache.thrift.protocol.TField DOMAIN_UDK_FIELD_DESC = new org.apache.thrift.protocol.TField("domainUdk", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listViewsInDomain_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listViewsInDomain_argsTupleSchemeFactory();

    /**
     * the udk of the domain containing the views to be returned.
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String domainUdk; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * the udk of the domain containing the views to be returned.
       */
      DOMAIN_UDK((short)1, "domainUdk");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN_UDK
            return DOMAIN_UDK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN_UDK, new org.apache.thrift.meta_data.FieldMetaData("domainUdk", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listViewsInDomain_args.class, metaDataMap);
    }

    public listViewsInDomain_args() {
    }

    public listViewsInDomain_args(
      java.lang.String domainUdk)
    {
      this();
      this.domainUdk = domainUdk;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listViewsInDomain_args(listViewsInDomain_args other) {
      if (other.isSetDomainUdk()) {
        this.domainUdk = other.domainUdk;
      }
    }

    public listViewsInDomain_args deepCopy() {
      return new listViewsInDomain_args(this);
    }

    @Override
    public void clear() {
      this.domainUdk = null;
    }

    /**
     * the udk of the domain containing the views to be returned.
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDomainUdk() {
      return this.domainUdk;
    }

    /**
     * the udk of the domain containing the views to be returned.
     */
    public listViewsInDomain_args setDomainUdk(@org.apache.thrift.annotation.Nullable java.lang.String domainUdk) {
      this.domainUdk = domainUdk;
      return this;
    }

    public void unsetDomainUdk() {
      this.domainUdk = null;
    }

    /** Returns true if field domainUdk is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainUdk() {
      return this.domainUdk != null;
    }

    public void setDomainUdkIsSet(boolean value) {
      if (!value) {
        this.domainUdk = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DOMAIN_UDK:
        if (value == null) {
          unsetDomainUdk();
        } else {
          setDomainUdk((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN_UDK:
        return getDomainUdk();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN_UDK:
        return isSetDomainUdk();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listViewsInDomain_args)
        return this.equals((listViewsInDomain_args)that);
      return false;
    }

    public boolean equals(listViewsInDomain_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_domainUdk = true && this.isSetDomainUdk();
      boolean that_present_domainUdk = true && that.isSetDomainUdk();
      if (this_present_domainUdk || that_present_domainUdk) {
        if (!(this_present_domainUdk && that_present_domainUdk))
          return false;
        if (!this.domainUdk.equals(that.domainUdk))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDomainUdk()) ? 131071 : 524287);
      if (isSetDomainUdk())
        hashCode = hashCode * 8191 + domainUdk.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listViewsInDomain_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDomainUdk()).compareTo(other.isSetDomainUdk());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainUdk()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainUdk, other.domainUdk);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listViewsInDomain_args(");
      boolean first = true;

      sb.append("domainUdk:");
      if (this.domainUdk == null) {
        sb.append("null");
      } else {
        sb.append(this.domainUdk);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (domainUdk == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'domainUdk' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listViewsInDomain_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listViewsInDomain_argsStandardScheme getScheme() {
        return new listViewsInDomain_argsStandardScheme();
      }
    }

    private static class listViewsInDomain_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listViewsInDomain_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listViewsInDomain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOMAIN_UDK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainUdk = iprot.readString();
                struct.setDomainUdkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listViewsInDomain_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.domainUdk != null) {
          oprot.writeFieldBegin(DOMAIN_UDK_FIELD_DESC);
          oprot.writeString(struct.domainUdk);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listViewsInDomain_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listViewsInDomain_argsTupleScheme getScheme() {
        return new listViewsInDomain_argsTupleScheme();
      }
    }

    private static class listViewsInDomain_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listViewsInDomain_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listViewsInDomain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.domainUdk);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listViewsInDomain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.domainUdk = iprot.readString();
        struct.setDomainUdkIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listViewsInDomain_result implements org.apache.thrift.TBase<listViewsInDomain_result, listViewsInDomain_result._Fields>, java.io.Serializable, Cloneable, Comparable<listViewsInDomain_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listViewsInDomain_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listViewsInDomain_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listViewsInDomain_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.view.BTViewResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.burstsys.gen.thrift.api.client.view.BTViewResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listViewsInDomain_result.class, metaDataMap);
    }

    public listViewsInDomain_result() {
    }

    public listViewsInDomain_result(
      org.burstsys.gen.thrift.api.client.view.BTViewResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listViewsInDomain_result(listViewsInDomain_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.burstsys.gen.thrift.api.client.view.BTViewResponse(other.success);
      }
    }

    public listViewsInDomain_result deepCopy() {
      return new listViewsInDomain_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.burstsys.gen.thrift.api.client.view.BTViewResponse getSuccess() {
      return this.success;
    }

    public listViewsInDomain_result setSuccess(@org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.view.BTViewResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.burstsys.gen.thrift.api.client.view.BTViewResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listViewsInDomain_result)
        return this.equals((listViewsInDomain_result)that);
      return false;
    }

    public boolean equals(listViewsInDomain_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listViewsInDomain_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listViewsInDomain_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listViewsInDomain_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listViewsInDomain_resultStandardScheme getScheme() {
        return new listViewsInDomain_resultStandardScheme();
      }
    }

    private static class listViewsInDomain_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listViewsInDomain_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listViewsInDomain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.burstsys.gen.thrift.api.client.view.BTViewResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listViewsInDomain_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listViewsInDomain_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listViewsInDomain_resultTupleScheme getScheme() {
        return new listViewsInDomain_resultTupleScheme();
      }
    }

    private static class listViewsInDomain_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listViewsInDomain_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listViewsInDomain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listViewsInDomain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new org.burstsys.gen.thrift.api.client.view.BTViewResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class executeQuery_args implements org.apache.thrift.TBase<executeQuery_args, executeQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<executeQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeQuery_args");

    private static final org.apache.thrift.protocol.TField GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("guid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DOMAIN_UDK_FIELD_DESC = new org.apache.thrift.protocol.TField("domainUdk", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VIEW_UDK_FIELD_DESC = new org.apache.thrift.protocol.TField("viewUdk", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TIMEZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("timezone", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.LIST, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new executeQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new executeQuery_argsTupleSchemeFactory();

    /**
     * a unique id for the query. If present it must be of the form [a-zA-Z][a-zA-Z0-9_]{31}
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String guid; // required
    /**
     * the domain to run the query over
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String domainUdk; // required
    /**
     * the view to run the query over
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String viewUdk; // required
    /**
     * the query text
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String source; // required
    /**
     * the timezone to use to interpret date times
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String timezone; // required
    /**
     * any parameter values to pass to the query
     */
    public @org.apache.thrift.annotation.Nullable java.util.List<org.burstsys.gen.thrift.api.client.query.BTParameter> params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * a unique id for the query. If present it must be of the form [a-zA-Z][a-zA-Z0-9_]{31}
       */
      GUID((short)1, "guid"),
      /**
       * the domain to run the query over
       */
      DOMAIN_UDK((short)2, "domainUdk"),
      /**
       * the view to run the query over
       */
      VIEW_UDK((short)3, "viewUdk"),
      /**
       * the query text
       */
      SOURCE((short)4, "source"),
      /**
       * the timezone to use to interpret date times
       */
      TIMEZONE((short)5, "timezone"),
      /**
       * any parameter values to pass to the query
       */
      PARAMS((short)6, "params");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GUID
            return GUID;
          case 2: // DOMAIN_UDK
            return DOMAIN_UDK;
          case 3: // VIEW_UDK
            return VIEW_UDK;
          case 4: // SOURCE
            return SOURCE;
          case 5: // TIMEZONE
            return TIMEZONE;
          case 6: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GUID, new org.apache.thrift.meta_data.FieldMetaData("guid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOMAIN_UDK, new org.apache.thrift.meta_data.FieldMetaData("domainUdk", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VIEW_UDK, new org.apache.thrift.meta_data.FieldMetaData("viewUdk", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIMEZONE, new org.apache.thrift.meta_data.FieldMetaData("timezone", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.burstsys.gen.thrift.api.client.query.BTParameter.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeQuery_args.class, metaDataMap);
    }

    public executeQuery_args() {
    }

    public executeQuery_args(
      java.lang.String guid,
      java.lang.String domainUdk,
      java.lang.String viewUdk,
      java.lang.String source,
      java.lang.String timezone,
      java.util.List<org.burstsys.gen.thrift.api.client.query.BTParameter> params)
    {
      this();
      this.guid = guid;
      this.domainUdk = domainUdk;
      this.viewUdk = viewUdk;
      this.source = source;
      this.timezone = timezone;
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeQuery_args(executeQuery_args other) {
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
      if (other.isSetDomainUdk()) {
        this.domainUdk = other.domainUdk;
      }
      if (other.isSetViewUdk()) {
        this.viewUdk = other.viewUdk;
      }
      if (other.isSetSource()) {
        this.source = other.source;
      }
      if (other.isSetTimezone()) {
        this.timezone = other.timezone;
      }
      if (other.isSetParams()) {
        java.util.List<org.burstsys.gen.thrift.api.client.query.BTParameter> __this__params = new java.util.ArrayList<org.burstsys.gen.thrift.api.client.query.BTParameter>(other.params.size());
        for (org.burstsys.gen.thrift.api.client.query.BTParameter other_element : other.params) {
          __this__params.add(new org.burstsys.gen.thrift.api.client.query.BTParameter(other_element));
        }
        this.params = __this__params;
      }
    }

    public executeQuery_args deepCopy() {
      return new executeQuery_args(this);
    }

    @Override
    public void clear() {
      this.guid = null;
      this.domainUdk = null;
      this.viewUdk = null;
      this.source = null;
      this.timezone = null;
      this.params = null;
    }

    /**
     * a unique id for the query. If present it must be of the form [a-zA-Z][a-zA-Z0-9_]{31}
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getGuid() {
      return this.guid;
    }

    /**
     * a unique id for the query. If present it must be of the form [a-zA-Z][a-zA-Z0-9_]{31}
     */
    public executeQuery_args setGuid(@org.apache.thrift.annotation.Nullable java.lang.String guid) {
      this.guid = guid;
      return this;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been assigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    /**
     * the domain to run the query over
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDomainUdk() {
      return this.domainUdk;
    }

    /**
     * the domain to run the query over
     */
    public executeQuery_args setDomainUdk(@org.apache.thrift.annotation.Nullable java.lang.String domainUdk) {
      this.domainUdk = domainUdk;
      return this;
    }

    public void unsetDomainUdk() {
      this.domainUdk = null;
    }

    /** Returns true if field domainUdk is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainUdk() {
      return this.domainUdk != null;
    }

    public void setDomainUdkIsSet(boolean value) {
      if (!value) {
        this.domainUdk = null;
      }
    }

    /**
     * the view to run the query over
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getViewUdk() {
      return this.viewUdk;
    }

    /**
     * the view to run the query over
     */
    public executeQuery_args setViewUdk(@org.apache.thrift.annotation.Nullable java.lang.String viewUdk) {
      this.viewUdk = viewUdk;
      return this;
    }

    public void unsetViewUdk() {
      this.viewUdk = null;
    }

    /** Returns true if field viewUdk is set (has been assigned a value) and false otherwise */
    public boolean isSetViewUdk() {
      return this.viewUdk != null;
    }

    public void setViewUdkIsSet(boolean value) {
      if (!value) {
        this.viewUdk = null;
      }
    }

    /**
     * the query text
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSource() {
      return this.source;
    }

    /**
     * the query text
     */
    public executeQuery_args setSource(@org.apache.thrift.annotation.Nullable java.lang.String source) {
      this.source = source;
      return this;
    }

    public void unsetSource() {
      this.source = null;
    }

    /** Returns true if field source is set (has been assigned a value) and false otherwise */
    public boolean isSetSource() {
      return this.source != null;
    }

    public void setSourceIsSet(boolean value) {
      if (!value) {
        this.source = null;
      }
    }

    /**
     * the timezone to use to interpret date times
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTimezone() {
      return this.timezone;
    }

    /**
     * the timezone to use to interpret date times
     */
    public executeQuery_args setTimezone(@org.apache.thrift.annotation.Nullable java.lang.String timezone) {
      this.timezone = timezone;
      return this;
    }

    public void unsetTimezone() {
      this.timezone = null;
    }

    /** Returns true if field timezone is set (has been assigned a value) and false otherwise */
    public boolean isSetTimezone() {
      return this.timezone != null;
    }

    public void setTimezoneIsSet(boolean value) {
      if (!value) {
        this.timezone = null;
      }
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<org.burstsys.gen.thrift.api.client.query.BTParameter> getParamsIterator() {
      return (this.params == null) ? null : this.params.iterator();
    }

    public void addToParams(org.burstsys.gen.thrift.api.client.query.BTParameter elem) {
      if (this.params == null) {
        this.params = new java.util.ArrayList<org.burstsys.gen.thrift.api.client.query.BTParameter>();
      }
      this.params.add(elem);
    }

    /**
     * any parameter values to pass to the query
     */
    @org.apache.thrift.annotation.Nullable
    public java.util.List<org.burstsys.gen.thrift.api.client.query.BTParameter> getParams() {
      return this.params;
    }

    /**
     * any parameter values to pass to the query
     */
    public executeQuery_args setParams(@org.apache.thrift.annotation.Nullable java.util.List<org.burstsys.gen.thrift.api.client.query.BTParameter> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case GUID:
        if (value == null) {
          unsetGuid();
        } else {
          setGuid((java.lang.String)value);
        }
        break;

      case DOMAIN_UDK:
        if (value == null) {
          unsetDomainUdk();
        } else {
          setDomainUdk((java.lang.String)value);
        }
        break;

      case VIEW_UDK:
        if (value == null) {
          unsetViewUdk();
        } else {
          setViewUdk((java.lang.String)value);
        }
        break;

      case SOURCE:
        if (value == null) {
          unsetSource();
        } else {
          setSource((java.lang.String)value);
        }
        break;

      case TIMEZONE:
        if (value == null) {
          unsetTimezone();
        } else {
          setTimezone((java.lang.String)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((java.util.List<org.burstsys.gen.thrift.api.client.query.BTParameter>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case GUID:
        return getGuid();

      case DOMAIN_UDK:
        return getDomainUdk();

      case VIEW_UDK:
        return getViewUdk();

      case SOURCE:
        return getSource();

      case TIMEZONE:
        return getTimezone();

      case PARAMS:
        return getParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case GUID:
        return isSetGuid();
      case DOMAIN_UDK:
        return isSetDomainUdk();
      case VIEW_UDK:
        return isSetViewUdk();
      case SOURCE:
        return isSetSource();
      case TIMEZONE:
        return isSetTimezone();
      case PARAMS:
        return isSetParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof executeQuery_args)
        return this.equals((executeQuery_args)that);
      return false;
    }

    public boolean equals(executeQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      boolean this_present_domainUdk = true && this.isSetDomainUdk();
      boolean that_present_domainUdk = true && that.isSetDomainUdk();
      if (this_present_domainUdk || that_present_domainUdk) {
        if (!(this_present_domainUdk && that_present_domainUdk))
          return false;
        if (!this.domainUdk.equals(that.domainUdk))
          return false;
      }

      boolean this_present_viewUdk = true && this.isSetViewUdk();
      boolean that_present_viewUdk = true && that.isSetViewUdk();
      if (this_present_viewUdk || that_present_viewUdk) {
        if (!(this_present_viewUdk && that_present_viewUdk))
          return false;
        if (!this.viewUdk.equals(that.viewUdk))
          return false;
      }

      boolean this_present_source = true && this.isSetSource();
      boolean that_present_source = true && that.isSetSource();
      if (this_present_source || that_present_source) {
        if (!(this_present_source && that_present_source))
          return false;
        if (!this.source.equals(that.source))
          return false;
      }

      boolean this_present_timezone = true && this.isSetTimezone();
      boolean that_present_timezone = true && that.isSetTimezone();
      if (this_present_timezone || that_present_timezone) {
        if (!(this_present_timezone && that_present_timezone))
          return false;
        if (!this.timezone.equals(that.timezone))
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetGuid()) ? 131071 : 524287);
      if (isSetGuid())
        hashCode = hashCode * 8191 + guid.hashCode();

      hashCode = hashCode * 8191 + ((isSetDomainUdk()) ? 131071 : 524287);
      if (isSetDomainUdk())
        hashCode = hashCode * 8191 + domainUdk.hashCode();

      hashCode = hashCode * 8191 + ((isSetViewUdk()) ? 131071 : 524287);
      if (isSetViewUdk())
        hashCode = hashCode * 8191 + viewUdk.hashCode();

      hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
      if (isSetSource())
        hashCode = hashCode * 8191 + source.hashCode();

      hashCode = hashCode * 8191 + ((isSetTimezone()) ? 131071 : 524287);
      if (isSetTimezone())
        hashCode = hashCode * 8191 + timezone.hashCode();

      hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
      if (isSetParams())
        hashCode = hashCode * 8191 + params.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(executeQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetGuid()).compareTo(other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDomainUdk()).compareTo(other.isSetDomainUdk());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainUdk()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainUdk, other.domainUdk);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetViewUdk()).compareTo(other.isSetViewUdk());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetViewUdk()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewUdk, other.viewUdk);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimezone()).compareTo(other.isSetTimezone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimezone()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timezone, other.timezone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("executeQuery_args(");
      boolean first = true;

      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("domainUdk:");
      if (this.domainUdk == null) {
        sb.append("null");
      } else {
        sb.append(this.domainUdk);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("viewUdk:");
      if (this.viewUdk == null) {
        sb.append("null");
      } else {
        sb.append(this.viewUdk);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timezone:");
      if (this.timezone == null) {
        sb.append("null");
      } else {
        sb.append(this.timezone);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (domainUdk == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'domainUdk' was not present! Struct: " + toString());
      }
      if (viewUdk == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'viewUdk' was not present! Struct: " + toString());
      }
      if (source == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'source' was not present! Struct: " + toString());
      }
      if (timezone == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timezone' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeQuery_argsStandardScheme getScheme() {
        return new executeQuery_argsStandardScheme();
      }
    }

    private static class executeQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<executeQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.guid = iprot.readString();
                struct.setGuidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOMAIN_UDK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainUdk = iprot.readString();
                struct.setDomainUdkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VIEW_UDK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.viewUdk = iprot.readString();
                struct.setViewUdkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.source = iprot.readString();
                struct.setSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TIMEZONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.timezone = iprot.readString();
                struct.setTimezoneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.params = new java.util.ArrayList<org.burstsys.gen.thrift.api.client.query.BTParameter>(_list0.size);
                  @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.query.BTParameter _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new org.burstsys.gen.thrift.api.client.query.BTParameter();
                    _elem1.read(iprot);
                    struct.params.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.guid != null) {
          oprot.writeFieldBegin(GUID_FIELD_DESC);
          oprot.writeString(struct.guid);
          oprot.writeFieldEnd();
        }
        if (struct.domainUdk != null) {
          oprot.writeFieldBegin(DOMAIN_UDK_FIELD_DESC);
          oprot.writeString(struct.domainUdk);
          oprot.writeFieldEnd();
        }
        if (struct.viewUdk != null) {
          oprot.writeFieldBegin(VIEW_UDK_FIELD_DESC);
          oprot.writeString(struct.viewUdk);
          oprot.writeFieldEnd();
        }
        if (struct.source != null) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeString(struct.source);
          oprot.writeFieldEnd();
        }
        if (struct.timezone != null) {
          oprot.writeFieldBegin(TIMEZONE_FIELD_DESC);
          oprot.writeString(struct.timezone);
          oprot.writeFieldEnd();
        }
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.params.size()));
            for (org.burstsys.gen.thrift.api.client.query.BTParameter _iter3 : struct.params)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeQuery_argsTupleScheme getScheme() {
        return new executeQuery_argsTupleScheme();
      }
    }

    private static class executeQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<executeQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.domainUdk);
        oprot.writeString(struct.viewUdk);
        oprot.writeString(struct.source);
        oprot.writeString(struct.timezone);
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetGuid()) {
          optionals.set(0);
        }
        if (struct.isSetParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGuid()) {
          oprot.writeString(struct.guid);
        }
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (org.burstsys.gen.thrift.api.client.query.BTParameter _iter4 : struct.params)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.domainUdk = iprot.readString();
        struct.setDomainUdkIsSet(true);
        struct.viewUdk = iprot.readString();
        struct.setViewUdkIsSet(true);
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
        struct.timezone = iprot.readString();
        struct.setTimezoneIsSet(true);
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.guid = iprot.readString();
          struct.setGuidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.params = new java.util.ArrayList<org.burstsys.gen.thrift.api.client.query.BTParameter>(_list5.size);
            @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.query.BTParameter _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new org.burstsys.gen.thrift.api.client.query.BTParameter();
              _elem6.read(iprot);
              struct.params.add(_elem6);
            }
          }
          struct.setParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class executeQuery_result implements org.apache.thrift.TBase<executeQuery_result, executeQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<executeQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new executeQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new executeQuery_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.query.BTQueryResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.burstsys.gen.thrift.api.client.query.BTQueryResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeQuery_result.class, metaDataMap);
    }

    public executeQuery_result() {
    }

    public executeQuery_result(
      org.burstsys.gen.thrift.api.client.query.BTQueryResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeQuery_result(executeQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.burstsys.gen.thrift.api.client.query.BTQueryResponse(other.success);
      }
    }

    public executeQuery_result deepCopy() {
      return new executeQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public org.burstsys.gen.thrift.api.client.query.BTQueryResponse getSuccess() {
      return this.success;
    }

    public executeQuery_result setSuccess(@org.apache.thrift.annotation.Nullable org.burstsys.gen.thrift.api.client.query.BTQueryResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.burstsys.gen.thrift.api.client.query.BTQueryResponse)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof executeQuery_result)
        return this.equals((executeQuery_result)that);
      return false;
    }

    public boolean equals(executeQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(executeQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("executeQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeQuery_resultStandardScheme getScheme() {
        return new executeQuery_resultStandardScheme();
      }
    }

    private static class executeQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<executeQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.burstsys.gen.thrift.api.client.query.BTQueryResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeQuery_resultTupleScheme getScheme() {
        return new executeQuery_resultTupleScheme();
      }
    }

    private static class executeQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<executeQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new org.burstsys.gen.thrift.api.client.query.BTQueryResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
