/* Copyright Yahoo, Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms. */
package org.burstsys.gen.thrift.api.client.query;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2022-03-10")
public class BTResultSetMeta implements org.apache.thrift.TBase<BTResultSetMeta, BTResultSetMeta._Fields>, java.io.Serializable, Cloneable, Comparable<BTResultSetMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BTResultSetMeta");

  private static final org.apache.thrift.protocol.TField SUCCEEDED_FIELD_DESC = new org.apache.thrift.protocol.TField("succeeded", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField LIMITED_FIELD_DESC = new org.apache.thrift.protocol.TField("limited", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField OVERFLOWED_FIELD_DESC = new org.apache.thrift.protocol.TField("overflowed", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField ROW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("rowCount", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BTResultSetMetaStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BTResultSetMetaTupleSchemeFactory();

  /**
   * If the query succeeded
   */
  public boolean succeeded; // required
  /**
   * If the query was row-limited
   */
  public boolean limited; // required
  /**
   * If the query had a dictionary overflow
   */
  public boolean overflowed; // required
  /**
   * The number of rows returned
   */
  public long rowCount; // required
  /**
   * Extra properties for the query
   */
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * If the query succeeded
     */
    SUCCEEDED((short)1, "succeeded"),
    /**
     * If the query was row-limited
     */
    LIMITED((short)2, "limited"),
    /**
     * If the query had a dictionary overflow
     */
    OVERFLOWED((short)3, "overflowed"),
    /**
     * The number of rows returned
     */
    ROW_COUNT((short)4, "rowCount"),
    /**
     * Extra properties for the query
     */
    PROPERTIES((short)5, "properties");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUCCEEDED
          return SUCCEEDED;
        case 2: // LIMITED
          return LIMITED;
        case 3: // OVERFLOWED
          return OVERFLOWED;
        case 4: // ROW_COUNT
          return ROW_COUNT;
        case 5: // PROPERTIES
          return PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUCCEEDED_ISSET_ID = 0;
  private static final int __LIMITED_ISSET_ID = 1;
  private static final int __OVERFLOWED_ISSET_ID = 2;
  private static final int __ROWCOUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCEEDED, new org.apache.thrift.meta_data.FieldMetaData("succeeded", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LIMITED, new org.apache.thrift.meta_data.FieldMetaData("limited", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OVERFLOWED, new org.apache.thrift.meta_data.FieldMetaData("overflowed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ROW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("rowCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BTResultSetMeta.class, metaDataMap);
  }

  public BTResultSetMeta() {
  }

  public BTResultSetMeta(
    boolean succeeded,
    boolean limited,
    boolean overflowed,
    long rowCount,
    java.util.Map<java.lang.String,java.lang.String> properties)
  {
    this();
    this.succeeded = succeeded;
    setSucceededIsSet(true);
    this.limited = limited;
    setLimitedIsSet(true);
    this.overflowed = overflowed;
    setOverflowedIsSet(true);
    this.rowCount = rowCount;
    setRowCountIsSet(true);
    this.properties = properties;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BTResultSetMeta(BTResultSetMeta other) {
    __isset_bitfield = other.__isset_bitfield;
    this.succeeded = other.succeeded;
    this.limited = other.limited;
    this.overflowed = other.overflowed;
    this.rowCount = other.rowCount;
    if (other.isSetProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.properties);
      this.properties = __this__properties;
    }
  }

  public BTResultSetMeta deepCopy() {
    return new BTResultSetMeta(this);
  }

  @Override
  public void clear() {
    setSucceededIsSet(false);
    this.succeeded = false;
    setLimitedIsSet(false);
    this.limited = false;
    setOverflowedIsSet(false);
    this.overflowed = false;
    setRowCountIsSet(false);
    this.rowCount = 0;
    this.properties = null;
  }

  /**
   * If the query succeeded
   */
  public boolean isSucceeded() {
    return this.succeeded;
  }

  /**
   * If the query succeeded
   */
  public BTResultSetMeta setSucceeded(boolean succeeded) {
    this.succeeded = succeeded;
    setSucceededIsSet(true);
    return this;
  }

  public void unsetSucceeded() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCEEDED_ISSET_ID);
  }

  /** Returns true if field succeeded is set (has been assigned a value) and false otherwise */
  public boolean isSetSucceeded() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCEEDED_ISSET_ID);
  }

  public void setSucceededIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCEEDED_ISSET_ID, value);
  }

  /**
   * If the query was row-limited
   */
  public boolean isLimited() {
    return this.limited;
  }

  /**
   * If the query was row-limited
   */
  public BTResultSetMeta setLimited(boolean limited) {
    this.limited = limited;
    setLimitedIsSet(true);
    return this;
  }

  public void unsetLimited() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMITED_ISSET_ID);
  }

  /** Returns true if field limited is set (has been assigned a value) and false otherwise */
  public boolean isSetLimited() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMITED_ISSET_ID);
  }

  public void setLimitedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMITED_ISSET_ID, value);
  }

  /**
   * If the query had a dictionary overflow
   */
  public boolean isOverflowed() {
    return this.overflowed;
  }

  /**
   * If the query had a dictionary overflow
   */
  public BTResultSetMeta setOverflowed(boolean overflowed) {
    this.overflowed = overflowed;
    setOverflowedIsSet(true);
    return this;
  }

  public void unsetOverflowed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OVERFLOWED_ISSET_ID);
  }

  /** Returns true if field overflowed is set (has been assigned a value) and false otherwise */
  public boolean isSetOverflowed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OVERFLOWED_ISSET_ID);
  }

  public void setOverflowedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OVERFLOWED_ISSET_ID, value);
  }

  /**
   * The number of rows returned
   */
  public long getRowCount() {
    return this.rowCount;
  }

  /**
   * The number of rows returned
   */
  public BTResultSetMeta setRowCount(long rowCount) {
    this.rowCount = rowCount;
    setRowCountIsSet(true);
    return this;
  }

  public void unsetRowCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROWCOUNT_ISSET_ID);
  }

  /** Returns true if field rowCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRowCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROWCOUNT_ISSET_ID);
  }

  public void setRowCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROWCOUNT_ISSET_ID, value);
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(java.lang.String key, java.lang.String val) {
    if (this.properties == null) {
      this.properties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.properties.put(key, val);
  }

  /**
   * Extra properties for the query
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getProperties() {
    return this.properties;
  }

  /**
   * Extra properties for the query
   */
  public BTResultSetMeta setProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SUCCEEDED:
      if (value == null) {
        unsetSucceeded();
      } else {
        setSucceeded((java.lang.Boolean)value);
      }
      break;

    case LIMITED:
      if (value == null) {
        unsetLimited();
      } else {
        setLimited((java.lang.Boolean)value);
      }
      break;

    case OVERFLOWED:
      if (value == null) {
        unsetOverflowed();
      } else {
        setOverflowed((java.lang.Boolean)value);
      }
      break;

    case ROW_COUNT:
      if (value == null) {
        unsetRowCount();
      } else {
        setRowCount((java.lang.Long)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCEEDED:
      return isSucceeded();

    case LIMITED:
      return isLimited();

    case OVERFLOWED:
      return isOverflowed();

    case ROW_COUNT:
      return getRowCount();

    case PROPERTIES:
      return getProperties();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SUCCEEDED:
      return isSetSucceeded();
    case LIMITED:
      return isSetLimited();
    case OVERFLOWED:
      return isSetOverflowed();
    case ROW_COUNT:
      return isSetRowCount();
    case PROPERTIES:
      return isSetProperties();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BTResultSetMeta)
      return this.equals((BTResultSetMeta)that);
    return false;
  }

  public boolean equals(BTResultSetMeta that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_succeeded = true;
    boolean that_present_succeeded = true;
    if (this_present_succeeded || that_present_succeeded) {
      if (!(this_present_succeeded && that_present_succeeded))
        return false;
      if (this.succeeded != that.succeeded)
        return false;
    }

    boolean this_present_limited = true;
    boolean that_present_limited = true;
    if (this_present_limited || that_present_limited) {
      if (!(this_present_limited && that_present_limited))
        return false;
      if (this.limited != that.limited)
        return false;
    }

    boolean this_present_overflowed = true;
    boolean that_present_overflowed = true;
    if (this_present_overflowed || that_present_overflowed) {
      if (!(this_present_overflowed && that_present_overflowed))
        return false;
      if (this.overflowed != that.overflowed)
        return false;
    }

    boolean this_present_rowCount = true;
    boolean that_present_rowCount = true;
    if (this_present_rowCount || that_present_rowCount) {
      if (!(this_present_rowCount && that_present_rowCount))
        return false;
      if (this.rowCount != that.rowCount)
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((succeeded) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((limited) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((overflowed) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rowCount);

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + properties.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BTResultSetMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSucceeded()).compareTo(other.isSetSucceeded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSucceeded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.succeeded, other.succeeded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLimited()).compareTo(other.isSetLimited());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimited()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limited, other.limited);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOverflowed()).compareTo(other.isSetOverflowed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverflowed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overflowed, other.overflowed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRowCount()).compareTo(other.isSetRowCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowCount, other.rowCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BTResultSetMeta(");
    boolean first = true;

    sb.append("succeeded:");
    sb.append(this.succeeded);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limited:");
    sb.append(this.limited);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overflowed:");
    sb.append(this.overflowed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rowCount:");
    sb.append(this.rowCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("properties:");
    if (this.properties == null) {
      sb.append("null");
    } else {
      sb.append(this.properties);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'succeeded' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'limited' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'overflowed' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'rowCount' because it's a primitive and you chose the non-beans generator.
    if (properties == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'properties' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BTResultSetMetaStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTResultSetMetaStandardScheme getScheme() {
      return new BTResultSetMetaStandardScheme();
    }
  }

  private static class BTResultSetMetaStandardScheme extends org.apache.thrift.scheme.StandardScheme<BTResultSetMeta> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BTResultSetMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUCCEEDED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.succeeded = iprot.readBool();
              struct.setSucceededIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIMITED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.limited = iprot.readBool();
              struct.setLimitedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OVERFLOWED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.overflowed = iprot.readBool();
              struct.setOverflowedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rowCount = iprot.readI64();
              struct.setRowCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                @org.apache.thrift.annotation.Nullable java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.properties.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSucceeded()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'succeeded' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLimited()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'limited' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOverflowed()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'overflowed' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRowCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rowCount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BTResultSetMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SUCCEEDED_FIELD_DESC);
      oprot.writeBool(struct.succeeded);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMITED_FIELD_DESC);
      oprot.writeBool(struct.limited);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERFLOWED_FIELD_DESC);
      oprot.writeBool(struct.overflowed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
      oprot.writeI64(struct.rowCount);
      oprot.writeFieldEnd();
      if (struct.properties != null) {
        oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 : struct.properties.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BTResultSetMetaTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BTResultSetMetaTupleScheme getScheme() {
      return new BTResultSetMetaTupleScheme();
    }
  }

  private static class BTResultSetMetaTupleScheme extends org.apache.thrift.scheme.TupleScheme<BTResultSetMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BTResultSetMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeBool(struct.succeeded);
      oprot.writeBool(struct.limited);
      oprot.writeBool(struct.overflowed);
      oprot.writeI64(struct.rowCount);
      {
        oprot.writeI32(struct.properties.size());
        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 : struct.properties.entrySet())
        {
          oprot.writeString(_iter5.getKey());
          oprot.writeString(_iter5.getValue());
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BTResultSetMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.succeeded = iprot.readBool();
      struct.setSucceededIsSet(true);
      struct.limited = iprot.readBool();
      struct.setLimitedIsSet(true);
      struct.overflowed = iprot.readBool();
      struct.setOverflowedIsSet(true);
      struct.rowCount = iprot.readI64();
      struct.setRowCountIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _key7;
        @org.apache.thrift.annotation.Nullable java.lang.String _val8;
        for (int _i9 = 0; _i9 < _map6.size; ++_i9)
        {
          _key7 = iprot.readString();
          _val8 = iprot.readString();
          struct.properties.put(_key7, _val8);
        }
      }
      struct.setPropertiesIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

